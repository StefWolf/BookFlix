import {
  CSSVars,
  ColorModeContext,
  ColorModeProvider,
  ColorModeScript,
  DarkMode,
  Global,
  GlobalStyle,
  Icon,
  Icon$1,
  LightMode,
  STORAGE_KEY,
  StylesProvider,
  ThemeProvider,
  __DEV__,
  addItem,
  addPrefix,
  ariaAttr,
  arrayToObjectNotation,
  assignRef,
  background,
  border,
  breakpoints,
  calc,
  callAll,
  callAllHandlers,
  chakra,
  clampValue,
  color,
  contains,
  cookieStorageManager,
  cookieStorageManagerSSR,
  countDecimalPlaces,
  createContext,
  createCookieStorageManager,
  createIcon,
  createLocalStorageManager,
  createStylesContext,
  css,
  cssVar,
  cx,
  dataAttr,
  determineLazyBehavior,
  effect,
  filter,
  filterUndefined,
  flattenTokens,
  flexbox,
  focus,
  forwardRef,
  fromEntries,
  getAllFocusable,
  getBox,
  getCSSVar,
  getCss,
  getNextItemFromSearch,
  getOwnerDocument,
  getOwnerWindow,
  getRelatedTarget,
  getScriptSrc,
  getToken,
  getValidChildren,
  grid,
  import_lodash,
  interactivity,
  isActiveElement,
  isArray,
  isBrowser,
  isEmpty,
  isEmptyObject,
  isFunction,
  isHTMLElement,
  isInputEvent,
  isNull,
  isNumber,
  isObject,
  isRightClick,
  isString,
  isStyleProp,
  isUndefined,
  keyframes,
  layout,
  layoutPropNames,
  list,
  localStorageManager,
  mapResponsive,
  maxSafeInteger,
  memoizedGet,
  mergeRefs,
  minSafeInteger,
  noop,
  normalizeEventKey,
  objectKeys,
  omit,
  omitThemingProps,
  others,
  percentToValue,
  pick,
  pipe,
  position,
  propNames,
  pseudoPropNames,
  pseudoSelectors,
  px,
  removeItem,
  require_react_is,
  resolveStyleConfig,
  ring,
  roundValueToStep,
  runIfFn,
  scroll,
  shouldForwardProp,
  space,
  split,
  styled,
  systemProps,
  textDecoration,
  toCSSObject,
  toCSSVar,
  toPrecision,
  toVarDefinition,
  toVarReference,
  tokenToCSSVar,
  transform,
  transition,
  typography,
  useAnimationState,
  useBoolean,
  useCallbackRef,
  useChakra,
  useClipboard,
  useColorMode,
  useColorModeValue,
  useConst,
  useControllableProp,
  useControllableState,
  useDimensions,
  useDisclosure,
  useEventListener,
  useEventListenerMap,
  useFocusEffect,
  useFocusOnHide,
  useFocusOnPointerDown,
  useFocusOnShow,
  useForceUpdate,
  useId,
  useIds,
  useInterval,
  useLatestRef,
  useMergeRefs,
  useMouseDownRef,
  useMultiStyleConfig,
  useOptionalPart,
  useOutsideClick,
  usePanGesture,
  usePointerEvent,
  usePrevious,
  useSafeLayoutEffect,
  useShortcut,
  useStyleConfig,
  useStyles,
  useTheme,
  useTimeout,
  useToken,
  useUnmountEffect,
  useUpdateEffect,
  useWhyDidYouUpdate,
  valueToPercent,
  warn
} from "./chunk-JZI6XVBH.js";
import {
  _extends
} from "./chunk-GCEFSD4J.js";
import {
  require_react_dom
} from "./chunk-6MDKZZLV.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM,
  require_react
} from "./chunk-QM6KTHUM.js";

// node_modules/framer-motion/node_modules/@emotion/memoize/dist/memoize.browser.esm.js
function memoize(fn6) {
  var cache = {};
  return function(arg) {
    if (cache[arg] === void 0)
      cache[arg] = fn6(arg);
    return cache[arg];
  };
}
var memoize_browser_esm_default;
var init_memoize_browser_esm = __esm({
  "node_modules/framer-motion/node_modules/@emotion/memoize/dist/memoize.browser.esm.js"() {
    memoize_browser_esm_default = memoize;
  }
});

// node_modules/framer-motion/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js
var is_prop_valid_browser_esm_exports = {};
__export(is_prop_valid_browser_esm_exports, {
  default: () => is_prop_valid_browser_esm_default
});
var reactPropsRegex, index, is_prop_valid_browser_esm_default;
var init_is_prop_valid_browser_esm = __esm({
  "node_modules/framer-motion/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js"() {
    init_memoize_browser_esm();
    reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    index = memoize_browser_esm_default(function(prop) {
      return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
    });
    is_prop_valid_browser_esm_default = index;
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order22 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order22.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement6, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate2) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate2(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate2(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType });
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate2(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createElementTypeChecker() {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement6(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createElementTypeTypeChecker() {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate2(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate2);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate2(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate2(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate2);
      }
      function createNodeChecker() {
        function validate2(props, propName, componentName, location, propFullName) {
          if (!isNode2(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function isNode2(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode2);
            }
            if (propValue === null || isValidElement6(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode2(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode2(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/@chakra-ui/react/dist/chakra-ui-react.esm.js
var React68 = __toESM(require_react());

// node_modules/@chakra-ui/css-reset/dist/chakra-ui-css-reset.esm.js
var React = __toESM(require_react());
var CSSReset = function CSSReset2() {
  return React.createElement(Global, {
    styles: `
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        font-family: system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        touch-action: manipulation;
      }

      body {
        position: relative;
        min-height: 100%;
        font-feature-settings: 'kern';
      }

      *,
      *::before,
      *::after {
        border-width: 0;
        border-style: solid;
        box-sizing: border-box;
      }

      main {
        display: block;
      }

      hr {
        border-top-width: 1px;
        box-sizing: content-box;
        height: 0;
        overflow: visible;
      }

      pre,
      code,
      kbd,
      samp {
        font-family: SFMono-Regular,  Menlo, Monaco, Consolas, monospace;
        font-size: 1em;
      }

      a {
        background-color: transparent;
        color: inherit;
        text-decoration: inherit;
      }

      abbr[title] {
        border-bottom: none;
        text-decoration: underline;
        -webkit-text-decoration: underline dotted;
        text-decoration: underline dotted;
      }

      b,
      strong {
        font-weight: bold;
      }

      small {
        font-size: 80%;
      }

      sub,
      sup {
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
      }

      sub {
        bottom: -0.25em;
      }

      sup {
        top: -0.5em;
      }

      img {
        border-style: none;
      }

      button,
      input,
      optgroup,
      select,
      textarea {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }

      button,
      input {
        overflow: visible;
      }

      button,
      select {
        text-transform: none;
      }

      button::-moz-focus-inner,
      [type="button"]::-moz-focus-inner,
      [type="reset"]::-moz-focus-inner,
      [type="submit"]::-moz-focus-inner {
        border-style: none;
        padding: 0;
      }

      fieldset {
        padding: 0.35em 0.75em 0.625em;
      }

      legend {
        box-sizing: border-box;
        color: inherit;
        display: table;
        max-width: 100%;
        padding: 0;
        white-space: normal;
      }

      progress {
        vertical-align: baseline;
      }

      textarea {
        overflow: auto;
      }

      [type="checkbox"],
      [type="radio"] {
        box-sizing: border-box;
        padding: 0;
      }

      [type="number"]::-webkit-inner-spin-button,
      [type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
      }

      input[type="number"] {
        -moz-appearance: textfield;
      }

      [type="search"] {
        -webkit-appearance: textfield;
        outline-offset: -2px;
      }

      [type="search"]::-webkit-search-decoration {
        -webkit-appearance: none !important;
      }

      ::-webkit-file-upload-button {
        -webkit-appearance: button;
        font: inherit;
      }

      details {
        display: block;
      }

      summary {
        display: list-item;
      }

      template {
        display: none;
      }

      [hidden] {
        display: none !important;
      }

      body,
      blockquote,
      dl,
      dd,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      hr,
      figure,
      p,
      pre {
        margin: 0;
      }

      button {
        background: transparent;
        padding: 0;
      }

      fieldset {
        margin: 0;
        padding: 0;
      }

      ol,
      ul {
        margin: 0;
        padding: 0;
      }

      textarea {
        resize: vertical;
      }

      button,
      [role="button"] {
        cursor: pointer;
      }

      button::-moz-focus-inner {
        border: 0 !important;
      }

      table {
        border-collapse: collapse;
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        font-size: inherit;
        font-weight: inherit;
      }

      button,
      input,
      optgroup,
      select,
      textarea {
        padding: 0;
        line-height: inherit;
        color: inherit;
      }

      img,
      svg,
      video,
      canvas,
      audio,
      iframe,
      embed,
      object {
        display: block;
      }

      img,
      video {
        max-width: 100%;
        height: auto;
      }

      [data-js-focus-visible] :focus:not([data-focus-visible-added]):not([data-focus-visible-disabled]) {
        outline: none;
        box-shadow: none;
      }

      select::-ms-expand {
        display: none;
      }
    `
  });
};
var CSSReset$1 = CSSReset;

// node_modules/@chakra-ui/portal/dist/chakra-ui-portal.esm.js
var React2 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var _createContext$1 = createContext({
  strict: false,
  name: "PortalManagerContext"
});
var PortalManagerContextProvider = _createContext$1[0];
var usePortalManager = _createContext$1[1];
function PortalManager(props) {
  var children = props.children, zIndex = props.zIndex;
  return React2.createElement(PortalManagerContextProvider, {
    value: {
      zIndex
    }
  }, children);
}
if (__DEV__) {
  PortalManager.displayName = "PortalManager";
}
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded = ["containerRef"];
var _createContext = createContext({
  strict: false,
  name: "PortalContext"
});
var PortalContextProvider = _createContext[0];
var usePortalContext = _createContext[1];
var PORTAL_CLASSNAME = "chakra-portal";
var PORTAL_SELECTOR = ".chakra-portal";
var Container = function Container2(props) {
  return React2.createElement("div", {
    className: "chakra-portal-zIndex",
    style: {
      position: "absolute",
      zIndex: props.zIndex,
      top: 0,
      left: 0,
      right: 0
    }
  }, props.children);
};
var DefaultPortal = function DefaultPortal2(props) {
  var appendToParentPortal = props.appendToParentPortal, children = props.children;
  var _React$useState = React2.useState(null), tempNode = _React$useState[0], setTempNode = _React$useState[1];
  var portal = React2.useRef(null);
  var forceUpdate = useForceUpdate();
  React2.useEffect(forceUpdate, []);
  var parentPortal = usePortalContext();
  var manager2 = usePortalManager();
  useSafeLayoutEffect(function() {
    if (!tempNode)
      return;
    var doc2 = tempNode.ownerDocument;
    var host = appendToParentPortal ? parentPortal != null ? parentPortal : doc2.body : doc2.body;
    if (!host)
      return;
    portal.current = doc2.createElement("div");
    portal.current.className = PORTAL_CLASSNAME;
    host.appendChild(portal.current);
    forceUpdate();
    var portalNode = portal.current;
    return function() {
      if (host.contains(portalNode)) {
        host.removeChild(portalNode);
      }
    };
  }, [tempNode]);
  var _children = manager2 != null && manager2.zIndex ? React2.createElement(Container, {
    zIndex: manager2 == null ? void 0 : manager2.zIndex
  }, children) : children;
  return portal.current ? (0, import_react_dom.createPortal)(React2.createElement(PortalContextProvider, {
    value: portal.current
  }, _children), portal.current) : React2.createElement("span", {
    ref: function ref(el) {
      if (el)
        setTempNode(el);
    }
  });
};
var ContainerPortal = function ContainerPortal2(props) {
  var children = props.children, containerRef = props.containerRef, appendToParentPortal = props.appendToParentPortal;
  var containerEl = containerRef.current;
  var host = containerEl != null ? containerEl : isBrowser ? document.body : void 0;
  var portal = React2.useMemo(function() {
    var node2 = containerEl == null ? void 0 : containerEl.ownerDocument.createElement("div");
    if (node2)
      node2.className = PORTAL_CLASSNAME;
    return node2;
  }, [containerEl]);
  var forceUpdate = useForceUpdate();
  useSafeLayoutEffect(function() {
    forceUpdate();
  }, []);
  useSafeLayoutEffect(function() {
    if (!portal || !host)
      return;
    host.appendChild(portal);
    return function() {
      host.removeChild(portal);
    };
  }, [portal, host]);
  if (host && portal) {
    return (0, import_react_dom.createPortal)(React2.createElement(PortalContextProvider, {
      value: appendToParentPortal ? portal : null
    }, children), portal);
  }
  return null;
};
function Portal(props) {
  var containerRef = props.containerRef, rest = _objectWithoutPropertiesLoose(props, _excluded);
  return containerRef ? React2.createElement(ContainerPortal, _extends2({
    containerRef
  }, rest)) : React2.createElement(DefaultPortal, rest);
}
Portal.defaultProps = {
  appendToParentPortal: true
};
Portal.className = PORTAL_CLASSNAME;
Portal.selector = PORTAL_SELECTOR;
if (__DEV__) {
  Portal.displayName = "Portal";
}

// node_modules/@chakra-ui/react-env/dist/chakra-ui-react-env.esm.js
var import_react2 = __toESM(require_react());
var doc = {
  body: {
    classList: {
      add: function add() {
      },
      remove: function remove() {
      }
    }
  },
  addEventListener: function addEventListener() {
  },
  removeEventListener: function removeEventListener() {
  },
  activeElement: {
    blur: function blur() {
    },
    nodeName: ""
  },
  querySelector: function querySelector() {
    return null;
  },
  querySelectorAll: function querySelectorAll() {
    return [];
  },
  getElementById: function getElementById() {
    return null;
  },
  createEvent: function createEvent() {
    return {
      initEvent: function initEvent() {
      }
    };
  },
  createElement: function createElement3() {
    return {
      children: [],
      childNodes: [],
      style: {},
      setAttribute: function setAttribute() {
      },
      getElementsByTagName: function getElementsByTagName() {
        return [];
      }
    };
  }
};
var ssrDocument = doc;
var noop2 = function noop3() {
};
var win = {
  document: ssrDocument,
  navigator: {
    userAgent: ""
  },
  CustomEvent: function CustomEvent2() {
    return this;
  },
  addEventListener: noop2,
  removeEventListener: noop2,
  getComputedStyle: function getComputedStyle2() {
    return {
      getPropertyValue: function getPropertyValue() {
        return "";
      }
    };
  },
  matchMedia: function matchMedia() {
    return {
      matches: false,
      addListener: noop2,
      removeListener: noop2
    };
  },
  requestAnimationFrame: function requestAnimationFrame2(callback) {
    if (typeof setTimeout === "undefined") {
      callback();
      return null;
    }
    return setTimeout(callback, 0);
  },
  cancelAnimationFrame: function cancelAnimationFrame2(id2) {
    if (typeof setTimeout === "undefined")
      return;
    clearTimeout(id2);
  },
  setTimeout: function setTimeout2() {
    return 0;
  },
  clearTimeout: noop2,
  setInterval: function setInterval() {
    return 0;
  },
  clearInterval: noop2
};
var ssrWindow = win;
var mockEnv = {
  window: ssrWindow,
  document: ssrDocument
};
var defaultEnv = isBrowser ? {
  window,
  document
} : mockEnv;
var EnvironmentContext = (0, import_react2.createContext)(defaultEnv);
if (__DEV__) {
  EnvironmentContext.displayName = "EnvironmentContext";
}
function useEnvironment() {
  return (0, import_react2.useContext)(EnvironmentContext);
}
function EnvironmentProvider(props) {
  var children = props.children, environmentProp = props.environment;
  var _useState = (0, import_react2.useState)(null), node2 = _useState[0], setNode = _useState[1];
  var _useState2 = (0, import_react2.useState)(false), mounted = _useState2[0], setMounted = _useState2[1];
  (0, import_react2.useEffect)(function() {
    return setMounted(true);
  }, []);
  var context = (0, import_react2.useMemo)(function() {
    var _ref2;
    var doc2 = node2 == null ? void 0 : node2.ownerDocument;
    var win2 = node2 == null ? void 0 : node2.ownerDocument.defaultView;
    var nodeEnv = doc2 ? {
      document: doc2,
      window: win2
    } : void 0;
    var env3 = (_ref2 = environmentProp != null ? environmentProp : nodeEnv) != null ? _ref2 : defaultEnv;
    return env3;
  }, [node2, environmentProp]);
  return import_react2.default.createElement(EnvironmentContext.Provider, {
    value: context
  }, children, mounted && import_react2.default.createElement("span", {
    ref: function ref(el) {
      (0, import_react2.startTransition)(function() {
        if (el)
          setNode(el);
      });
    }
  }));
}
if (__DEV__) {
  EnvironmentProvider.displayName = "EnvironmentProvider";
}

// node_modules/@chakra-ui/provider/dist/chakra-ui-provider.esm.js
var React4 = __toESM(require_react());
var ChakraProvider = function ChakraProvider2(props) {
  var children = props.children, colorModeManager = props.colorModeManager, portalZIndex = props.portalZIndex, _props$resetCSS = props.resetCSS, resetCSS = _props$resetCSS === void 0 ? true : _props$resetCSS, _props$theme = props.theme, theme2 = _props$theme === void 0 ? {} : _props$theme, environment = props.environment, cssVarsRoot = props.cssVarsRoot;
  var _children = React4.createElement(EnvironmentProvider, {
    environment
  }, children);
  return React4.createElement(ThemeProvider, {
    theme: theme2,
    cssVarsRoot
  }, React4.createElement(ColorModeProvider, {
    colorModeManager,
    options: theme2.config
  }, resetCSS && React4.createElement(CSSReset$1, null), React4.createElement(GlobalStyle, null), portalZIndex ? React4.createElement(PortalManager, {
    zIndex: portalZIndex
  }, _children) : _children));
};

// node_modules/@chakra-ui/theme/foundations/spacing/dist/chakra-ui-theme-foundations-spacing.esm.js
var spacing = {
  px: "1px",
  0.5: "0.125rem",
  1: "0.25rem",
  1.5: "0.375rem",
  2: "0.5rem",
  2.5: "0.625rem",
  3: "0.75rem",
  3.5: "0.875rem",
  4: "1rem",
  5: "1.25rem",
  6: "1.5rem",
  7: "1.75rem",
  8: "2rem",
  9: "2.25rem",
  10: "2.5rem",
  12: "3rem",
  14: "3.5rem",
  16: "4rem",
  20: "5rem",
  24: "6rem",
  28: "7rem",
  32: "8rem",
  36: "9rem",
  40: "10rem",
  44: "11rem",
  48: "12rem",
  52: "13rem",
  56: "14rem",
  60: "15rem",
  64: "16rem",
  72: "18rem",
  80: "20rem",
  96: "24rem"
};

// node_modules/@chakra-ui/theme/dist/sizes-501602a9.esm.js
function _extends3() {
  _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
var largeSizes = {
  max: "max-content",
  min: "min-content",
  full: "100%",
  "3xs": "14rem",
  "2xs": "16rem",
  xs: "20rem",
  sm: "24rem",
  md: "28rem",
  lg: "32rem",
  xl: "36rem",
  "2xl": "42rem",
  "3xl": "48rem",
  "4xl": "56rem",
  "5xl": "64rem",
  "6xl": "72rem",
  "7xl": "80rem",
  "8xl": "90rem"
};
var container = {
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px"
};
var sizes = _extends3({}, spacing, largeSizes, {
  container
});

// node_modules/@ctrl/tinycolor/dist/module/util.js
function bound01(n, max2) {
  if (isOnePointZero(n)) {
    n = "100%";
  }
  var isPercent = isPercentage(n);
  n = max2 === 360 ? n : Math.min(max2, Math.max(0, parseFloat(n)));
  if (isPercent) {
    n = parseInt(String(n * max2), 10) / 100;
  }
  if (Math.abs(n - max2) < 1e-6) {
    return 1;
  }
  if (max2 === 360) {
    n = (n < 0 ? n % max2 + max2 : n % max2) / parseFloat(String(max2));
  } else {
    n = n % max2 / parseFloat(String(max2));
  }
  return n;
}
function clamp01(val) {
  return Math.min(1, Math.max(0, val));
}
function isOnePointZero(n) {
  return typeof n === "string" && n.indexOf(".") !== -1 && parseFloat(n) === 1;
}
function isPercentage(n) {
  return typeof n === "string" && n.indexOf("%") !== -1;
}
function boundAlpha(a2) {
  a2 = parseFloat(a2);
  if (isNaN(a2) || a2 < 0 || a2 > 1) {
    a2 = 1;
  }
  return a2;
}
function convertToPercentage(n) {
  if (n <= 1) {
    return "".concat(Number(n) * 100, "%");
  }
  return n;
}
function pad2(c2) {
  return c2.length === 1 ? "0" + c2 : String(c2);
}

// node_modules/@ctrl/tinycolor/dist/module/conversion.js
function rgbToRgb(r, g, b2) {
  return {
    r: bound01(r, 255) * 255,
    g: bound01(g, 255) * 255,
    b: bound01(b2, 255) * 255
  };
}
function rgbToHsl(r, g, b2) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b2 = bound01(b2, 255);
  var max2 = Math.max(r, g, b2);
  var min2 = Math.min(r, g, b2);
  var h = 0;
  var s = 0;
  var l = (max2 + min2) / 2;
  if (max2 === min2) {
    s = 0;
    h = 0;
  } else {
    var d = max2 - min2;
    s = l > 0.5 ? d / (2 - max2 - min2) : d / (max2 + min2);
    switch (max2) {
      case r:
        h = (g - b2) / d + (g < b2 ? 6 : 0);
        break;
      case g:
        h = (b2 - r) / d + 2;
        break;
      case b2:
        h = (r - g) / d + 4;
        break;
      default:
        break;
    }
    h /= 6;
  }
  return { h, s, l };
}
function hue2rgb(p, q, t) {
  if (t < 0) {
    t += 1;
  }
  if (t > 1) {
    t -= 1;
  }
  if (t < 1 / 6) {
    return p + (q - p) * (6 * t);
  }
  if (t < 1 / 2) {
    return q;
  }
  if (t < 2 / 3) {
    return p + (q - p) * (2 / 3 - t) * 6;
  }
  return p;
}
function hslToRgb(h, s, l) {
  var r;
  var g;
  var b2;
  h = bound01(h, 360);
  s = bound01(s, 100);
  l = bound01(l, 100);
  if (s === 0) {
    g = l;
    b2 = l;
    r = l;
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b2 = hue2rgb(p, q, h - 1 / 3);
  }
  return { r: r * 255, g: g * 255, b: b2 * 255 };
}
function rgbToHsv(r, g, b2) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b2 = bound01(b2, 255);
  var max2 = Math.max(r, g, b2);
  var min2 = Math.min(r, g, b2);
  var h = 0;
  var v = max2;
  var d = max2 - min2;
  var s = max2 === 0 ? 0 : d / max2;
  if (max2 === min2) {
    h = 0;
  } else {
    switch (max2) {
      case r:
        h = (g - b2) / d + (g < b2 ? 6 : 0);
        break;
      case g:
        h = (b2 - r) / d + 2;
        break;
      case b2:
        h = (r - g) / d + 4;
        break;
      default:
        break;
    }
    h /= 6;
  }
  return { h, s, v };
}
function hsvToRgb(h, s, v) {
  h = bound01(h, 360) * 6;
  s = bound01(s, 100);
  v = bound01(v, 100);
  var i = Math.floor(h);
  var f = h - i;
  var p = v * (1 - s);
  var q = v * (1 - f * s);
  var t = v * (1 - (1 - f) * s);
  var mod = i % 6;
  var r = [v, q, p, p, t, v][mod];
  var g = [t, v, v, q, p, p][mod];
  var b2 = [p, p, t, v, v, q][mod];
  return { r: r * 255, g: g * 255, b: b2 * 255 };
}
function rgbToHex(r, g, b2, allow3Char) {
  var hex2 = [
    pad2(Math.round(r).toString(16)),
    pad2(Math.round(g).toString(16)),
    pad2(Math.round(b2).toString(16))
  ];
  if (allow3Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1))) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0);
  }
  return hex2.join("");
}
function rgbaToHex(r, g, b2, a2, allow4Char) {
  var hex2 = [
    pad2(Math.round(r).toString(16)),
    pad2(Math.round(g).toString(16)),
    pad2(Math.round(b2).toString(16)),
    pad2(convertDecimalToHex(a2))
  ];
  if (allow4Char && hex2[0].startsWith(hex2[0].charAt(1)) && hex2[1].startsWith(hex2[1].charAt(1)) && hex2[2].startsWith(hex2[2].charAt(1)) && hex2[3].startsWith(hex2[3].charAt(1))) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0) + hex2[3].charAt(0);
  }
  return hex2.join("");
}
function convertDecimalToHex(d) {
  return Math.round(parseFloat(d) * 255).toString(16);
}
function convertHexToDecimal(h) {
  return parseIntFromHex(h) / 255;
}
function parseIntFromHex(val) {
  return parseInt(val, 16);
}
function numberInputToObject(color3) {
  return {
    r: color3 >> 16,
    g: (color3 & 65280) >> 8,
    b: color3 & 255
  };
}

// node_modules/@ctrl/tinycolor/dist/module/css-color-names.js
var names = {
  aliceblue: "#f0f8ff",
  antiquewhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedalmond: "#ffebcd",
  blue: "#0000ff",
  blueviolet: "#8a2be2",
  brown: "#a52a2a",
  burlywood: "#deb887",
  cadetblue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflowerblue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00ffff",
  darkblue: "#00008b",
  darkcyan: "#008b8b",
  darkgoldenrod: "#b8860b",
  darkgray: "#a9a9a9",
  darkgreen: "#006400",
  darkgrey: "#a9a9a9",
  darkkhaki: "#bdb76b",
  darkmagenta: "#8b008b",
  darkolivegreen: "#556b2f",
  darkorange: "#ff8c00",
  darkorchid: "#9932cc",
  darkred: "#8b0000",
  darksalmon: "#e9967a",
  darkseagreen: "#8fbc8f",
  darkslateblue: "#483d8b",
  darkslategray: "#2f4f4f",
  darkslategrey: "#2f4f4f",
  darkturquoise: "#00ced1",
  darkviolet: "#9400d3",
  deeppink: "#ff1493",
  deepskyblue: "#00bfff",
  dimgray: "#696969",
  dimgrey: "#696969",
  dodgerblue: "#1e90ff",
  firebrick: "#b22222",
  floralwhite: "#fffaf0",
  forestgreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostwhite: "#f8f8ff",
  goldenrod: "#daa520",
  gold: "#ffd700",
  gray: "#808080",
  green: "#008000",
  greenyellow: "#adff2f",
  grey: "#808080",
  honeydew: "#f0fff0",
  hotpink: "#ff69b4",
  indianred: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  lavenderblush: "#fff0f5",
  lavender: "#e6e6fa",
  lawngreen: "#7cfc00",
  lemonchiffon: "#fffacd",
  lightblue: "#add8e6",
  lightcoral: "#f08080",
  lightcyan: "#e0ffff",
  lightgoldenrodyellow: "#fafad2",
  lightgray: "#d3d3d3",
  lightgreen: "#90ee90",
  lightgrey: "#d3d3d3",
  lightpink: "#ffb6c1",
  lightsalmon: "#ffa07a",
  lightseagreen: "#20b2aa",
  lightskyblue: "#87cefa",
  lightslategray: "#778899",
  lightslategrey: "#778899",
  lightsteelblue: "#b0c4de",
  lightyellow: "#ffffe0",
  lime: "#00ff00",
  limegreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#ff00ff",
  maroon: "#800000",
  mediumaquamarine: "#66cdaa",
  mediumblue: "#0000cd",
  mediumorchid: "#ba55d3",
  mediumpurple: "#9370db",
  mediumseagreen: "#3cb371",
  mediumslateblue: "#7b68ee",
  mediumspringgreen: "#00fa9a",
  mediumturquoise: "#48d1cc",
  mediumvioletred: "#c71585",
  midnightblue: "#191970",
  mintcream: "#f5fffa",
  mistyrose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajowhite: "#ffdead",
  navy: "#000080",
  oldlace: "#fdf5e6",
  olive: "#808000",
  olivedrab: "#6b8e23",
  orange: "#ffa500",
  orangered: "#ff4500",
  orchid: "#da70d6",
  palegoldenrod: "#eee8aa",
  palegreen: "#98fb98",
  paleturquoise: "#afeeee",
  palevioletred: "#db7093",
  papayawhip: "#ffefd5",
  peachpuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderblue: "#b0e0e6",
  purple: "#800080",
  rebeccapurple: "#663399",
  red: "#ff0000",
  rosybrown: "#bc8f8f",
  royalblue: "#4169e1",
  saddlebrown: "#8b4513",
  salmon: "#fa8072",
  sandybrown: "#f4a460",
  seagreen: "#2e8b57",
  seashell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyblue: "#87ceeb",
  slateblue: "#6a5acd",
  slategray: "#708090",
  slategrey: "#708090",
  snow: "#fffafa",
  springgreen: "#00ff7f",
  steelblue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whitesmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowgreen: "#9acd32"
};

// node_modules/@ctrl/tinycolor/dist/module/format-input.js
function inputToRGB(color3) {
  var rgb = { r: 0, g: 0, b: 0 };
  var a2 = 1;
  var s = null;
  var v = null;
  var l = null;
  var ok = false;
  var format2 = false;
  if (typeof color3 === "string") {
    color3 = stringInputToObject(color3);
  }
  if (typeof color3 === "object") {
    if (isValidCSSUnit(color3.r) && isValidCSSUnit(color3.g) && isValidCSSUnit(color3.b)) {
      rgb = rgbToRgb(color3.r, color3.g, color3.b);
      ok = true;
      format2 = String(color3.r).substr(-1) === "%" ? "prgb" : "rgb";
    } else if (isValidCSSUnit(color3.h) && isValidCSSUnit(color3.s) && isValidCSSUnit(color3.v)) {
      s = convertToPercentage(color3.s);
      v = convertToPercentage(color3.v);
      rgb = hsvToRgb(color3.h, s, v);
      ok = true;
      format2 = "hsv";
    } else if (isValidCSSUnit(color3.h) && isValidCSSUnit(color3.s) && isValidCSSUnit(color3.l)) {
      s = convertToPercentage(color3.s);
      l = convertToPercentage(color3.l);
      rgb = hslToRgb(color3.h, s, l);
      ok = true;
      format2 = "hsl";
    }
    if (Object.prototype.hasOwnProperty.call(color3, "a")) {
      a2 = color3.a;
    }
  }
  a2 = boundAlpha(a2);
  return {
    ok,
    format: color3.format || format2,
    r: Math.min(255, Math.max(rgb.r, 0)),
    g: Math.min(255, Math.max(rgb.g, 0)),
    b: Math.min(255, Math.max(rgb.b, 0)),
    a: a2
  };
}
var CSS_INTEGER = "[-\\+]?\\d+%?";
var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
var CSS_UNIT = "(?:".concat(CSS_NUMBER, ")|(?:").concat(CSS_INTEGER, ")");
var PERMISSIVE_MATCH3 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var PERMISSIVE_MATCH4 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var matchers = {
  CSS_UNIT: new RegExp(CSS_UNIT),
  rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
  rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
  hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
  hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
  hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
  hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
};
function stringInputToObject(color3) {
  color3 = color3.trim().toLowerCase();
  if (color3.length === 0) {
    return false;
  }
  var named = false;
  if (names[color3]) {
    color3 = names[color3];
    named = true;
  } else if (color3 === "transparent") {
    return { r: 0, g: 0, b: 0, a: 0, format: "name" };
  }
  var match = matchers.rgb.exec(color3);
  if (match) {
    return { r: match[1], g: match[2], b: match[3] };
  }
  match = matchers.rgba.exec(color3);
  if (match) {
    return { r: match[1], g: match[2], b: match[3], a: match[4] };
  }
  match = matchers.hsl.exec(color3);
  if (match) {
    return { h: match[1], s: match[2], l: match[3] };
  }
  match = matchers.hsla.exec(color3);
  if (match) {
    return { h: match[1], s: match[2], l: match[3], a: match[4] };
  }
  match = matchers.hsv.exec(color3);
  if (match) {
    return { h: match[1], s: match[2], v: match[3] };
  }
  match = matchers.hsva.exec(color3);
  if (match) {
    return { h: match[1], s: match[2], v: match[3], a: match[4] };
  }
  match = matchers.hex8.exec(color3);
  if (match) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      a: convertHexToDecimal(match[4]),
      format: named ? "name" : "hex8"
    };
  }
  match = matchers.hex6.exec(color3);
  if (match) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      format: named ? "name" : "hex"
    };
  }
  match = matchers.hex4.exec(color3);
  if (match) {
    return {
      r: parseIntFromHex(match[1] + match[1]),
      g: parseIntFromHex(match[2] + match[2]),
      b: parseIntFromHex(match[3] + match[3]),
      a: convertHexToDecimal(match[4] + match[4]),
      format: named ? "name" : "hex8"
    };
  }
  match = matchers.hex3.exec(color3);
  if (match) {
    return {
      r: parseIntFromHex(match[1] + match[1]),
      g: parseIntFromHex(match[2] + match[2]),
      b: parseIntFromHex(match[3] + match[3]),
      format: named ? "name" : "hex"
    };
  }
  return false;
}
function isValidCSSUnit(color3) {
  return Boolean(matchers.CSS_UNIT.exec(String(color3)));
}

// node_modules/@ctrl/tinycolor/dist/module/index.js
var TinyColor = function() {
  function TinyColor2(color3, opts) {
    if (color3 === void 0) {
      color3 = "";
    }
    if (opts === void 0) {
      opts = {};
    }
    var _a;
    if (color3 instanceof TinyColor2) {
      return color3;
    }
    if (typeof color3 === "number") {
      color3 = numberInputToObject(color3);
    }
    this.originalInput = color3;
    var rgb = inputToRGB(color3);
    this.originalInput = color3;
    this.r = rgb.r;
    this.g = rgb.g;
    this.b = rgb.b;
    this.a = rgb.a;
    this.roundA = Math.round(100 * this.a) / 100;
    this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;
    this.gradientType = opts.gradientType;
    if (this.r < 1) {
      this.r = Math.round(this.r);
    }
    if (this.g < 1) {
      this.g = Math.round(this.g);
    }
    if (this.b < 1) {
      this.b = Math.round(this.b);
    }
    this.isValid = rgb.ok;
  }
  TinyColor2.prototype.isDark = function() {
    return this.getBrightness() < 128;
  };
  TinyColor2.prototype.isLight = function() {
    return !this.isDark();
  };
  TinyColor2.prototype.getBrightness = function() {
    var rgb = this.toRgb();
    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
  };
  TinyColor2.prototype.getLuminance = function() {
    var rgb = this.toRgb();
    var R;
    var G;
    var B;
    var RsRGB = rgb.r / 255;
    var GsRGB = rgb.g / 255;
    var BsRGB = rgb.b / 255;
    if (RsRGB <= 0.03928) {
      R = RsRGB / 12.92;
    } else {
      R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
    }
    if (GsRGB <= 0.03928) {
      G = GsRGB / 12.92;
    } else {
      G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
    }
    if (BsRGB <= 0.03928) {
      B = BsRGB / 12.92;
    } else {
      B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
    }
    return 0.2126 * R + 0.7152 * G + 0.0722 * B;
  };
  TinyColor2.prototype.getAlpha = function() {
    return this.a;
  };
  TinyColor2.prototype.setAlpha = function(alpha2) {
    this.a = boundAlpha(alpha2);
    this.roundA = Math.round(100 * this.a) / 100;
    return this;
  };
  TinyColor2.prototype.toHsv = function() {
    var hsv = rgbToHsv(this.r, this.g, this.b);
    return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
  };
  TinyColor2.prototype.toHsvString = function() {
    var hsv = rgbToHsv(this.r, this.g, this.b);
    var h = Math.round(hsv.h * 360);
    var s = Math.round(hsv.s * 100);
    var v = Math.round(hsv.v * 100);
    return this.a === 1 ? "hsv(".concat(h, ", ").concat(s, "%, ").concat(v, "%)") : "hsva(".concat(h, ", ").concat(s, "%, ").concat(v, "%, ").concat(this.roundA, ")");
  };
  TinyColor2.prototype.toHsl = function() {
    var hsl = rgbToHsl(this.r, this.g, this.b);
    return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
  };
  TinyColor2.prototype.toHslString = function() {
    var hsl = rgbToHsl(this.r, this.g, this.b);
    var h = Math.round(hsl.h * 360);
    var s = Math.round(hsl.s * 100);
    var l = Math.round(hsl.l * 100);
    return this.a === 1 ? "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)") : "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(this.roundA, ")");
  };
  TinyColor2.prototype.toHex = function(allow3Char) {
    if (allow3Char === void 0) {
      allow3Char = false;
    }
    return rgbToHex(this.r, this.g, this.b, allow3Char);
  };
  TinyColor2.prototype.toHexString = function(allow3Char) {
    if (allow3Char === void 0) {
      allow3Char = false;
    }
    return "#" + this.toHex(allow3Char);
  };
  TinyColor2.prototype.toHex8 = function(allow4Char) {
    if (allow4Char === void 0) {
      allow4Char = false;
    }
    return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
  };
  TinyColor2.prototype.toHex8String = function(allow4Char) {
    if (allow4Char === void 0) {
      allow4Char = false;
    }
    return "#" + this.toHex8(allow4Char);
  };
  TinyColor2.prototype.toRgb = function() {
    return {
      r: Math.round(this.r),
      g: Math.round(this.g),
      b: Math.round(this.b),
      a: this.a
    };
  };
  TinyColor2.prototype.toRgbString = function() {
    var r = Math.round(this.r);
    var g = Math.round(this.g);
    var b2 = Math.round(this.b);
    return this.a === 1 ? "rgb(".concat(r, ", ").concat(g, ", ").concat(b2, ")") : "rgba(".concat(r, ", ").concat(g, ", ").concat(b2, ", ").concat(this.roundA, ")");
  };
  TinyColor2.prototype.toPercentageRgb = function() {
    var fmt = function(x) {
      return "".concat(Math.round(bound01(x, 255) * 100), "%");
    };
    return {
      r: fmt(this.r),
      g: fmt(this.g),
      b: fmt(this.b),
      a: this.a
    };
  };
  TinyColor2.prototype.toPercentageRgbString = function() {
    var rnd = function(x) {
      return Math.round(bound01(x, 255) * 100);
    };
    return this.a === 1 ? "rgb(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%)") : "rgba(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%, ").concat(this.roundA, ")");
  };
  TinyColor2.prototype.toName = function() {
    if (this.a === 0) {
      return "transparent";
    }
    if (this.a < 1) {
      return false;
    }
    var hex2 = "#" + rgbToHex(this.r, this.g, this.b, false);
    for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {
      var _b = _a[_i], key = _b[0], value = _b[1];
      if (hex2 === value) {
        return key;
      }
    }
    return false;
  };
  TinyColor2.prototype.toString = function(format2) {
    var formatSet = Boolean(format2);
    format2 = format2 !== null && format2 !== void 0 ? format2 : this.format;
    var formattedString = false;
    var hasAlpha = this.a < 1 && this.a >= 0;
    var needsAlphaFormat = !formatSet && hasAlpha && (format2.startsWith("hex") || format2 === "name");
    if (needsAlphaFormat) {
      if (format2 === "name" && this.a === 0) {
        return this.toName();
      }
      return this.toRgbString();
    }
    if (format2 === "rgb") {
      formattedString = this.toRgbString();
    }
    if (format2 === "prgb") {
      formattedString = this.toPercentageRgbString();
    }
    if (format2 === "hex" || format2 === "hex6") {
      formattedString = this.toHexString();
    }
    if (format2 === "hex3") {
      formattedString = this.toHexString(true);
    }
    if (format2 === "hex4") {
      formattedString = this.toHex8String(true);
    }
    if (format2 === "hex8") {
      formattedString = this.toHex8String();
    }
    if (format2 === "name") {
      formattedString = this.toName();
    }
    if (format2 === "hsl") {
      formattedString = this.toHslString();
    }
    if (format2 === "hsv") {
      formattedString = this.toHsvString();
    }
    return formattedString || this.toHexString();
  };
  TinyColor2.prototype.toNumber = function() {
    return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
  };
  TinyColor2.prototype.clone = function() {
    return new TinyColor2(this.toString());
  };
  TinyColor2.prototype.lighten = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    var hsl = this.toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.brighten = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    var rgb = this.toRgb();
    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
    return new TinyColor2(rgb);
  };
  TinyColor2.prototype.darken = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    var hsl = this.toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.tint = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    return this.mix("white", amount);
  };
  TinyColor2.prototype.shade = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    return this.mix("black", amount);
  };
  TinyColor2.prototype.desaturate = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    var hsl = this.toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.saturate = function(amount) {
    if (amount === void 0) {
      amount = 10;
    }
    var hsl = this.toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.greyscale = function() {
    return this.desaturate(100);
  };
  TinyColor2.prototype.spin = function(amount) {
    var hsl = this.toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.mix = function(color3, amount) {
    if (amount === void 0) {
      amount = 50;
    }
    var rgb1 = this.toRgb();
    var rgb2 = new TinyColor2(color3).toRgb();
    var p = amount / 100;
    var rgba2 = {
      r: (rgb2.r - rgb1.r) * p + rgb1.r,
      g: (rgb2.g - rgb1.g) * p + rgb1.g,
      b: (rgb2.b - rgb1.b) * p + rgb1.b,
      a: (rgb2.a - rgb1.a) * p + rgb1.a
    };
    return new TinyColor2(rgba2);
  };
  TinyColor2.prototype.analogous = function(results2, slices) {
    if (results2 === void 0) {
      results2 = 6;
    }
    if (slices === void 0) {
      slices = 30;
    }
    var hsl = this.toHsl();
    var part = 360 / slices;
    var ret = [this];
    for (hsl.h = (hsl.h - (part * results2 >> 1) + 720) % 360; --results2; ) {
      hsl.h = (hsl.h + part) % 360;
      ret.push(new TinyColor2(hsl));
    }
    return ret;
  };
  TinyColor2.prototype.complement = function() {
    var hsl = this.toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return new TinyColor2(hsl);
  };
  TinyColor2.prototype.monochromatic = function(results2) {
    if (results2 === void 0) {
      results2 = 6;
    }
    var hsv = this.toHsv();
    var h = hsv.h;
    var s = hsv.s;
    var v = hsv.v;
    var res = [];
    var modification = 1 / results2;
    while (results2--) {
      res.push(new TinyColor2({ h, s, v }));
      v = (v + modification) % 1;
    }
    return res;
  };
  TinyColor2.prototype.splitcomplement = function() {
    var hsl = this.toHsl();
    var h = hsl.h;
    return [
      this,
      new TinyColor2({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),
      new TinyColor2({ h: (h + 216) % 360, s: hsl.s, l: hsl.l })
    ];
  };
  TinyColor2.prototype.onBackground = function(background2) {
    var fg = this.toRgb();
    var bg = new TinyColor2(background2).toRgb();
    return new TinyColor2({
      r: bg.r + (fg.r - bg.r) * fg.a,
      g: bg.g + (fg.g - bg.g) * fg.a,
      b: bg.b + (fg.b - bg.b) * fg.a
    });
  };
  TinyColor2.prototype.triad = function() {
    return this.polyad(3);
  };
  TinyColor2.prototype.tetrad = function() {
    return this.polyad(4);
  };
  TinyColor2.prototype.polyad = function(n) {
    var hsl = this.toHsl();
    var h = hsl.h;
    var result = [this];
    var increment = 360 / n;
    for (var i = 1; i < n; i++) {
      result.push(new TinyColor2({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));
    }
    return result;
  };
  TinyColor2.prototype.equals = function(color3) {
    return this.toRgbString() === new TinyColor2(color3).toRgbString();
  };
  return TinyColor2;
}();

// node_modules/@ctrl/tinycolor/dist/module/random.js
function random(options) {
  if (options === void 0) {
    options = {};
  }
  if (options.count !== void 0 && options.count !== null) {
    var totalColors = options.count;
    var colors2 = [];
    options.count = void 0;
    while (totalColors > colors2.length) {
      options.count = null;
      if (options.seed) {
        options.seed += 1;
      }
      colors2.push(random(options));
    }
    options.count = totalColors;
    return colors2;
  }
  var h = pickHue(options.hue, options.seed);
  var s = pickSaturation(h, options);
  var v = pickBrightness(h, s, options);
  var res = { h, s, v };
  if (options.alpha !== void 0) {
    res.a = options.alpha;
  }
  return new TinyColor(res);
}
function pickHue(hue, seed) {
  var hueRange = getHueRange(hue);
  var res = randomWithin(hueRange, seed);
  if (res < 0) {
    res = 360 + res;
  }
  return res;
}
function pickSaturation(hue, options) {
  if (options.hue === "monochrome") {
    return 0;
  }
  if (options.luminosity === "random") {
    return randomWithin([0, 100], options.seed);
  }
  var saturationRange = getColorInfo(hue).saturationRange;
  var sMin = saturationRange[0];
  var sMax = saturationRange[1];
  switch (options.luminosity) {
    case "bright":
      sMin = 55;
      break;
    case "dark":
      sMin = sMax - 10;
      break;
    case "light":
      sMax = 55;
      break;
    default:
      break;
  }
  return randomWithin([sMin, sMax], options.seed);
}
function pickBrightness(H, S, options) {
  var bMin = getMinimumBrightness(H, S);
  var bMax = 100;
  switch (options.luminosity) {
    case "dark":
      bMax = bMin + 20;
      break;
    case "light":
      bMin = (bMax + bMin) / 2;
      break;
    case "random":
      bMin = 0;
      bMax = 100;
      break;
    default:
      break;
  }
  return randomWithin([bMin, bMax], options.seed);
}
function getMinimumBrightness(H, S) {
  var lowerBounds = getColorInfo(H).lowerBounds;
  for (var i = 0; i < lowerBounds.length - 1; i++) {
    var s1 = lowerBounds[i][0];
    var v1 = lowerBounds[i][1];
    var s2 = lowerBounds[i + 1][0];
    var v2 = lowerBounds[i + 1][1];
    if (S >= s1 && S <= s2) {
      var m2 = (v2 - v1) / (s2 - s1);
      var b2 = v1 - m2 * s1;
      return m2 * S + b2;
    }
  }
  return 0;
}
function getHueRange(colorInput) {
  var num = parseInt(colorInput, 10);
  if (!Number.isNaN(num) && num < 360 && num > 0) {
    return [num, num];
  }
  if (typeof colorInput === "string") {
    var namedColor = bounds.find(function(n) {
      return n.name === colorInput;
    });
    if (namedColor) {
      var color3 = defineColor(namedColor);
      if (color3.hueRange) {
        return color3.hueRange;
      }
    }
    var parsed = new TinyColor(colorInput);
    if (parsed.isValid) {
      var hue = parsed.toHsv().h;
      return [hue, hue];
    }
  }
  return [0, 360];
}
function getColorInfo(hue) {
  if (hue >= 334 && hue <= 360) {
    hue -= 360;
  }
  for (var _i = 0, bounds_1 = bounds; _i < bounds_1.length; _i++) {
    var bound = bounds_1[_i];
    var color3 = defineColor(bound);
    if (color3.hueRange && hue >= color3.hueRange[0] && hue <= color3.hueRange[1]) {
      return color3;
    }
  }
  throw Error("Color not found");
}
function randomWithin(range2, seed) {
  if (seed === void 0) {
    return Math.floor(range2[0] + Math.random() * (range2[1] + 1 - range2[0]));
  }
  var max2 = range2[1] || 1;
  var min2 = range2[0] || 0;
  seed = (seed * 9301 + 49297) % 233280;
  var rnd = seed / 233280;
  return Math.floor(min2 + rnd * (max2 - min2));
}
function defineColor(bound) {
  var sMin = bound.lowerBounds[0][0];
  var sMax = bound.lowerBounds[bound.lowerBounds.length - 1][0];
  var bMin = bound.lowerBounds[bound.lowerBounds.length - 1][1];
  var bMax = bound.lowerBounds[0][1];
  return {
    name: bound.name,
    hueRange: bound.hueRange,
    lowerBounds: bound.lowerBounds,
    saturationRange: [sMin, sMax],
    brightnessRange: [bMin, bMax]
  };
}
var bounds = [
  {
    name: "monochrome",
    hueRange: null,
    lowerBounds: [
      [0, 0],
      [100, 0]
    ]
  },
  {
    name: "red",
    hueRange: [-26, 18],
    lowerBounds: [
      [20, 100],
      [30, 92],
      [40, 89],
      [50, 85],
      [60, 78],
      [70, 70],
      [80, 60],
      [90, 55],
      [100, 50]
    ]
  },
  {
    name: "orange",
    hueRange: [19, 46],
    lowerBounds: [
      [20, 100],
      [30, 93],
      [40, 88],
      [50, 86],
      [60, 85],
      [70, 70],
      [100, 70]
    ]
  },
  {
    name: "yellow",
    hueRange: [47, 62],
    lowerBounds: [
      [25, 100],
      [40, 94],
      [50, 89],
      [60, 86],
      [70, 84],
      [80, 82],
      [90, 80],
      [100, 75]
    ]
  },
  {
    name: "green",
    hueRange: [63, 178],
    lowerBounds: [
      [30, 100],
      [40, 90],
      [50, 85],
      [60, 81],
      [70, 74],
      [80, 64],
      [90, 50],
      [100, 40]
    ]
  },
  {
    name: "blue",
    hueRange: [179, 257],
    lowerBounds: [
      [20, 100],
      [30, 86],
      [40, 80],
      [50, 74],
      [60, 60],
      [70, 52],
      [80, 44],
      [90, 39],
      [100, 35]
    ]
  },
  {
    name: "purple",
    hueRange: [258, 282],
    lowerBounds: [
      [20, 100],
      [30, 87],
      [40, 79],
      [50, 70],
      [60, 65],
      [70, 59],
      [80, 52],
      [90, 45],
      [100, 42]
    ]
  },
  {
    name: "pink",
    hueRange: [283, 334],
    lowerBounds: [
      [20, 100],
      [30, 90],
      [40, 86],
      [60, 84],
      [80, 80],
      [90, 75],
      [100, 73]
    ]
  }
];

// node_modules/@chakra-ui/theme-tools/dist/chakra-ui-theme-tools.esm.js
var getColor = function getColor2(theme2, color3, fallback) {
  var hex2 = memoizedGet(theme2, "colors." + color3, color3);
  var _TinyColor = new TinyColor(hex2), isValid = _TinyColor.isValid;
  return isValid ? hex2 : fallback;
};
var tone = function tone2(color3) {
  return function(theme2) {
    var hex2 = getColor(theme2, color3);
    var isDark3 = new TinyColor(hex2).isDark();
    return isDark3 ? "dark" : "light";
  };
};
var isDark = function isDark2(color3) {
  return function(theme2) {
    return tone(color3)(theme2) === "dark";
  };
};
var transparentize = function transparentize2(color3, opacity) {
  return function(theme2) {
    var raw = getColor(theme2, color3);
    return new TinyColor(raw).setAlpha(opacity).toRgbString();
  };
};
function generateStripe(size2, color3) {
  if (size2 === void 0) {
    size2 = "1rem";
  }
  if (color3 === void 0) {
    color3 = "rgba(255, 255, 255, 0.15)";
  }
  return {
    backgroundImage: "linear-gradient(\n    45deg,\n    " + color3 + " 25%,\n    transparent 25%,\n    transparent 50%,\n    " + color3 + " 50%,\n    " + color3 + " 75%,\n    transparent 75%,\n    transparent\n  )",
    backgroundSize: size2 + " " + size2
  };
}
function randomColor(opts) {
  var fallback = random().toHexString();
  if (!opts || isEmptyObject(opts)) {
    return fallback;
  }
  if (opts.string && opts.colors) {
    return randomColorFromList(opts.string, opts.colors);
  }
  if (opts.string && !opts.colors) {
    return randomColorFromString(opts.string);
  }
  if (opts.colors && !opts.string) {
    return randomFromList(opts.colors);
  }
  return fallback;
}
function randomColorFromString(str) {
  var hash3 = 0;
  if (str.length === 0)
    return hash3.toString();
  for (var i = 0; i < str.length; i += 1) {
    hash3 = str.charCodeAt(i) + ((hash3 << 5) - hash3);
    hash3 = hash3 & hash3;
  }
  var color3 = "#";
  for (var j = 0; j < 3; j += 1) {
    var value = hash3 >> j * 8 & 255;
    color3 += ("00" + value.toString(16)).substr(-2);
  }
  return color3;
}
function randomColorFromList(str, list2) {
  var index2 = 0;
  if (str.length === 0)
    return list2[0];
  for (var i = 0; i < str.length; i += 1) {
    index2 = str.charCodeAt(i) + ((index2 << 5) - index2);
    index2 = index2 & index2;
  }
  index2 = (index2 % list2.length + list2.length) % list2.length;
  return list2[index2];
}
function randomFromList(list2) {
  return list2[Math.floor(Math.random() * list2.length)];
}
function mode(light, dark) {
  return function(props) {
    return props.colorMode === "dark" ? dark : light;
  };
}
function orient(options) {
  var orientation = options.orientation, vertical = options.vertical, horizontal = options.horizontal;
  if (!orientation)
    return {};
  return orientation === "vertical" ? vertical : horizontal;
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
var Anatomy = function() {
  function Anatomy2(name) {
    var _this = this;
    this.map = {};
    this.called = false;
    this.assert = function() {
      if (!_this.called) {
        _this.called = true;
        return;
      }
      throw new Error("[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?");
    };
    this.parts = function() {
      _this.assert();
      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
        values[_key] = arguments[_key];
      }
      for (var _i = 0, _values = values; _i < _values.length; _i++) {
        var part = _values[_i];
        _this.map[part] = _this.toPart(part);
      }
      return _this;
    };
    this.extend = function() {
      for (var _len2 = arguments.length, parts = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        parts[_key2] = arguments[_key2];
      }
      for (var _i2 = 0, _parts = parts; _i2 < _parts.length; _i2++) {
        var part = _parts[_i2];
        if (part in _this.map)
          continue;
        _this.map[part] = _this.toPart(part);
      }
      return _this;
    };
    this.toPart = function(part) {
      var el = ["container", "root"].includes(part != null ? part : "") ? [_this.name] : [_this.name, part];
      var attr = el.filter(Boolean).join("__");
      var className = "chakra-" + attr;
      var partObj = {
        className,
        selector: "." + className,
        toString: function toString() {
          return part;
        }
      };
      return partObj;
    };
    this.__type = {};
  }
  _createClass(Anatomy2, [{
    key: "selectors",
    get: function get() {
      var value = fromEntries(Object.entries(this.map).map(function(_ref2) {
        var key = _ref2[0], part = _ref2[1];
        return [key, part.selector];
      }));
      return value;
    }
  }, {
    key: "classNames",
    get: function get() {
      var value = fromEntries(Object.entries(this.map).map(function(_ref2) {
        var key = _ref2[0], part = _ref2[1];
        return [key, part.className];
      }));
      return value;
    }
  }, {
    key: "keys",
    get: function get() {
      return Object.keys(this.map);
    }
  }]);
  return Anatomy2;
}();
function anatomy(name) {
  return new Anatomy(name);
}
function toRef(operand) {
  if (isObject(operand) && operand.reference) {
    return operand.reference;
  }
  return String(operand);
}
var toExpr = function toExpr2(operator) {
  for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    operands[_key - 1] = arguments[_key];
  }
  return operands.map(toRef).join(" " + operator + " ").replace(/calc/g, "");
};
var _add = function add2() {
  for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    operands[_key2] = arguments[_key2];
  }
  return "calc(" + toExpr.apply(void 0, ["+"].concat(operands)) + ")";
};
var _subtract = function subtract() {
  for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    operands[_key3] = arguments[_key3];
  }
  return "calc(" + toExpr.apply(void 0, ["-"].concat(operands)) + ")";
};
var _multiply = function multiply() {
  for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    operands[_key4] = arguments[_key4];
  }
  return "calc(" + toExpr.apply(void 0, ["*"].concat(operands)) + ")";
};
var _divide = function divide() {
  for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    operands[_key5] = arguments[_key5];
  }
  return "calc(" + toExpr.apply(void 0, ["/"].concat(operands)) + ")";
};
var _negate = function negate(x) {
  var value = toRef(x);
  if (value != null && !Number.isNaN(parseFloat(value))) {
    return String(value).startsWith("-") ? String(value).slice(1) : "-" + value;
  }
  return _multiply(value, -1);
};
var calc2 = Object.assign(function(x) {
  return {
    add: function add3() {
      for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        operands[_key6] = arguments[_key6];
      }
      return calc2(_add.apply(void 0, [x].concat(operands)));
    },
    subtract: function subtract2() {
      for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        operands[_key7] = arguments[_key7];
      }
      return calc2(_subtract.apply(void 0, [x].concat(operands)));
    },
    multiply: function multiply2() {
      for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        operands[_key8] = arguments[_key8];
      }
      return calc2(_multiply.apply(void 0, [x].concat(operands)));
    },
    divide: function divide2() {
      for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        operands[_key9] = arguments[_key9];
      }
      return calc2(_divide.apply(void 0, [x].concat(operands)));
    },
    negate: function negate2() {
      return calc2(_negate(x));
    },
    toString: function toString() {
      return x.toString();
    }
  };
}, {
  add: _add,
  subtract: _subtract,
  multiply: _multiply,
  divide: _divide,
  negate: _negate
});
function isDecimal(value) {
  return !Number.isInteger(parseFloat(value.toString()));
}
function replaceWhiteSpace(value, replaceValue) {
  if (replaceValue === void 0) {
    replaceValue = "-";
  }
  return value.replace(/\s+/g, replaceValue);
}
function escape(value) {
  var valueStr = replaceWhiteSpace(value.toString());
  if (valueStr.includes("\\."))
    return value;
  return isDecimal(value) ? valueStr.replace(".", "\\.") : value;
}
function addPrefix2(value, prefix) {
  if (prefix === void 0) {
    prefix = "";
  }
  return [prefix, escape(value)].filter(Boolean).join("-");
}
function toVarRef(name, fallback) {
  return "var(" + escape(name) + (fallback ? ", " + fallback : "") + ")";
}
function toVar(value, prefix) {
  if (prefix === void 0) {
    prefix = "";
  }
  return "--" + addPrefix2(value, prefix);
}
function cssVar2(name, options) {
  var cssVariable = toVar(name, options == null ? void 0 : options.prefix);
  return {
    variable: cssVariable,
    reference: toVarRef(cssVariable, getFallback(options == null ? void 0 : options.fallback))
  };
}
function getFallback(fallback) {
  if (typeof fallback === "string")
    return fallback;
  return fallback == null ? void 0 : fallback.reference;
}

// node_modules/@chakra-ui/anatomy/dist/chakra-ui-anatomy.esm.js
var accordionAnatomy = anatomy("accordion").parts("root", "container", "button", "panel").extend("icon");
var alertAnatomy = anatomy("alert").parts("title", "description", "container").extend("icon", "spinner");
var avatarAnatomy = anatomy("avatar").parts("label", "badge", "container").extend("excessLabel", "group");
var breadcrumbAnatomy = anatomy("breadcrumb").parts("link", "item", "container").extend("separator");
var buttonAnatomy = anatomy("button").parts();
var checkboxAnatomy = anatomy("checkbox").parts("control", "icon", "container").extend("label");
var circularProgressAnatomy = anatomy("progress").parts("track", "filledTrack").extend("label");
var drawerAnatomy = anatomy("drawer").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var editableAnatomy = anatomy("editable").parts("preview", "input", "textarea");
var formAnatomy = anatomy("form").parts("container", "requiredIndicator", "helperText");
var formErrorAnatomy = anatomy("formError").parts("text", "icon");
var inputAnatomy = anatomy("input").parts("addon", "field", "element");
var listAnatomy = anatomy("list").parts("container", "item", "icon");
var menuAnatomy = anatomy("menu").parts("button", "list", "item").extend("groupTitle", "command", "divider");
var modalAnatomy = anatomy("modal").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var numberInputAnatomy = anatomy("numberinput").parts("root", "field", "stepperGroup", "stepper");
var pinInputAnatomy = anatomy("pininput").parts("field");
var popoverAnatomy = anatomy("popover").parts("content", "header", "body", "footer").extend("popper", "arrow", "closeButton");
var progressAnatomy = anatomy("progress").parts("label", "filledTrack", "track");
var radioAnatomy = anatomy("radio").parts("container", "control", "label");
var selectAnatomy = anatomy("select").parts("field", "icon");
var sliderAnatomy = anatomy("slider").parts("container", "track", "thumb", "filledTrack");
var statAnatomy = anatomy("stat").parts("container", "label", "helpText", "number", "icon");
var switchAnatomy = anatomy("switch").parts("container", "track", "thumb");
var tableAnatomy = anatomy("table").parts("table", "thead", "tbody", "tr", "th", "td", "tfoot", "caption");
var tabsAnatomy = anatomy("tabs").parts("root", "tab", "tablist", "tabpanel", "tabpanels", "indicator");
var tagAnatomy = anatomy("tag").parts("container", "label", "closeButton");

// node_modules/@chakra-ui/theme/foundations/typography/dist/chakra-ui-theme-foundations-typography.esm.js
var typography2 = {
  letterSpacings: {
    tighter: "-0.05em",
    tight: "-0.025em",
    normal: "0",
    wide: "0.025em",
    wider: "0.05em",
    widest: "0.1em"
  },
  lineHeights: {
    normal: "normal",
    none: 1,
    shorter: 1.25,
    "short": 1.375,
    base: 1.5,
    tall: 1.625,
    taller: "2",
    "3": ".75rem",
    "4": "1rem",
    "5": "1.25rem",
    "6": "1.5rem",
    "7": "1.75rem",
    "8": "2rem",
    "9": "2.25rem",
    "10": "2.5rem"
  },
  fontWeights: {
    hairline: 100,
    thin: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  },
  fonts: {
    heading: '-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: 'SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace'
  },
  fontSizes: {
    xs: "0.75rem",
    sm: "0.875rem",
    md: "1rem",
    lg: "1.125rem",
    xl: "1.25rem",
    "2xl": "1.5rem",
    "3xl": "1.875rem",
    "4xl": "2.25rem",
    "5xl": "3rem",
    "6xl": "3.75rem",
    "7xl": "4.5rem",
    "8xl": "6rem",
    "9xl": "8rem"
  }
};

// node_modules/@chakra-ui/theme/components/dist/chakra-ui-theme-components.esm.js
var baseStyleContainer$4 = {
  borderTopWidth: "1px",
  borderColor: "inherit",
  _last: {
    borderBottomWidth: "1px"
  }
};
var baseStyleButton$1 = {
  transitionProperty: "common",
  transitionDuration: "normal",
  fontSize: "1rem",
  _focusVisible: {
    boxShadow: "outline"
  },
  _hover: {
    bg: "blackAlpha.50"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  px: 4,
  py: 2
};
var baseStylePanel = {
  pt: 2,
  px: 4,
  pb: 5
};
var baseStyleIcon$5 = {
  fontSize: "1.25em"
};
var baseStyle$D = {
  root: {},
  container: baseStyleContainer$4,
  button: baseStyleButton$1,
  panel: baseStylePanel,
  icon: baseStyleIcon$5
};
var Accordion = {
  parts: accordionAnatomy.keys,
  baseStyle: baseStyle$D
};
var baseStyle$C = {
  container: {
    px: 4,
    py: 3
  },
  title: {
    fontWeight: "bold",
    lineHeight: 6,
    marginEnd: 2
  },
  description: {
    lineHeight: 6
  },
  icon: {
    flexShrink: 0,
    marginEnd: 3,
    w: 5,
    h: 6
  },
  spinner: {
    flexShrink: 0,
    marginEnd: 3,
    w: 5,
    h: 5
  }
};
function getBg(props) {
  var theme2 = props.theme, c2 = props.colorScheme;
  var lightBg = getColor(theme2, c2 + ".100", c2);
  var darkBg = transparentize(c2 + ".200", 0.16)(theme2);
  return mode(lightBg, darkBg)(props);
}
var variantSubtle$1 = function variantSubtle(props) {
  var c2 = props.colorScheme;
  return {
    container: {
      bg: getBg(props)
    },
    icon: {
      color: mode(c2 + ".500", c2 + ".200")(props)
    },
    spinner: {
      color: mode(c2 + ".500", c2 + ".200")(props)
    }
  };
};
var variantLeftAccent = function variantLeftAccent2(props) {
  var c2 = props.colorScheme;
  return {
    container: {
      paddingStart: 3,
      borderStartWidth: "4px",
      borderStartColor: mode(c2 + ".500", c2 + ".200")(props),
      bg: getBg(props)
    },
    icon: {
      color: mode(c2 + ".500", c2 + ".200")(props)
    },
    spinner: {
      color: mode(c2 + ".500", c2 + ".200")(props)
    }
  };
};
var variantTopAccent = function variantTopAccent2(props) {
  var c2 = props.colorScheme;
  return {
    container: {
      pt: 2,
      borderTopWidth: "4px",
      borderTopColor: mode(c2 + ".500", c2 + ".200")(props),
      bg: getBg(props)
    },
    icon: {
      color: mode(c2 + ".500", c2 + ".200")(props)
    },
    spinner: {
      color: mode(c2 + ".500", c2 + ".200")(props)
    }
  };
};
var variantSolid$3 = function variantSolid(props) {
  var c2 = props.colorScheme;
  return {
    container: {
      bg: mode(c2 + ".500", c2 + ".200")(props),
      color: mode("white", "gray.900")(props)
    }
  };
};
var variants$b = {
  subtle: variantSubtle$1,
  "left-accent": variantLeftAccent,
  "top-accent": variantTopAccent,
  solid: variantSolid$3
};
var defaultProps$n = {
  variant: "subtle",
  colorScheme: "blue"
};
var Alert = {
  parts: alertAnatomy.keys,
  baseStyle: baseStyle$C,
  variants: variants$b,
  defaultProps: defaultProps$n
};
var baseStyleBadge = function baseStyleBadge2(props) {
  return {
    transform: "translate(25%, 25%)",
    borderRadius: "full",
    border: "0.2em solid",
    borderColor: mode("white", "gray.800")(props)
  };
};
var baseStyleExcessLabel = function baseStyleExcessLabel2(props) {
  return {
    bg: mode("gray.200", "whiteAlpha.400")(props)
  };
};
var baseStyleContainer$3 = function baseStyleContainer(props) {
  var name = props.name, theme2 = props.theme;
  var bg = name ? randomColor({
    string: name
  }) : "gray.400";
  var isBgDark = isDark(bg)(theme2);
  var color3 = "white";
  if (!isBgDark)
    color3 = "gray.800";
  var borderColor = mode("white", "gray.800")(props);
  return {
    bg,
    color: color3,
    borderColor,
    verticalAlign: "top"
  };
};
var baseStyle$B = function baseStyle(props) {
  return {
    badge: baseStyleBadge(props),
    excessLabel: baseStyleExcessLabel(props),
    container: baseStyleContainer$3(props)
  };
};
function getSize$3(size2) {
  var themeSize = size2 !== "100%" ? sizes[size2] : void 0;
  return {
    container: {
      width: size2,
      height: size2,
      fontSize: "calc(" + (themeSize != null ? themeSize : size2) + " / 2.5)"
    },
    excessLabel: {
      width: size2,
      height: size2
    },
    label: {
      fontSize: "calc(" + (themeSize != null ? themeSize : size2) + " / 2.5)",
      lineHeight: size2 !== "100%" ? themeSize != null ? themeSize : size2 : void 0
    }
  };
}
var sizes$k = {
  "2xs": getSize$3(4),
  xs: getSize$3(6),
  sm: getSize$3(8),
  md: getSize$3(12),
  lg: getSize$3(16),
  xl: getSize$3(24),
  "2xl": getSize$3(32),
  full: getSize$3("100%")
};
var defaultProps$m = {
  size: "md"
};
var Avatar = {
  parts: avatarAnatomy.keys,
  baseStyle: baseStyle$B,
  sizes: sizes$k,
  defaultProps: defaultProps$m
};
var baseStyle$A = {
  px: 1,
  textTransform: "uppercase",
  fontSize: "xs",
  borderRadius: "sm",
  fontWeight: "bold"
};
var variantSolid$2 = function variantSolid2(props) {
  var c2 = props.colorScheme, theme2 = props.theme;
  var dark = transparentize(c2 + ".500", 0.6)(theme2);
  return {
    bg: mode(c2 + ".500", dark)(props),
    color: mode("white", "whiteAlpha.800")(props)
  };
};
var variantSubtle2 = function variantSubtle3(props) {
  var c2 = props.colorScheme, theme2 = props.theme;
  var darkBg = transparentize(c2 + ".200", 0.16)(theme2);
  return {
    bg: mode(c2 + ".100", darkBg)(props),
    color: mode(c2 + ".800", c2 + ".200")(props)
  };
};
var variantOutline$2 = function variantOutline(props) {
  var c2 = props.colorScheme, theme2 = props.theme;
  var darkColor = transparentize(c2 + ".200", 0.8)(theme2);
  var lightColor = getColor(theme2, c2 + ".500");
  var color3 = mode(lightColor, darkColor)(props);
  return {
    color: color3,
    boxShadow: "inset 0 0 0px 1px " + color3
  };
};
var variants$a = {
  solid: variantSolid$2,
  subtle: variantSubtle2,
  outline: variantOutline$2
};
var defaultProps$l = {
  variant: "subtle",
  colorScheme: "gray"
};
var Badge = {
  baseStyle: baseStyle$A,
  variants: variants$a,
  defaultProps: defaultProps$l
};
var baseStyleLink = {
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  cursor: "pointer",
  textDecoration: "none",
  outline: "none",
  color: "inherit",
  _hover: {
    textDecoration: "underline"
  },
  _focusVisible: {
    boxShadow: "outline"
  }
};
var baseStyle$z = {
  link: baseStyleLink
};
var Breadcrumb = {
  parts: breadcrumbAnatomy.keys,
  baseStyle: baseStyle$z
};
var baseStyle$y = {
  lineHeight: "1.2",
  borderRadius: "md",
  fontWeight: "semibold",
  transitionProperty: "common",
  transitionDuration: "normal",
  _focusVisible: {
    boxShadow: "outline"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    _disabled: {
      bg: "initial"
    }
  }
};
var variantGhost = function variantGhost2(props) {
  var c2 = props.colorScheme, theme2 = props.theme;
  if (c2 === "gray") {
    return {
      color: mode("inherit", "whiteAlpha.900")(props),
      _hover: {
        bg: mode("gray.100", "whiteAlpha.200")(props)
      },
      _active: {
        bg: mode("gray.200", "whiteAlpha.300")(props)
      }
    };
  }
  var darkHoverBg = transparentize(c2 + ".200", 0.12)(theme2);
  var darkActiveBg = transparentize(c2 + ".200", 0.24)(theme2);
  return {
    color: mode(c2 + ".600", c2 + ".200")(props),
    bg: "transparent",
    _hover: {
      bg: mode(c2 + ".50", darkHoverBg)(props)
    },
    _active: {
      bg: mode(c2 + ".100", darkActiveBg)(props)
    }
  };
};
var variantOutline$1 = function variantOutline2(props) {
  var c2 = props.colorScheme;
  var borderColor = mode("gray.200", "whiteAlpha.300")(props);
  return _extends3({
    border: "1px solid",
    borderColor: c2 === "gray" ? borderColor : "currentColor",
    ".chakra-button__group[data-attached] > &:not(:last-of-type)": {
      marginEnd: "-1px"
    }
  }, variantGhost(props));
};
var accessibleColorMap = {
  yellow: {
    bg: "yellow.400",
    color: "black",
    hoverBg: "yellow.500",
    activeBg: "yellow.600"
  },
  cyan: {
    bg: "cyan.400",
    color: "black",
    hoverBg: "cyan.500",
    activeBg: "cyan.600"
  }
};
var variantSolid$1 = function variantSolid3(props) {
  var _accessibleColorMap$c;
  var c2 = props.colorScheme;
  if (c2 === "gray") {
    var _bg = mode("gray.100", "whiteAlpha.200")(props);
    return {
      bg: _bg,
      _hover: {
        bg: mode("gray.200", "whiteAlpha.300")(props),
        _disabled: {
          bg: _bg
        }
      },
      _active: {
        bg: mode("gray.300", "whiteAlpha.400")(props)
      }
    };
  }
  var _ref2 = (_accessibleColorMap$c = accessibleColorMap[c2]) != null ? _accessibleColorMap$c : {}, _ref$bg = _ref2.bg, bg = _ref$bg === void 0 ? c2 + ".500" : _ref$bg, _ref$color = _ref2.color, color3 = _ref$color === void 0 ? "white" : _ref$color, _ref$hoverBg = _ref2.hoverBg, hoverBg = _ref$hoverBg === void 0 ? c2 + ".600" : _ref$hoverBg, _ref$activeBg = _ref2.activeBg, activeBg = _ref$activeBg === void 0 ? c2 + ".700" : _ref$activeBg;
  var background2 = mode(bg, c2 + ".200")(props);
  return {
    bg: background2,
    color: mode(color3, "gray.800")(props),
    _hover: {
      bg: mode(hoverBg, c2 + ".300")(props),
      _disabled: {
        bg: background2
      }
    },
    _active: {
      bg: mode(activeBg, c2 + ".400")(props)
    }
  };
};
var variantLink = function variantLink2(props) {
  var c2 = props.colorScheme;
  return {
    padding: 0,
    height: "auto",
    lineHeight: "normal",
    verticalAlign: "baseline",
    color: mode(c2 + ".500", c2 + ".200")(props),
    _hover: {
      textDecoration: "underline",
      _disabled: {
        textDecoration: "none"
      }
    },
    _active: {
      color: mode(c2 + ".700", c2 + ".500")(props)
    }
  };
};
var variantUnstyled$2 = {
  bg: "none",
  color: "inherit",
  display: "inline",
  lineHeight: "inherit",
  m: 0,
  p: 0
};
var variants$9 = {
  ghost: variantGhost,
  outline: variantOutline$1,
  solid: variantSolid$1,
  link: variantLink,
  unstyled: variantUnstyled$2
};
var sizes$j = {
  lg: {
    h: 12,
    minW: 12,
    fontSize: "lg",
    px: 6
  },
  md: {
    h: 10,
    minW: 10,
    fontSize: "md",
    px: 4
  },
  sm: {
    h: 8,
    minW: 8,
    fontSize: "sm",
    px: 3
  },
  xs: {
    h: 6,
    minW: 6,
    fontSize: "xs",
    px: 2
  }
};
var defaultProps$k = {
  variant: "solid",
  size: "md",
  colorScheme: "gray"
};
var Button = {
  baseStyle: baseStyle$y,
  variants: variants$9,
  sizes: sizes$j,
  defaultProps: defaultProps$k
};
var baseStyleControl$1 = function baseStyleControl(props) {
  var c2 = props.colorScheme;
  return {
    w: "100%",
    transitionProperty: "box-shadow",
    transitionDuration: "normal",
    border: "2px solid",
    borderRadius: "sm",
    borderColor: "inherit",
    color: "white",
    _checked: {
      bg: mode(c2 + ".500", c2 + ".200")(props),
      borderColor: mode(c2 + ".500", c2 + ".200")(props),
      color: mode("white", "gray.900")(props),
      _hover: {
        bg: mode(c2 + ".600", c2 + ".300")(props),
        borderColor: mode(c2 + ".600", c2 + ".300")(props)
      },
      _disabled: {
        borderColor: mode("gray.200", "transparent")(props),
        bg: mode("gray.200", "whiteAlpha.300")(props),
        color: mode("gray.500", "whiteAlpha.500")(props)
      }
    },
    _indeterminate: {
      bg: mode(c2 + ".500", c2 + ".200")(props),
      borderColor: mode(c2 + ".500", c2 + ".200")(props),
      color: mode("white", "gray.900")(props)
    },
    _disabled: {
      bg: mode("gray.100", "whiteAlpha.100")(props),
      borderColor: mode("gray.100", "transparent")(props)
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    _invalid: {
      borderColor: mode("red.500", "red.300")(props)
    }
  };
};
var baseStyleContainer$2 = {
  _disabled: {
    cursor: "not-allowed"
  }
};
var baseStyleLabel$3 = {
  userSelect: "none",
  _disabled: {
    opacity: 0.4
  }
};
var baseStyleIcon$4 = {
  transitionProperty: "transform",
  transitionDuration: "normal"
};
var baseStyle$x = function baseStyle2(props) {
  return {
    icon: baseStyleIcon$4,
    container: baseStyleContainer$2,
    control: baseStyleControl$1(props),
    label: baseStyleLabel$3
  };
};
var sizes$i = {
  sm: {
    control: {
      h: 3,
      w: 3
    },
    label: {
      fontSize: "sm"
    },
    icon: {
      fontSize: "0.45rem"
    }
  },
  md: {
    control: {
      w: 4,
      h: 4
    },
    label: {
      fontSize: "md"
    },
    icon: {
      fontSize: "0.625rem"
    }
  },
  lg: {
    control: {
      w: 5,
      h: 5
    },
    label: {
      fontSize: "lg"
    },
    icon: {
      fontSize: "0.625rem"
    }
  }
};
var defaultProps$j = {
  size: "md",
  colorScheme: "blue"
};
var Checkbox = {
  parts: checkboxAnatomy.keys,
  baseStyle: baseStyle$x,
  sizes: sizes$i,
  defaultProps: defaultProps$j
};
var _lg$1;
var _md$1;
var _sm$1;
var $size$1 = cssVar2("close-button-size");
var baseStyle$w = function baseStyle3(props) {
  var hoverBg = mode("blackAlpha.100", "whiteAlpha.100")(props);
  var activeBg = mode("blackAlpha.200", "whiteAlpha.200")(props);
  return {
    w: [$size$1.reference],
    h: [$size$1.reference],
    borderRadius: "md",
    transitionProperty: "common",
    transitionDuration: "normal",
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed",
      boxShadow: "none"
    },
    _hover: {
      bg: hoverBg
    },
    _active: {
      bg: activeBg
    },
    _focusVisible: {
      boxShadow: "outline"
    }
  };
};
var sizes$h = {
  lg: (_lg$1 = {}, _lg$1[$size$1.variable] = "40px", _lg$1.fontSize = "16px", _lg$1),
  md: (_md$1 = {}, _md$1[$size$1.variable] = "32px", _md$1.fontSize = "12px", _md$1),
  sm: (_sm$1 = {}, _sm$1[$size$1.variable] = "24px", _sm$1.fontSize = "10px", _sm$1)
};
var defaultProps$i = {
  size: "md"
};
var CloseButton = {
  baseStyle: baseStyle$w,
  sizes: sizes$h,
  defaultProps: defaultProps$i
};
var variants$8 = Badge.variants;
var defaultProps$h = Badge.defaultProps;
var baseStyle$v = {
  fontFamily: "mono",
  fontSize: "sm",
  px: "0.2em",
  borderRadius: "sm"
};
var Code = {
  baseStyle: baseStyle$v,
  variants: variants$8,
  defaultProps: defaultProps$h
};
var baseStyle$u = {
  w: "100%",
  mx: "auto",
  maxW: "60ch",
  px: "1rem"
};
var Container3 = {
  baseStyle: baseStyle$u
};
var baseStyle$t = {
  opacity: 0.6,
  borderColor: "inherit"
};
var variantSolid4 = {
  borderStyle: "solid"
};
var variantDashed = {
  borderStyle: "dashed"
};
var variants$7 = {
  solid: variantSolid4,
  dashed: variantDashed
};
var defaultProps$g = {
  variant: "solid"
};
var Divider = {
  baseStyle: baseStyle$t,
  variants: variants$7,
  defaultProps: defaultProps$g
};
function getSize$2(value) {
  if (value === "full") {
    return {
      dialog: {
        maxW: "100vw",
        h: "100vh"
      }
    };
  }
  return {
    dialog: {
      maxW: value
    }
  };
}
var baseStyleOverlay$1 = {
  bg: "blackAlpha.600",
  zIndex: "overlay"
};
var baseStyleDialogContainer$1 = {
  display: "flex",
  zIndex: "modal",
  justifyContent: "center"
};
var baseStyleDialog$1 = function baseStyleDialog(props) {
  var isFullHeight = props.isFullHeight;
  return _extends3({}, isFullHeight && {
    height: "100vh"
  }, {
    zIndex: "modal",
    maxH: "100vh",
    bg: mode("white", "gray.700")(props),
    color: "inherit",
    boxShadow: mode("lg", "dark-lg")(props)
  });
};
var baseStyleHeader$2 = {
  px: 6,
  py: 4,
  fontSize: "xl",
  fontWeight: "semibold"
};
var baseStyleCloseButton$3 = {
  position: "absolute",
  top: 2,
  insetEnd: 3
};
var baseStyleBody$2 = {
  px: 6,
  py: 2,
  flex: 1,
  overflow: "auto"
};
var baseStyleFooter$2 = {
  px: 6,
  py: 4
};
var baseStyle$s = function baseStyle4(props) {
  return {
    overlay: baseStyleOverlay$1,
    dialogContainer: baseStyleDialogContainer$1,
    dialog: baseStyleDialog$1(props),
    header: baseStyleHeader$2,
    closeButton: baseStyleCloseButton$3,
    body: baseStyleBody$2,
    footer: baseStyleFooter$2
  };
};
var sizes$g = {
  xs: getSize$2("xs"),
  sm: getSize$2("md"),
  md: getSize$2("lg"),
  lg: getSize$2("2xl"),
  xl: getSize$2("4xl"),
  full: getSize$2("full")
};
var defaultProps$f = {
  size: "xs"
};
var Drawer = {
  parts: drawerAnatomy.keys,
  baseStyle: baseStyle$s,
  sizes: sizes$g,
  defaultProps: defaultProps$f
};
var baseStylePreview = {
  borderRadius: "md",
  py: "3px",
  transitionProperty: "common",
  transitionDuration: "normal"
};
var baseStyleInput = {
  borderRadius: "md",
  py: "3px",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: {
    boxShadow: "outline"
  },
  _placeholder: {
    opacity: 0.6
  }
};
var baseStyleTextarea = {
  borderRadius: "md",
  py: "3px",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: {
    boxShadow: "outline"
  },
  _placeholder: {
    opacity: 0.6
  }
};
var baseStyle$r = {
  preview: baseStylePreview,
  input: baseStyleInput,
  textarea: baseStyleTextarea
};
var Editable = {
  parts: editableAnatomy.keys,
  baseStyle: baseStyle$r
};
var baseStyleRequiredIndicator = function baseStyleRequiredIndicator2(props) {
  return {
    marginStart: 1,
    color: mode("red.500", "red.300")(props)
  };
};
var baseStyleHelperText = function baseStyleHelperText2(props) {
  return {
    mt: 2,
    color: mode("gray.500", "whiteAlpha.600")(props),
    lineHeight: "normal",
    fontSize: "sm"
  };
};
var baseStyle$q = function baseStyle5(props) {
  return {
    container: {
      width: "100%",
      position: "relative"
    },
    requiredIndicator: baseStyleRequiredIndicator(props),
    helperText: baseStyleHelperText(props)
  };
};
var Form = {
  parts: formAnatomy.keys,
  baseStyle: baseStyle$q
};
var baseStyleText = function baseStyleText2(props) {
  return {
    color: mode("red.500", "red.300")(props),
    mt: 2,
    fontSize: "sm",
    lineHeight: "normal"
  };
};
var baseStyleIcon$3 = function baseStyleIcon(props) {
  return {
    marginEnd: "0.5em",
    color: mode("red.500", "red.300")(props)
  };
};
var baseStyle$p = function baseStyle6(props) {
  return {
    text: baseStyleText(props),
    icon: baseStyleIcon$3(props)
  };
};
var FormError = {
  parts: formErrorAnatomy.keys,
  baseStyle: baseStyle$p
};
var baseStyle$o = {
  fontSize: "md",
  marginEnd: 3,
  mb: 2,
  fontWeight: "medium",
  transitionProperty: "common",
  transitionDuration: "normal",
  opacity: 1,
  _disabled: {
    opacity: 0.4
  }
};
var FormLabel = {
  baseStyle: baseStyle$o
};
var baseStyle$n = {
  fontFamily: "heading",
  fontWeight: "bold"
};
var sizes$f = {
  "4xl": {
    fontSize: ["6xl", null, "7xl"],
    lineHeight: 1
  },
  "3xl": {
    fontSize: ["5xl", null, "6xl"],
    lineHeight: 1
  },
  "2xl": {
    fontSize: ["4xl", null, "5xl"],
    lineHeight: [1.2, null, 1]
  },
  xl: {
    fontSize: ["3xl", null, "4xl"],
    lineHeight: [1.33, null, 1.2]
  },
  lg: {
    fontSize: ["2xl", null, "3xl"],
    lineHeight: [1.33, null, 1.2]
  },
  md: {
    fontSize: "xl",
    lineHeight: 1.2
  },
  sm: {
    fontSize: "md",
    lineHeight: 1.2
  },
  xs: {
    fontSize: "sm",
    lineHeight: 1.2
  }
};
var defaultProps$e = {
  size: "xl"
};
var Heading = {
  baseStyle: baseStyle$n,
  sizes: sizes$f,
  defaultProps: defaultProps$e
};
var baseStyle$m = {
  field: {
    width: "100%",
    minWidth: 0,
    outline: 0,
    position: "relative",
    appearance: "none",
    transitionProperty: "common",
    transitionDuration: "normal"
  }
};
var size = {
  lg: {
    fontSize: "lg",
    px: 4,
    h: 12,
    borderRadius: "md"
  },
  md: {
    fontSize: "md",
    px: 4,
    h: 10,
    borderRadius: "md"
  },
  sm: {
    fontSize: "sm",
    px: 3,
    h: 8,
    borderRadius: "sm"
  },
  xs: {
    fontSize: "xs",
    px: 2,
    h: 6,
    borderRadius: "sm"
  }
};
var sizes$e = {
  lg: {
    field: size.lg,
    addon: size.lg
  },
  md: {
    field: size.md,
    addon: size.md
  },
  sm: {
    field: size.sm,
    addon: size.sm
  },
  xs: {
    field: size.xs,
    addon: size.xs
  }
};
function getDefaults(props) {
  var fc = props.focusBorderColor, ec = props.errorBorderColor;
  return {
    focusBorderColor: fc || mode("blue.500", "blue.300")(props),
    errorBorderColor: ec || mode("red.500", "red.300")(props)
  };
}
var variantOutline3 = function variantOutline4(props) {
  var theme2 = props.theme;
  var _getDefaults = getDefaults(props), fc = _getDefaults.focusBorderColor, ec = _getDefaults.errorBorderColor;
  return {
    field: {
      border: "1px solid",
      borderColor: "inherit",
      bg: "inherit",
      _hover: {
        borderColor: mode("gray.300", "whiteAlpha.400")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      },
      _invalid: {
        borderColor: getColor(theme2, ec),
        boxShadow: "0 0 0 1px " + getColor(theme2, ec)
      },
      _focusVisible: {
        zIndex: 1,
        borderColor: getColor(theme2, fc),
        boxShadow: "0 0 0 1px " + getColor(theme2, fc)
      }
    },
    addon: {
      border: "1px solid",
      borderColor: mode("inherit", "whiteAlpha.50")(props),
      bg: mode("gray.100", "whiteAlpha.300")(props)
    }
  };
};
var variantFilled = function variantFilled2(props) {
  var theme2 = props.theme;
  var _getDefaults2 = getDefaults(props), fc = _getDefaults2.focusBorderColor, ec = _getDefaults2.errorBorderColor;
  return {
    field: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode("gray.100", "whiteAlpha.50")(props),
      _hover: {
        bg: mode("gray.200", "whiteAlpha.100")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      },
      _invalid: {
        borderColor: getColor(theme2, ec)
      },
      _focusVisible: {
        bg: "transparent",
        borderColor: getColor(theme2, fc)
      }
    },
    addon: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode("gray.100", "whiteAlpha.50")(props)
    }
  };
};
var variantFlushed = function variantFlushed2(props) {
  var theme2 = props.theme;
  var _getDefaults3 = getDefaults(props), fc = _getDefaults3.focusBorderColor, ec = _getDefaults3.errorBorderColor;
  return {
    field: {
      borderBottom: "1px solid",
      borderColor: "inherit",
      borderRadius: 0,
      px: 0,
      bg: "transparent",
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme2, ec),
        boxShadow: "0px 1px 0px 0px " + getColor(theme2, ec)
      },
      _focusVisible: {
        borderColor: getColor(theme2, fc),
        boxShadow: "0px 1px 0px 0px " + getColor(theme2, fc)
      }
    },
    addon: {
      borderBottom: "2px solid",
      borderColor: "inherit",
      borderRadius: 0,
      px: 0,
      bg: "transparent"
    }
  };
};
var variantUnstyled$1 = {
  field: {
    bg: "transparent",
    px: 0,
    height: "auto"
  },
  addon: {
    bg: "transparent",
    px: 0,
    height: "auto"
  }
};
var variants$6 = {
  outline: variantOutline3,
  filled: variantFilled,
  flushed: variantFlushed,
  unstyled: variantUnstyled$1
};
var defaultProps$d = {
  size: "md",
  variant: "outline"
};
var Input = {
  parts: inputAnatomy.keys,
  baseStyle: baseStyle$m,
  sizes: sizes$e,
  variants: variants$6,
  defaultProps: defaultProps$d
};
var baseStyle$l = function baseStyle7(props) {
  return {
    bg: mode("gray.100", "whiteAlpha")(props),
    borderRadius: "md",
    borderWidth: "1px",
    borderBottomWidth: "3px",
    fontSize: "0.8em",
    fontWeight: "bold",
    lineHeight: "normal",
    px: "0.4em",
    whiteSpace: "nowrap"
  };
};
var Kbd = {
  baseStyle: baseStyle$l
};
var baseStyle$k = {
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  cursor: "pointer",
  textDecoration: "none",
  outline: "none",
  color: "inherit",
  _hover: {
    textDecoration: "underline"
  },
  _focusVisible: {
    boxShadow: "outline"
  }
};
var Link = {
  baseStyle: baseStyle$k
};
var baseStyleIcon$2 = {
  marginEnd: "0.5rem",
  display: "inline",
  verticalAlign: "text-bottom"
};
var baseStyle$j = {
  container: {},
  item: {},
  icon: baseStyleIcon$2
};
var List = {
  parts: listAnatomy.keys,
  baseStyle: baseStyle$j
};
var baseStyleList = function baseStyleList2(props) {
  return {
    bg: mode("#fff", "gray.700")(props),
    boxShadow: mode("sm", "dark-lg")(props),
    color: "inherit",
    minW: "3xs",
    py: "2",
    zIndex: 1,
    borderRadius: "md",
    borderWidth: "1px"
  };
};
var baseStyleItem = function baseStyleItem2(props) {
  return {
    py: "0.4rem",
    px: "0.8rem",
    transitionProperty: "background",
    transitionDuration: "ultra-fast",
    transitionTimingFunction: "ease-in",
    _focus: {
      bg: mode("gray.100", "whiteAlpha.100")(props)
    },
    _active: {
      bg: mode("gray.200", "whiteAlpha.200")(props)
    },
    _expanded: {
      bg: mode("gray.100", "whiteAlpha.100")(props)
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    }
  };
};
var baseStyleGroupTitle = {
  mx: 4,
  my: 2,
  fontWeight: "semibold",
  fontSize: "sm"
};
var baseStyleCommand = {
  opacity: 0.6
};
var baseStyleDivider = {
  border: 0,
  borderBottom: "1px solid",
  borderColor: "inherit",
  my: "0.5rem",
  opacity: 0.6
};
var baseStyleButton = {
  transitionProperty: "common",
  transitionDuration: "normal"
};
var baseStyle$i = function baseStyle8(props) {
  return {
    button: baseStyleButton,
    list: baseStyleList(props),
    item: baseStyleItem(props),
    groupTitle: baseStyleGroupTitle,
    command: baseStyleCommand,
    divider: baseStyleDivider
  };
};
var Menu = {
  parts: menuAnatomy.keys,
  baseStyle: baseStyle$i
};
var baseStyleOverlay = {
  bg: "blackAlpha.600",
  zIndex: "modal"
};
var baseStyleDialogContainer = function baseStyleDialogContainer2(props) {
  var isCentered = props.isCentered, scrollBehavior = props.scrollBehavior;
  return {
    display: "flex",
    zIndex: "modal",
    justifyContent: "center",
    alignItems: isCentered ? "center" : "flex-start",
    overflow: scrollBehavior === "inside" ? "hidden" : "auto"
  };
};
var baseStyleDialog2 = function baseStyleDialog3(props) {
  var scrollBehavior = props.scrollBehavior;
  return {
    borderRadius: "md",
    bg: mode("white", "gray.700")(props),
    color: "inherit",
    my: "3.75rem",
    zIndex: "modal",
    maxH: scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
    boxShadow: mode("lg", "dark-lg")(props)
  };
};
var baseStyleHeader$1 = {
  px: 6,
  py: 4,
  fontSize: "xl",
  fontWeight: "semibold"
};
var baseStyleCloseButton$2 = {
  position: "absolute",
  top: 2,
  insetEnd: 3
};
var baseStyleBody$1 = function baseStyleBody(props) {
  var scrollBehavior = props.scrollBehavior;
  return {
    px: 6,
    py: 2,
    flex: 1,
    overflow: scrollBehavior === "inside" ? "auto" : void 0
  };
};
var baseStyleFooter$1 = {
  px: 6,
  py: 4
};
var baseStyle$h = function baseStyle9(props) {
  return {
    overlay: baseStyleOverlay,
    dialogContainer: baseStyleDialogContainer(props),
    dialog: baseStyleDialog2(props),
    header: baseStyleHeader$1,
    closeButton: baseStyleCloseButton$2,
    body: baseStyleBody$1(props),
    footer: baseStyleFooter$1
  };
};
function getSize$1(value) {
  if (value === "full") {
    return {
      dialog: {
        maxW: "100vw",
        minH: "100vh",
        "@supports(min-height: -webkit-fill-available)": {
          minH: "-webkit-fill-available"
        },
        my: 0,
        borderRadius: 0
      }
    };
  }
  return {
    dialog: {
      maxW: value
    }
  };
}
var sizes$d = {
  xs: getSize$1("xs"),
  sm: getSize$1("sm"),
  md: getSize$1("md"),
  lg: getSize$1("lg"),
  xl: getSize$1("xl"),
  "2xl": getSize$1("2xl"),
  "3xl": getSize$1("3xl"),
  "4xl": getSize$1("4xl"),
  "5xl": getSize$1("5xl"),
  "6xl": getSize$1("6xl"),
  full: getSize$1("full")
};
var defaultProps$c = {
  size: "md"
};
var Modal = {
  parts: modalAnatomy.keys,
  baseStyle: baseStyle$h,
  sizes: sizes$d,
  defaultProps: defaultProps$c
};
var _baseStyleRoot;
var _Input$baseStyle$fiel;
var _Input$baseStyle;
var variants$5 = Input.variants;
var defaultProps$b = Input.defaultProps;
var $stepperWidth = cssVar2("number-input-stepper-width");
var $inputPadding = cssVar2("number-input-input-padding");
var inputPaddingValue = calc2($stepperWidth).add("0.5rem").toString();
var baseStyleRoot$1 = (_baseStyleRoot = {}, _baseStyleRoot[$stepperWidth.variable] = "24px", _baseStyleRoot[$inputPadding.variable] = inputPaddingValue, _baseStyleRoot);
var baseStyleField$1 = (_Input$baseStyle$fiel = (_Input$baseStyle = Input.baseStyle) == null ? void 0 : _Input$baseStyle.field) != null ? _Input$baseStyle$fiel : {};
var baseStyleStepperGroup = {
  width: [$stepperWidth.reference]
};
var baseStyleStepper = function baseStyleStepper2(props) {
  return {
    borderStart: "1px solid",
    borderStartColor: mode("inherit", "whiteAlpha.300")(props),
    color: mode("inherit", "whiteAlpha.800")(props),
    _active: {
      bg: mode("gray.200", "whiteAlpha.300")(props)
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    }
  };
};
var baseStyle$g = function baseStyle10(props) {
  return {
    root: baseStyleRoot$1,
    field: baseStyleField$1,
    stepperGroup: baseStyleStepperGroup,
    stepper: baseStyleStepper(props)
  };
};
function getSize(size2) {
  var _sizeStyle$field$font, _sizeStyle$field;
  var sizeStyle = Input.sizes[size2];
  var radius = {
    lg: "md",
    md: "md",
    sm: "sm",
    xs: "sm"
  };
  var _fontSize = (_sizeStyle$field$font = (_sizeStyle$field = sizeStyle.field) == null ? void 0 : _sizeStyle$field.fontSize) != null ? _sizeStyle$field$font : "md";
  var fontSize = typography2.fontSizes[_fontSize];
  return {
    field: _extends3({}, sizeStyle.field, {
      paddingInlineEnd: $inputPadding.reference,
      verticalAlign: "top"
    }),
    stepper: {
      fontSize: calc2(fontSize).multiply(0.75).toString(),
      _first: {
        borderTopEndRadius: radius[size2]
      },
      _last: {
        borderBottomEndRadius: radius[size2],
        mt: "-1px",
        borderTopWidth: 1
      }
    }
  };
}
var sizes$c = {
  xs: getSize("xs"),
  sm: getSize("sm"),
  md: getSize("md"),
  lg: getSize("lg")
};
var NumberInput = {
  parts: numberInputAnatomy.keys,
  baseStyle: baseStyle$g,
  sizes: sizes$c,
  variants: variants$5,
  defaultProps: defaultProps$b
};
var _Input$variants$unsty$1;
var baseStyle$f = _extends3({}, Input.baseStyle.field, {
  textAlign: "center"
});
var sizes$b = {
  lg: {
    fontSize: "lg",
    w: 12,
    h: 12,
    borderRadius: "md"
  },
  md: {
    fontSize: "md",
    w: 10,
    h: 10,
    borderRadius: "md"
  },
  sm: {
    fontSize: "sm",
    w: 8,
    h: 8,
    borderRadius: "sm"
  },
  xs: {
    fontSize: "xs",
    w: 6,
    h: 6,
    borderRadius: "sm"
  }
};
var variants$4 = {
  outline: function outline(props) {
    var _Input$variants$outli;
    return (_Input$variants$outli = Input.variants.outline(props).field) != null ? _Input$variants$outli : {};
  },
  flushed: function flushed(props) {
    var _Input$variants$flush;
    return (_Input$variants$flush = Input.variants.flushed(props).field) != null ? _Input$variants$flush : {};
  },
  filled: function filled(props) {
    var _Input$variants$fille;
    return (_Input$variants$fille = Input.variants.filled(props).field) != null ? _Input$variants$fille : {};
  },
  unstyled: (_Input$variants$unsty$1 = Input.variants.unstyled.field) != null ? _Input$variants$unsty$1 : {}
};
var defaultProps$a = Input.defaultProps;
var PinInput = {
  baseStyle: baseStyle$f,
  sizes: sizes$b,
  variants: variants$4,
  defaultProps: defaultProps$a
};
var $popperBg = cssVar2("popper-bg");
var $arrowBg$1 = cssVar2("popper-arrow-bg");
var $arrowShadowColor = cssVar2("popper-arrow-shadow-color");
var baseStylePopper = {
  zIndex: 10
};
var baseStyleContent = function baseStyleContent2(props) {
  var _ref2;
  var bg = mode("white", "gray.700")(props);
  var shadowColor = mode("gray.200", "whiteAlpha.300")(props);
  return _ref2 = {}, _ref2[$popperBg.variable] = "colors." + bg, _ref2.bg = $popperBg.reference, _ref2[$arrowBg$1.variable] = $popperBg.reference, _ref2[$arrowShadowColor.variable] = "colors." + shadowColor, _ref2.width = "xs", _ref2.border = "1px solid", _ref2.borderColor = "inherit", _ref2.borderRadius = "md", _ref2.boxShadow = "sm", _ref2.zIndex = "inherit", _ref2._focusVisible = {
    outline: 0,
    boxShadow: "outline"
  }, _ref2;
};
var baseStyleHeader = {
  px: 3,
  py: 2,
  borderBottomWidth: "1px"
};
var baseStyleBody2 = {
  px: 3,
  py: 2
};
var baseStyleFooter = {
  px: 3,
  py: 2,
  borderTopWidth: "1px"
};
var baseStyleCloseButton$1 = {
  position: "absolute",
  borderRadius: "md",
  top: 1,
  insetEnd: 2,
  padding: 2
};
var baseStyle$e = function baseStyle11(props) {
  return {
    popper: baseStylePopper,
    content: baseStyleContent(props),
    header: baseStyleHeader,
    body: baseStyleBody2,
    footer: baseStyleFooter,
    arrow: {},
    closeButton: baseStyleCloseButton$1
  };
};
var Popover = {
  parts: popoverAnatomy.keys,
  baseStyle: baseStyle$e
};
function filledStyle(props) {
  var c2 = props.colorScheme, t = props.theme, isIndeterminate = props.isIndeterminate, hasStripe = props.hasStripe;
  var stripeStyle = mode(generateStripe(), generateStripe("1rem", "rgba(0,0,0,0.1)"))(props);
  var bgColor = mode(c2 + ".500", c2 + ".200")(props);
  var gradient = "linear-gradient(\n    to right,\n    transparent 0%,\n    " + getColor(t, bgColor) + " 50%,\n    transparent 100%\n  )";
  var addStripe = !isIndeterminate && hasStripe;
  return _extends3({}, addStripe && stripeStyle, isIndeterminate ? {
    bgImage: gradient
  } : {
    bgColor
  });
}
var baseStyleLabel$2 = {
  lineHeight: "1",
  fontSize: "0.25em",
  fontWeight: "bold",
  color: "white"
};
var baseStyleTrack$2 = function baseStyleTrack(props) {
  return {
    bg: mode("gray.100", "whiteAlpha.300")(props)
  };
};
var baseStyleFilledTrack$1 = function baseStyleFilledTrack(props) {
  return _extends3({
    transitionProperty: "common",
    transitionDuration: "slow"
  }, filledStyle(props));
};
var baseStyle$d = function baseStyle12(props) {
  return {
    label: baseStyleLabel$2,
    filledTrack: baseStyleFilledTrack$1(props),
    track: baseStyleTrack$2(props)
  };
};
var sizes$a = {
  xs: {
    track: {
      h: "0.25rem"
    }
  },
  sm: {
    track: {
      h: "0.5rem"
    }
  },
  md: {
    track: {
      h: "0.75rem"
    }
  },
  lg: {
    track: {
      h: "1rem"
    }
  }
};
var defaultProps$9 = {
  size: "md",
  colorScheme: "blue"
};
var Progress = {
  parts: progressAnatomy.keys,
  sizes: sizes$a,
  baseStyle: baseStyle$d,
  defaultProps: defaultProps$9
};
var baseStyleControl2 = function baseStyleControl3(props) {
  var _Checkbox$baseStyle = Checkbox.baseStyle(props), _Checkbox$baseStyle$c = _Checkbox$baseStyle.control, control = _Checkbox$baseStyle$c === void 0 ? {} : _Checkbox$baseStyle$c;
  return _extends3({}, control, {
    borderRadius: "full",
    _checked: _extends3({}, control["_checked"], {
      _before: {
        content: '""',
        display: "inline-block",
        pos: "relative",
        w: "50%",
        h: "50%",
        borderRadius: "50%",
        bg: "currentColor"
      }
    })
  });
};
var baseStyle$c = function baseStyle13(props) {
  return {
    label: Checkbox.baseStyle(props).label,
    container: Checkbox.baseStyle(props).container,
    control: baseStyleControl2(props)
  };
};
var sizes$9 = {
  md: {
    control: {
      w: 4,
      h: 4
    },
    label: {
      fontSize: "md"
    }
  },
  lg: {
    control: {
      w: 5,
      h: 5
    },
    label: {
      fontSize: "lg"
    }
  },
  sm: {
    control: {
      width: 3,
      height: 3
    },
    label: {
      fontSize: "sm"
    }
  }
};
var defaultProps$8 = {
  size: "md",
  colorScheme: "blue"
};
var Radio = {
  parts: radioAnatomy.keys,
  baseStyle: baseStyle$c,
  sizes: sizes$9,
  defaultProps: defaultProps$8
};
var baseStyleField = function baseStyleField2(props) {
  return _extends3({}, Input.baseStyle.field, {
    bg: mode("white", "gray.700")(props),
    appearance: "none",
    paddingBottom: "1px",
    lineHeight: "normal",
    "> option, > optgroup": {
      bg: mode("white", "gray.700")(props)
    }
  });
};
var baseStyleIcon$1 = {
  width: "1.5rem",
  height: "100%",
  insetEnd: "0.5rem",
  position: "relative",
  color: "currentColor",
  fontSize: "1.25rem",
  _disabled: {
    opacity: 0.5
  }
};
var baseStyle$b = function baseStyle14(props) {
  return {
    field: baseStyleField(props),
    icon: baseStyleIcon$1
  };
};
var iconSpacing = {
  paddingInlineEnd: "2rem"
};
var sizes$8 = (0, import_lodash.default)({}, Input.sizes, {
  lg: {
    field: iconSpacing
  },
  md: {
    field: iconSpacing
  },
  sm: {
    field: iconSpacing
  },
  xs: {
    field: iconSpacing,
    icon: {
      insetEnd: "0.25rem"
    }
  }
});
var Select = {
  parts: selectAnatomy.keys,
  baseStyle: baseStyle$b,
  sizes: sizes$8,
  variants: Input.variants,
  defaultProps: Input.defaultProps
};
var fade = function fade2(startColor, endColor) {
  return keyframes({
    from: {
      borderColor: startColor,
      background: startColor
    },
    to: {
      borderColor: endColor,
      background: endColor
    }
  });
};
var baseStyle$a = function baseStyle15(props) {
  var defaultStartColor = mode("gray.100", "gray.800")(props);
  var defaultEndColor = mode("gray.400", "gray.600")(props);
  var _props$startColor = props.startColor, startColor = _props$startColor === void 0 ? defaultStartColor : _props$startColor, _props$endColor = props.endColor, endColor = _props$endColor === void 0 ? defaultEndColor : _props$endColor, speed = props.speed, theme2 = props.theme;
  var start2 = getColor(theme2, startColor);
  var end2 = getColor(theme2, endColor);
  return {
    opacity: 0.7,
    borderRadius: "2px",
    borderColor: start2,
    background: end2,
    animation: speed + "s linear infinite alternate " + fade(start2, end2)
  };
};
var Skeleton = {
  baseStyle: baseStyle$a
};
var baseStyle$9 = function baseStyle16(props) {
  return {
    borderRadius: "md",
    fontWeight: "semibold",
    _focusVisible: {
      boxShadow: "outline",
      padding: "1rem",
      position: "fixed",
      top: "1.5rem",
      insetStart: "1.5rem",
      bg: mode("white", "gray.700")(props)
    }
  };
};
var SkipLink = {
  baseStyle: baseStyle$9
};
function thumbOrientation(props) {
  return orient({
    orientation: props.orientation,
    vertical: {
      left: "50%",
      transform: "translateX(-50%)",
      _active: {
        transform: "translateX(-50%) scale(1.15)"
      }
    },
    horizontal: {
      top: "50%",
      transform: "translateY(-50%)",
      _active: {
        transform: "translateY(-50%) scale(1.15)"
      }
    }
  });
}
var baseStyleContainer$1 = function baseStyleContainer2(props) {
  var orientation = props.orientation;
  return _extends3({
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    _disabled: {
      opacity: 0.6,
      cursor: "default",
      pointerEvents: "none"
    }
  }, orient({
    orientation,
    vertical: {
      h: "100%"
    },
    horizontal: {
      w: "100%"
    }
  }));
};
var baseStyleTrack$1 = function baseStyleTrack2(props) {
  return {
    overflow: "hidden",
    borderRadius: "sm",
    bg: mode("gray.200", "whiteAlpha.200")(props),
    _disabled: {
      bg: mode("gray.300", "whiteAlpha.300")(props)
    }
  };
};
var baseStyleThumb$1 = function baseStyleThumb(props) {
  return _extends3({
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    outline: 0,
    zIndex: 1,
    borderRadius: "full",
    bg: "white",
    boxShadow: "base",
    border: "1px solid",
    borderColor: "transparent",
    transitionProperty: "transform",
    transitionDuration: "normal",
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      bg: "gray.300"
    }
  }, thumbOrientation(props));
};
var baseStyleFilledTrack2 = function baseStyleFilledTrack3(props) {
  var c2 = props.colorScheme;
  return {
    width: "inherit",
    height: "inherit",
    bg: mode(c2 + ".500", c2 + ".200")(props)
  };
};
var baseStyle$8 = function baseStyle17(props) {
  return {
    container: baseStyleContainer$1(props),
    track: baseStyleTrack$1(props),
    thumb: baseStyleThumb$1(props),
    filledTrack: baseStyleFilledTrack2(props)
  };
};
var sizeLg = function sizeLg2(props) {
  return {
    thumb: {
      w: "16px",
      h: "16px"
    },
    track: orient({
      orientation: props.orientation,
      horizontal: {
        h: "4px"
      },
      vertical: {
        w: "4px"
      }
    })
  };
};
var sizeMd = function sizeMd2(props) {
  return {
    thumb: {
      w: "14px",
      h: "14px"
    },
    track: orient({
      orientation: props.orientation,
      horizontal: {
        h: "4px"
      },
      vertical: {
        w: "4px"
      }
    })
  };
};
var sizeSm = function sizeSm2(props) {
  return {
    thumb: {
      w: "10px",
      h: "10px"
    },
    track: orient({
      orientation: props.orientation,
      horizontal: {
        h: "2px"
      },
      vertical: {
        w: "2px"
      }
    })
  };
};
var sizes$7 = {
  lg: sizeLg,
  md: sizeMd,
  sm: sizeSm
};
var defaultProps$7 = {
  size: "md",
  colorScheme: "blue"
};
var Slider = {
  parts: sliderAnatomy.keys,
  sizes: sizes$7,
  baseStyle: baseStyle$8,
  defaultProps: defaultProps$7
};
var _xs;
var _sm;
var _md;
var _lg;
var _xl;
var $size = cssVar2("spinner-size");
var baseStyle$7 = {
  width: [$size.reference],
  height: [$size.reference]
};
var sizes$6 = {
  xs: (_xs = {}, _xs[$size.variable] = "0.75rem", _xs),
  sm: (_sm = {}, _sm[$size.variable] = "1rem", _sm),
  md: (_md = {}, _md[$size.variable] = "1.5rem", _md),
  lg: (_lg = {}, _lg[$size.variable] = "2rem", _lg),
  xl: (_xl = {}, _xl[$size.variable] = "3rem", _xl)
};
var defaultProps$6 = {
  size: "md"
};
var Spinner = {
  baseStyle: baseStyle$7,
  sizes: sizes$6,
  defaultProps: defaultProps$6
};
var baseStyleLabel$1 = {
  fontWeight: "medium"
};
var baseStyleHelpText = {
  opacity: 0.8,
  marginBottom: 2
};
var baseStyleNumber = {
  verticalAlign: "baseline",
  fontWeight: "semibold"
};
var baseStyleIcon2 = {
  marginEnd: 1,
  w: "14px",
  h: "14px",
  verticalAlign: "middle"
};
var baseStyle$6 = {
  container: {},
  label: baseStyleLabel$1,
  helpText: baseStyleHelpText,
  number: baseStyleNumber,
  icon: baseStyleIcon2
};
var sizes$5 = {
  md: {
    label: {
      fontSize: "sm"
    },
    helpText: {
      fontSize: "sm"
    },
    number: {
      fontSize: "2xl"
    }
  }
};
var defaultProps$5 = {
  size: "md"
};
var Stat = {
  parts: statAnatomy.keys,
  baseStyle: baseStyle$6,
  sizes: sizes$5,
  defaultProps: defaultProps$5
};
var _container2;
var _container3;
var _container4;
var $width = cssVar2("switch-track-width");
var $height = cssVar2("switch-track-height");
var $diff = cssVar2("switch-track-diff");
var diffValue = calc2.subtract($width, $height);
var $translateX = cssVar2("switch-thumb-x");
var baseStyleTrack3 = function baseStyleTrack4(props) {
  var c2 = props.colorScheme;
  return {
    borderRadius: "full",
    p: "2px",
    width: [$width.reference],
    height: [$height.reference],
    transitionProperty: "common",
    transitionDuration: "fast",
    bg: mode("gray.300", "whiteAlpha.400")(props),
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    },
    _checked: {
      bg: mode(c2 + ".500", c2 + ".200")(props)
    }
  };
};
var baseStyleThumb2 = {
  bg: "white",
  transitionProperty: "transform",
  transitionDuration: "normal",
  borderRadius: "inherit",
  width: [$height.reference],
  height: [$height.reference],
  _checked: {
    transform: "translateX(" + $translateX.reference + ")"
  }
};
var baseStyle$5 = function baseStyle18(props) {
  var _rtl, _container;
  return {
    container: (_container = {}, _container[$diff.variable] = diffValue, _container[$translateX.variable] = $diff.reference, _container._rtl = (_rtl = {}, _rtl[$translateX.variable] = calc2($diff).negate().toString(), _rtl), _container),
    track: baseStyleTrack3(props),
    thumb: baseStyleThumb2
  };
};
var sizes$4 = {
  sm: {
    container: (_container2 = {}, _container2[$width.variable] = "1.375rem", _container2[$height.variable] = "0.75rem", _container2)
  },
  md: {
    container: (_container3 = {}, _container3[$width.variable] = "1.875rem", _container3[$height.variable] = "1rem", _container3)
  },
  lg: {
    container: (_container4 = {}, _container4[$width.variable] = "2.875rem", _container4[$height.variable] = "1.5rem", _container4)
  }
};
var defaultProps$4 = {
  size: "md",
  colorScheme: "blue"
};
var Switch = {
  parts: switchAnatomy.keys,
  baseStyle: baseStyle$5,
  sizes: sizes$4,
  defaultProps: defaultProps$4
};
var baseStyle$4 = {
  table: {
    fontVariantNumeric: "lining-nums tabular-nums",
    borderCollapse: "collapse",
    width: "full"
  },
  th: {
    fontFamily: "heading",
    fontWeight: "bold",
    textTransform: "uppercase",
    letterSpacing: "wider",
    textAlign: "start"
  },
  td: {
    textAlign: "start"
  },
  caption: {
    mt: 4,
    fontFamily: "heading",
    textAlign: "center",
    fontWeight: "medium"
  }
};
var numericStyles = {
  "&[data-is-numeric=true]": {
    textAlign: "end"
  }
};
var variantSimple = function variantSimple2(props) {
  var c2 = props.colorScheme;
  return {
    th: _extends3({
      color: mode("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode(c2 + ".100", c2 + ".700")(props)
    }, numericStyles),
    td: _extends3({
      borderBottom: "1px",
      borderColor: mode(c2 + ".100", c2 + ".700")(props)
    }, numericStyles),
    caption: {
      color: mode("gray.600", "gray.100")(props)
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: {
            borderBottomWidth: 0
          }
        }
      }
    }
  };
};
var variantStripe = function variantStripe2(props) {
  var c2 = props.colorScheme;
  return {
    th: _extends3({
      color: mode("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode(c2 + ".100", c2 + ".700")(props)
    }, numericStyles),
    td: _extends3({
      borderBottom: "1px",
      borderColor: mode(c2 + ".100", c2 + ".700")(props)
    }, numericStyles),
    caption: {
      color: mode("gray.600", "gray.100")(props)
    },
    tbody: {
      tr: {
        "&:nth-of-type(odd)": {
          "th, td": {
            borderBottomWidth: "1px",
            borderColor: mode(c2 + ".100", c2 + ".700")(props)
          },
          td: {
            background: mode(c2 + ".100", c2 + ".700")(props)
          }
        }
      }
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: {
            borderBottomWidth: 0
          }
        }
      }
    }
  };
};
var variants$3 = {
  simple: variantSimple,
  striped: variantStripe,
  unstyled: {}
};
var sizes$3 = {
  sm: {
    th: {
      px: "4",
      py: "1",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "4",
      py: "2",
      fontSize: "sm",
      lineHeight: "4"
    },
    caption: {
      px: "4",
      py: "2",
      fontSize: "xs"
    }
  },
  md: {
    th: {
      px: "6",
      py: "3",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "6",
      py: "4",
      lineHeight: "5"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "sm"
    }
  },
  lg: {
    th: {
      px: "8",
      py: "4",
      lineHeight: "5",
      fontSize: "sm"
    },
    td: {
      px: "8",
      py: "5",
      lineHeight: "6"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "md"
    }
  }
};
var defaultProps$3 = {
  variant: "simple",
  size: "md",
  colorScheme: "gray"
};
var Table = {
  parts: tableAnatomy.keys,
  baseStyle: baseStyle$4,
  variants: variants$3,
  sizes: sizes$3,
  defaultProps: defaultProps$3
};
var baseStyleRoot = function baseStyleRoot2(props) {
  var orientation = props.orientation;
  return {
    display: orientation === "vertical" ? "flex" : "block"
  };
};
var baseStyleTab = function baseStyleTab2(props) {
  var isFitted = props.isFitted;
  return {
    flex: isFitted ? 1 : void 0,
    transitionProperty: "common",
    transitionDuration: "normal",
    _focusVisible: {
      zIndex: 1,
      boxShadow: "outline"
    },
    _disabled: {
      cursor: "not-allowed",
      opacity: 0.4
    }
  };
};
var baseStyleTablist = function baseStyleTablist2(props) {
  var _props$align = props.align, align = _props$align === void 0 ? "start" : _props$align, orientation = props.orientation;
  var alignments = {
    end: "flex-end",
    center: "center",
    start: "flex-start"
  };
  return {
    justifyContent: alignments[align],
    flexDirection: orientation === "vertical" ? "column" : "row"
  };
};
var baseStyleTabpanel = {
  p: 4
};
var baseStyle$3 = function baseStyle19(props) {
  return {
    root: baseStyleRoot(props),
    tab: baseStyleTab(props),
    tablist: baseStyleTablist(props),
    tabpanel: baseStyleTabpanel
  };
};
var sizes$2 = {
  sm: {
    tab: {
      py: 1,
      px: 4,
      fontSize: "sm"
    }
  },
  md: {
    tab: {
      fontSize: "md",
      py: 2,
      px: 4
    }
  },
  lg: {
    tab: {
      fontSize: "lg",
      py: 3,
      px: 4
    }
  }
};
var variantLine = function variantLine2(props) {
  var _tablist, _tab;
  var c2 = props.colorScheme, orientation = props.orientation;
  var isVertical = orientation === "vertical";
  var borderProp = orientation === "vertical" ? "borderStart" : "borderBottom";
  var marginProp = isVertical ? "marginStart" : "marginBottom";
  return {
    tablist: (_tablist = {}, _tablist[borderProp] = "2px solid", _tablist.borderColor = "inherit", _tablist),
    tab: (_tab = {}, _tab[borderProp] = "2px solid", _tab.borderColor = "transparent", _tab[marginProp] = "-2px", _tab._selected = {
      color: mode(c2 + ".600", c2 + ".300")(props),
      borderColor: "currentColor"
    }, _tab._active = {
      bg: mode("gray.200", "whiteAlpha.300")(props)
    }, _tab._disabled = {
      _active: {
        bg: "none"
      }
    }, _tab)
  };
};
var variantEnclosed = function variantEnclosed2(props) {
  var c2 = props.colorScheme;
  return {
    tab: {
      borderTopRadius: "md",
      border: "1px solid",
      borderColor: "transparent",
      mb: "-1px",
      _selected: {
        color: mode(c2 + ".600", c2 + ".300")(props),
        borderColor: "inherit",
        borderBottomColor: mode("white", "gray.800")(props)
      }
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
};
var variantEnclosedColored = function variantEnclosedColored2(props) {
  var c2 = props.colorScheme;
  return {
    tab: {
      border: "1px solid",
      borderColor: "inherit",
      bg: mode("gray.50", "whiteAlpha.50")(props),
      mb: "-1px",
      _notLast: {
        marginEnd: "-1px"
      },
      _selected: {
        bg: mode("#fff", "gray.800")(props),
        color: mode(c2 + ".600", c2 + ".300")(props),
        borderColor: "inherit",
        borderTopColor: "currentColor",
        borderBottomColor: "transparent"
      }
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
};
var variantSoftRounded = function variantSoftRounded2(props) {
  var c2 = props.colorScheme, theme2 = props.theme;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      color: "gray.600",
      _selected: {
        color: getColor(theme2, c2 + ".700"),
        bg: getColor(theme2, c2 + ".100")
      }
    }
  };
};
var variantSolidRounded = function variantSolidRounded2(props) {
  var c2 = props.colorScheme;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      color: mode("gray.600", "inherit")(props),
      _selected: {
        color: mode("#fff", "gray.800")(props),
        bg: mode(c2 + ".600", c2 + ".300")(props)
      }
    }
  };
};
var variantUnstyled = {};
var variants$2 = {
  line: variantLine,
  enclosed: variantEnclosed,
  "enclosed-colored": variantEnclosedColored,
  "soft-rounded": variantSoftRounded,
  "solid-rounded": variantSolidRounded,
  unstyled: variantUnstyled
};
var defaultProps$2 = {
  size: "md",
  variant: "line",
  colorScheme: "blue"
};
var Tabs = {
  parts: tabsAnatomy.keys,
  baseStyle: baseStyle$3,
  sizes: sizes$2,
  variants: variants$2,
  defaultProps: defaultProps$2
};
var baseStyleContainer3 = {
  fontWeight: "medium",
  lineHeight: 1.2,
  outline: 0,
  borderRadius: "md",
  _focusVisible: {
    boxShadow: "outline"
  }
};
var baseStyleLabel = {
  lineHeight: 1.2,
  overflow: "visible"
};
var baseStyleCloseButton = {
  fontSize: "18px",
  w: "1.25rem",
  h: "1.25rem",
  transitionProperty: "common",
  transitionDuration: "normal",
  borderRadius: "full",
  marginStart: "0.375rem",
  marginEnd: "-1",
  opacity: 0.5,
  _disabled: {
    opacity: 0.4
  },
  _focusVisible: {
    boxShadow: "outline",
    bg: "rgba(0, 0, 0, 0.14)"
  },
  _hover: {
    opacity: 0.8
  },
  _active: {
    opacity: 1
  }
};
var baseStyle$2 = {
  container: baseStyleContainer3,
  label: baseStyleLabel,
  closeButton: baseStyleCloseButton
};
var sizes$1 = {
  sm: {
    container: {
      minH: "1.25rem",
      minW: "1.25rem",
      fontSize: "xs",
      px: 2
    },
    closeButton: {
      marginEnd: "-2px",
      marginStart: "0.35rem"
    }
  },
  md: {
    container: {
      minH: "1.5rem",
      minW: "1.5rem",
      fontSize: "sm",
      px: 2
    }
  },
  lg: {
    container: {
      minH: 8,
      minW: 8,
      fontSize: "md",
      px: 3
    }
  }
};
var variants$1 = {
  subtle: function subtle(props) {
    return {
      container: Badge.variants.subtle(props)
    };
  },
  solid: function solid(props) {
    return {
      container: Badge.variants.solid(props)
    };
  },
  outline: function outline2(props) {
    return {
      container: Badge.variants.outline(props)
    };
  }
};
var defaultProps$1 = {
  size: "md",
  variant: "subtle",
  colorScheme: "gray"
};
var Tag = {
  parts: tagAnatomy.keys,
  variants: variants$1,
  baseStyle: baseStyle$2,
  sizes: sizes$1,
  defaultProps: defaultProps$1
};
var _Input$variants$unsty;
var _Input$sizes$xs$field;
var _Input$sizes$sm$field;
var _Input$sizes$md$field;
var _Input$sizes$lg$field;
var baseStyle$1 = _extends3({}, Input.baseStyle.field, {
  paddingY: "8px",
  minHeight: "80px",
  lineHeight: "short",
  verticalAlign: "top"
});
var variants = {
  outline: function outline3(props) {
    var _Input$variants$outli;
    return (_Input$variants$outli = Input.variants.outline(props).field) != null ? _Input$variants$outli : {};
  },
  flushed: function flushed2(props) {
    var _Input$variants$flush;
    return (_Input$variants$flush = Input.variants.flushed(props).field) != null ? _Input$variants$flush : {};
  },
  filled: function filled2(props) {
    var _Input$variants$fille;
    return (_Input$variants$fille = Input.variants.filled(props).field) != null ? _Input$variants$fille : {};
  },
  unstyled: (_Input$variants$unsty = Input.variants.unstyled.field) != null ? _Input$variants$unsty : {}
};
var sizes2 = {
  xs: (_Input$sizes$xs$field = Input.sizes.xs.field) != null ? _Input$sizes$xs$field : {},
  sm: (_Input$sizes$sm$field = Input.sizes.sm.field) != null ? _Input$sizes$sm$field : {},
  md: (_Input$sizes$md$field = Input.sizes.md.field) != null ? _Input$sizes$md$field : {},
  lg: (_Input$sizes$lg$field = Input.sizes.lg.field) != null ? _Input$sizes$lg$field : {}
};
var defaultProps = {
  size: "md",
  variant: "outline"
};
var Textarea = {
  baseStyle: baseStyle$1,
  sizes: sizes2,
  variants,
  defaultProps
};
var $bg = cssVar2("tooltip-bg");
var $arrowBg = cssVar2("popper-arrow-bg");
var baseStyle20 = function baseStyle21(props) {
  var _ref2;
  var bg = mode("gray.700", "gray.300")(props);
  return _ref2 = {}, _ref2[$bg.variable] = "colors." + bg, _ref2.px = "8px", _ref2.py = "2px", _ref2.bg = [$bg.reference], _ref2[$arrowBg.variable] = [$bg.reference], _ref2.color = mode("whiteAlpha.900", "gray.900")(props), _ref2.borderRadius = "sm", _ref2.fontWeight = "medium", _ref2.fontSize = "sm", _ref2.boxShadow = "md", _ref2.maxW = "320px", _ref2.zIndex = "tooltip", _ref2;
};
var Tooltip = {
  baseStyle: baseStyle20
};
var components = {
  Accordion,
  Alert,
  Avatar,
  Badge,
  Breadcrumb,
  Button,
  Checkbox,
  CloseButton,
  Code,
  Container: Container3,
  Divider,
  Drawer,
  Editable,
  Form,
  FormError,
  FormLabel,
  Heading,
  Input,
  Kbd,
  Link,
  List,
  Menu,
  Modal,
  NumberInput,
  PinInput,
  Popover,
  Progress,
  Radio,
  Select,
  Skeleton,
  SkipLink,
  Slider,
  Spinner,
  Stat,
  Switch,
  Table,
  Tabs,
  Tag,
  Textarea,
  Tooltip
};

// node_modules/@chakra-ui/theme/foundations/borders/dist/chakra-ui-theme-foundations-borders.esm.js
var borders = {
  none: 0,
  "1px": "1px solid",
  "2px": "2px solid",
  "4px": "4px solid",
  "8px": "8px solid"
};

// node_modules/@chakra-ui/theme/foundations/breakpoints/dist/chakra-ui-theme-foundations-breakpoints.esm.js
var breakpoints2 = {
  base: "0em",
  sm: "30em",
  md: "48em",
  lg: "62em",
  xl: "80em",
  "2xl": "96em"
};

// node_modules/@chakra-ui/theme/foundations/colors/dist/chakra-ui-theme-foundations-colors.esm.js
var colors = {
  transparent: "transparent",
  current: "currentColor",
  black: "#000000",
  white: "#FFFFFF",
  whiteAlpha: {
    50: "rgba(255, 255, 255, 0.04)",
    100: "rgba(255, 255, 255, 0.06)",
    200: "rgba(255, 255, 255, 0.08)",
    300: "rgba(255, 255, 255, 0.16)",
    400: "rgba(255, 255, 255, 0.24)",
    500: "rgba(255, 255, 255, 0.36)",
    600: "rgba(255, 255, 255, 0.48)",
    700: "rgba(255, 255, 255, 0.64)",
    800: "rgba(255, 255, 255, 0.80)",
    900: "rgba(255, 255, 255, 0.92)"
  },
  blackAlpha: {
    50: "rgba(0, 0, 0, 0.04)",
    100: "rgba(0, 0, 0, 0.06)",
    200: "rgba(0, 0, 0, 0.08)",
    300: "rgba(0, 0, 0, 0.16)",
    400: "rgba(0, 0, 0, 0.24)",
    500: "rgba(0, 0, 0, 0.36)",
    600: "rgba(0, 0, 0, 0.48)",
    700: "rgba(0, 0, 0, 0.64)",
    800: "rgba(0, 0, 0, 0.80)",
    900: "rgba(0, 0, 0, 0.92)"
  },
  gray: {
    50: "#F7FAFC",
    100: "#EDF2F7",
    200: "#E2E8F0",
    300: "#CBD5E0",
    400: "#A0AEC0",
    500: "#718096",
    600: "#4A5568",
    700: "#2D3748",
    800: "#1A202C",
    900: "#171923"
  },
  red: {
    50: "#FFF5F5",
    100: "#FED7D7",
    200: "#FEB2B2",
    300: "#FC8181",
    400: "#F56565",
    500: "#E53E3E",
    600: "#C53030",
    700: "#9B2C2C",
    800: "#822727",
    900: "#63171B"
  },
  orange: {
    50: "#FFFAF0",
    100: "#FEEBC8",
    200: "#FBD38D",
    300: "#F6AD55",
    400: "#ED8936",
    500: "#DD6B20",
    600: "#C05621",
    700: "#9C4221",
    800: "#7B341E",
    900: "#652B19"
  },
  yellow: {
    50: "#FFFFF0",
    100: "#FEFCBF",
    200: "#FAF089",
    300: "#F6E05E",
    400: "#ECC94B",
    500: "#D69E2E",
    600: "#B7791F",
    700: "#975A16",
    800: "#744210",
    900: "#5F370E"
  },
  green: {
    50: "#F0FFF4",
    100: "#C6F6D5",
    200: "#9AE6B4",
    300: "#68D391",
    400: "#48BB78",
    500: "#38A169",
    600: "#2F855A",
    700: "#276749",
    800: "#22543D",
    900: "#1C4532"
  },
  teal: {
    50: "#E6FFFA",
    100: "#B2F5EA",
    200: "#81E6D9",
    300: "#4FD1C5",
    400: "#38B2AC",
    500: "#319795",
    600: "#2C7A7B",
    700: "#285E61",
    800: "#234E52",
    900: "#1D4044"
  },
  blue: {
    50: "#ebf8ff",
    100: "#bee3f8",
    200: "#90cdf4",
    300: "#63b3ed",
    400: "#4299e1",
    500: "#3182ce",
    600: "#2b6cb0",
    700: "#2c5282",
    800: "#2a4365",
    900: "#1A365D"
  },
  cyan: {
    50: "#EDFDFD",
    100: "#C4F1F9",
    200: "#9DECF9",
    300: "#76E4F7",
    400: "#0BC5EA",
    500: "#00B5D8",
    600: "#00A3C4",
    700: "#0987A0",
    800: "#086F83",
    900: "#065666"
  },
  purple: {
    50: "#FAF5FF",
    100: "#E9D8FD",
    200: "#D6BCFA",
    300: "#B794F4",
    400: "#9F7AEA",
    500: "#805AD5",
    600: "#6B46C1",
    700: "#553C9A",
    800: "#44337A",
    900: "#322659"
  },
  pink: {
    50: "#FFF5F7",
    100: "#FED7E2",
    200: "#FBB6CE",
    300: "#F687B3",
    400: "#ED64A6",
    500: "#D53F8C",
    600: "#B83280",
    700: "#97266D",
    800: "#702459",
    900: "#521B41"
  },
  linkedin: {
    50: "#E8F4F9",
    100: "#CFEDFB",
    200: "#9BDAF3",
    300: "#68C7EC",
    400: "#34B3E4",
    500: "#00A0DC",
    600: "#008CC9",
    700: "#0077B5",
    800: "#005E93",
    900: "#004471"
  },
  facebook: {
    50: "#E8F4F9",
    100: "#D9DEE9",
    200: "#B7C2DA",
    300: "#6482C0",
    400: "#4267B2",
    500: "#385898",
    600: "#314E89",
    700: "#29487D",
    800: "#223B67",
    900: "#1E355B"
  },
  messenger: {
    50: "#D0E6FF",
    100: "#B9DAFF",
    200: "#A2CDFF",
    300: "#7AB8FF",
    400: "#2E90FF",
    500: "#0078FF",
    600: "#0063D1",
    700: "#0052AC",
    800: "#003C7E",
    900: "#002C5C"
  },
  whatsapp: {
    50: "#dffeec",
    100: "#b9f5d0",
    200: "#90edb3",
    300: "#65e495",
    400: "#3cdd78",
    500: "#22c35e",
    600: "#179848",
    700: "#0c6c33",
    800: "#01421c",
    900: "#001803"
  },
  twitter: {
    50: "#E5F4FD",
    100: "#C8E9FB",
    200: "#A8DCFA",
    300: "#83CDF7",
    400: "#57BBF5",
    500: "#1DA1F2",
    600: "#1A94DA",
    700: "#1681BF",
    800: "#136B9E",
    900: "#0D4D71"
  },
  telegram: {
    50: "#E3F2F9",
    100: "#C5E4F3",
    200: "#A2D4EC",
    300: "#7AC1E4",
    400: "#47A9DA",
    500: "#0088CC",
    600: "#007AB8",
    700: "#006BA1",
    800: "#005885",
    900: "#003F5E"
  }
};

// node_modules/@chakra-ui/theme/foundations/radius/dist/chakra-ui-theme-foundations-radius.esm.js
var radii = {
  none: "0",
  sm: "0.125rem",
  base: "0.25rem",
  md: "0.375rem",
  lg: "0.5rem",
  xl: "0.75rem",
  "2xl": "1rem",
  "3xl": "1.5rem",
  full: "9999px"
};

// node_modules/@chakra-ui/theme/foundations/shadows/dist/chakra-ui-theme-foundations-shadows.esm.js
var shadows = {
  xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
  sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
  base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
  md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
  lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
  xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
  "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
  outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
  inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
  none: "none",
  "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
};

// node_modules/@chakra-ui/theme/foundations/transition/dist/chakra-ui-theme-foundations-transition.esm.js
var transitionProperty = {
  common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
  colors: "background-color, border-color, color, fill, stroke",
  dimensions: "width, height",
  position: "left, right, top, bottom",
  background: "background-color, background-image, background-position"
};
var transitionTimingFunction = {
  "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
  "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
  "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
};
var transitionDuration = {
  "ultra-fast": "50ms",
  faster: "100ms",
  fast: "150ms",
  normal: "200ms",
  slow: "300ms",
  slower: "400ms",
  "ultra-slow": "500ms"
};
var transition2 = {
  property: transitionProperty,
  easing: transitionTimingFunction,
  duration: transitionDuration
};

// node_modules/@chakra-ui/theme/foundations/z-index/dist/chakra-ui-theme-foundations-z-index.esm.js
var zIndices = {
  hide: -1,
  auto: "auto",
  base: 0,
  docked: 10,
  dropdown: 1e3,
  sticky: 1100,
  banner: 1200,
  overlay: 1300,
  modal: 1400,
  popover: 1500,
  skipLink: 1600,
  toast: 1700,
  tooltip: 1800
};

// node_modules/@chakra-ui/theme/foundations/blur/dist/chakra-ui-theme-foundations-blur.esm.js
var blur2 = {
  none: 0,
  sm: "4px",
  base: "8px",
  md: "12px",
  lg: "16px",
  xl: "24px",
  "2xl": "40px",
  "3xl": "64px"
};

// node_modules/@chakra-ui/theme/foundations/dist/chakra-ui-theme-foundations.esm.js
var foundations = _extends3({
  breakpoints: breakpoints2,
  zIndices,
  radii,
  blur: blur2,
  colors
}, typography2, {
  sizes,
  shadows,
  space: spacing,
  borders,
  transition: transition2
});

// node_modules/@chakra-ui/theme/dist/chakra-ui-theme.esm.js
var semanticTokens = {
  colors: {
    "chakra-body-text": {
      _light: "gray.800",
      _dark: "whiteAlpha.900"
    },
    "chakra-body-bg": {
      _light: "white",
      _dark: "gray.800"
    },
    "chakra-border-color": {
      _light: "gray.200",
      _dark: "whiteAlpha.300"
    },
    "chakra-placeholder-color": {
      _light: "gray.500",
      _dark: "whiteAlpha.400"
    }
  }
};
var styles = {
  global: {
    body: {
      fontFamily: "body",
      color: "chakra-body-text",
      bg: "chakra-body-bg",
      transitionProperty: "background-color",
      transitionDuration: "normal",
      lineHeight: "base"
    },
    "*::placeholder": {
      color: "chakra-placeholder-color"
    },
    "*, *::before, &::after": {
      borderColor: "chakra-border-color",
      wordWrap: "break-word"
    }
  }
};
var styles$1 = styles;
var requiredChakraThemeKeys = ["borders", "breakpoints", "colors", "components", "config", "direction", "fonts", "fontSizes", "fontWeights", "letterSpacings", "lineHeights", "radii", "shadows", "sizes", "space", "styles", "transition", "zIndices"];
function isChakraTheme(unit) {
  if (!isObject(unit)) {
    return false;
  }
  return requiredChakraThemeKeys.every(function(propertyName) {
    return Object.prototype.hasOwnProperty.call(unit, propertyName);
  });
}
var direction = "ltr";
var config = {
  useSystemColorMode: false,
  initialColorMode: "light",
  cssVarPrefix: "chakra"
};
var theme = _extends3({
  semanticTokens,
  direction
}, foundations, {
  components,
  styles: styles$1,
  config
});

// node_modules/@chakra-ui/toast/dist/chakra-ui-toast.esm.js
var React19 = __toESM(require_react());

// node_modules/@chakra-ui/alert/dist/chakra-ui-alert.esm.js
var React6 = __toESM(require_react());

// node_modules/@chakra-ui/visually-hidden/dist/chakra-ui-visually-hidden.esm.js
var visuallyHiddenStyle = {
  border: "0px",
  clip: "rect(0px, 0px, 0px, 0px)",
  height: "1px",
  width: "1px",
  margin: "-1px",
  padding: "0px",
  overflow: "hidden",
  whiteSpace: "nowrap",
  position: "absolute"
};
var VisuallyHidden = chakra("span", {
  baseStyle: visuallyHiddenStyle
});
if (__DEV__) {
  VisuallyHidden.displayName = "VisuallyHidden";
}
var VisuallyHiddenInput = chakra("input", {
  baseStyle: visuallyHiddenStyle
});
if (__DEV__) {
  VisuallyHiddenInput.displayName = "VisuallyHiddenInput";
}

// node_modules/@chakra-ui/spinner/dist/chakra-ui-spinner.esm.js
var React5 = __toESM(require_react());
function _extends4() {
  _extends4 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded2 = ["label", "thickness", "speed", "emptyColor", "className"];
var spin = keyframes({
  "0%": {
    transform: "rotate(0deg)"
  },
  "100%": {
    transform: "rotate(360deg)"
  }
});
var Spinner2 = forwardRef(function(props, ref) {
  var styles2 = useStyleConfig("Spinner", props);
  var _omitThemingProps = omitThemingProps(props), _omitThemingProps$lab = _omitThemingProps.label, label = _omitThemingProps$lab === void 0 ? "Loading..." : _omitThemingProps$lab, _omitThemingProps$thi = _omitThemingProps.thickness, thickness = _omitThemingProps$thi === void 0 ? "2px" : _omitThemingProps$thi, _omitThemingProps$spe = _omitThemingProps.speed, speed = _omitThemingProps$spe === void 0 ? "0.45s" : _omitThemingProps$spe, _omitThemingProps$emp = _omitThemingProps.emptyColor, emptyColor = _omitThemingProps$emp === void 0 ? "transparent" : _omitThemingProps$emp, className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose2(_omitThemingProps, _excluded2);
  var _className = cx("chakra-spinner", className);
  var spinnerStyles = _extends4({
    display: "inline-block",
    borderColor: "currentColor",
    borderStyle: "solid",
    borderRadius: "99999px",
    borderWidth: thickness,
    borderBottomColor: emptyColor,
    borderLeftColor: emptyColor,
    animation: spin + " " + speed + " linear infinite"
  }, styles2);
  return React5.createElement(chakra.div, _extends4({
    ref,
    __css: spinnerStyles,
    className: _className
  }, rest), label && React5.createElement(VisuallyHidden, null, label));
});
if (__DEV__) {
  Spinner2.displayName = "Spinner";
}

// node_modules/@chakra-ui/alert/dist/chakra-ui-alert.esm.js
function _extends5() {
  _extends5 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var CheckIcon = function CheckIcon2(props) {
  return React6.createElement(Icon, _extends5({
    viewBox: "0 0 24 24"
  }, props), React6.createElement("path", {
    fill: "currentColor",
    d: "M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z"
  }));
};
var InfoIcon = function InfoIcon2(props) {
  return React6.createElement(Icon, _extends5({
    viewBox: "0 0 24 24"
  }, props), React6.createElement("path", {
    fill: "currentColor",
    d: "M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z"
  }));
};
var WarningIcon = function WarningIcon2(props) {
  return React6.createElement(Icon, _extends5({
    viewBox: "0 0 24 24"
  }, props), React6.createElement("path", {
    fill: "currentColor",
    d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
  }));
};
var _excluded3 = ["status"];
var _createStylesContext = createStylesContext("Alert");
var StylesProvider2 = _createStylesContext[0];
var useStyles2 = _createStylesContext[1];
var useAlertStyles = useStyles2;
var STATUSES = {
  info: {
    icon: InfoIcon,
    colorScheme: "blue"
  },
  warning: {
    icon: WarningIcon,
    colorScheme: "orange"
  },
  success: {
    icon: CheckIcon,
    colorScheme: "green"
  },
  error: {
    icon: WarningIcon,
    colorScheme: "red"
  },
  loading: {
    icon: Spinner2,
    colorScheme: "blue"
  }
};
var _createContext2 = createContext({
  name: "AlertContext",
  errorMessage: "useAlertContext: `context` is undefined. Seems you forgot to wrap alert components in `<Alert />`"
});
var AlertProvider = _createContext2[0];
var useAlertContext = _createContext2[1];
var Alert2 = forwardRef(function(props, ref) {
  var _props$colorScheme;
  var _omitThemingProps = omitThemingProps(props), _omitThemingProps$sta = _omitThemingProps.status, status = _omitThemingProps$sta === void 0 ? "info" : _omitThemingProps$sta, rest = _objectWithoutPropertiesLoose3(_omitThemingProps, _excluded3);
  var colorScheme = (_props$colorScheme = props.colorScheme) != null ? _props$colorScheme : STATUSES[status].colorScheme;
  var styles2 = useMultiStyleConfig("Alert", _extends5({}, props, {
    colorScheme
  }));
  var alertStyles = _extends5({
    width: "100%",
    display: "flex",
    alignItems: "center",
    position: "relative",
    overflow: "hidden"
  }, styles2.container);
  return React6.createElement(AlertProvider, {
    value: {
      status
    }
  }, React6.createElement(StylesProvider2, {
    value: styles2
  }, React6.createElement(chakra.div, _extends5({
    role: "alert",
    ref
  }, rest, {
    className: cx("chakra-alert", props.className),
    __css: alertStyles
  }))));
});
var AlertTitle = forwardRef(function(props, ref) {
  var styles2 = useStyles2();
  return React6.createElement(chakra.div, _extends5({
    ref
  }, props, {
    className: cx("chakra-alert__title", props.className),
    __css: styles2.title
  }));
});
var AlertDescription = forwardRef(function(props, ref) {
  var styles2 = useStyles2();
  var descriptionStyles = _extends5({
    display: "inline"
  }, styles2.description);
  return React6.createElement(chakra.div, _extends5({
    ref
  }, props, {
    className: cx("chakra-alert__desc", props.className),
    __css: descriptionStyles
  }));
});
var AlertIcon = function AlertIcon2(props) {
  var _useAlertContext = useAlertContext(), status = _useAlertContext.status;
  var BaseIcon = STATUSES[status].icon;
  var styles2 = useStyles2();
  var css2 = status === "loading" ? styles2.spinner : styles2.icon;
  return React6.createElement(chakra.span, _extends5({
    display: "inherit"
  }, props, {
    className: cx("chakra-alert__icon", props.className),
    __css: css2
  }), props.children || React6.createElement(BaseIcon, {
    h: "100%",
    w: "100%"
  }));
};

// node_modules/@chakra-ui/close-button/dist/chakra-ui-close-button.esm.js
var React7 = __toESM(require_react());
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends6() {
  _extends6 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends6.apply(this, arguments);
}
var _excluded4 = ["children", "isDisabled", "__css"];
var CloseIcon = function CloseIcon2(props) {
  return React7.createElement(Icon, _extends6({
    focusable: "false",
    "aria-hidden": true
  }, props), React7.createElement("path", {
    fill: "currentColor",
    d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
  }));
};
var CloseButton2 = forwardRef(function(props, ref) {
  var styles2 = useStyleConfig("CloseButton", props);
  var _omitThemingProps = omitThemingProps(props), children = _omitThemingProps.children, isDisabled = _omitThemingProps.isDisabled, __css = _omitThemingProps.__css, rest = _objectWithoutPropertiesLoose4(_omitThemingProps, _excluded4);
  var baseStyle23 = {
    outline: 0,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0
  };
  return React7.createElement(chakra.button, _extends6({
    type: "button",
    "aria-label": "Close",
    ref,
    disabled: isDisabled,
    __css: _extends6({}, baseStyle23, styles2, __css)
  }, rest), children || React7.createElement(CloseIcon, {
    width: "1em",
    height: "1em"
  }));
});
if (__DEV__) {
  CloseButton2.displayName = "CloseButton";
}

// node_modules/framer-motion/node_modules/tslib/tslib.es6.js
var extendStatics = function(d, b2) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
    d2.__proto__ = b3;
  } || function(d2, b3) {
    for (var p in b3)
      if (Object.prototype.hasOwnProperty.call(b3, p))
        d2[p] = b3[p];
  };
  return extendStatics(d, b2);
};
function __extends(d, b2) {
  if (typeof b2 !== "function" && b2 !== null)
    throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
  extendStatics(d, b2);
  function __() {
    this.constructor = d;
  }
  d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign4(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m2 = s && o[s], i = 0;
  if (m2)
    return m2.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m2 = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m2)
    return o;
  var i = m2.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m2 = i["return"]))
        m2.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}

// node_modules/framer-motion/dist/es/motion/index.mjs
var React9 = __toESM(require_react(), 1);
var import_react18 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/motion/features/use-features.mjs
var React8 = __toESM(require_react(), 1);
var import_react4 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/process.mjs
var defaultEnvironment = "production";
var env = typeof process === "undefined" || process.env === void 0 ? defaultEnvironment : "development";

// node_modules/framer-motion/dist/es/motion/features/definitions.mjs
var createDefinition = function(propNames2) {
  return {
    isEnabled: function(props) {
      return propNames2.some(function(name) {
        return !!props[name];
      });
    }
  };
};
var featureDefinitions = {
  measureLayout: createDefinition(["layout", "layoutId", "drag"]),
  animation: createDefinition([
    "animate",
    "exit",
    "variants",
    "whileHover",
    "whileTap",
    "whileFocus",
    "whileDrag",
    "whileInView"
  ]),
  exit: createDefinition(["exit"]),
  drag: createDefinition(["drag", "dragControls"]),
  focus: createDefinition(["whileFocus"]),
  hover: createDefinition(["whileHover", "onHoverStart", "onHoverEnd"]),
  tap: createDefinition(["whileTap", "onTap", "onTapStart", "onTapCancel"]),
  pan: createDefinition([
    "onPan",
    "onPanStart",
    "onPanSessionStart",
    "onPanEnd"
  ]),
  inView: createDefinition([
    "whileInView",
    "onViewportEnter",
    "onViewportLeave"
  ])
};
function loadFeatures(features) {
  for (var key in features) {
    if (features[key] === null)
      continue;
    if (key === "projectionNodeConstructor") {
      featureDefinitions.projectionNodeConstructor = features[key];
    } else {
      featureDefinitions[key].Component = features[key];
    }
  }
}

// node_modules/hey-listen/dist/hey-listen.es.js
var warning = function() {
};
var invariant = function() {
};
if (true) {
  warning = function(check, message) {
    if (!check && typeof console !== "undefined") {
      console.warn(message);
    }
  };
  invariant = function(check, message) {
    if (!check) {
      throw new Error(message);
    }
  };
}

// node_modules/framer-motion/dist/es/context/LazyContext.mjs
var import_react3 = __toESM(require_react(), 1);
var LazyContext = (0, import_react3.createContext)({ strict: false });

// node_modules/framer-motion/dist/es/motion/features/use-features.mjs
var featureNames = Object.keys(featureDefinitions);
var numFeatures = featureNames.length;
function useFeatures(props, visualElement2, preloadedFeatures) {
  var features = [];
  var lazyContext = (0, import_react4.useContext)(LazyContext);
  if (!visualElement2)
    return null;
  if (env !== "production" && preloadedFeatures && lazyContext.strict) {
    invariant(false, "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.");
  }
  for (var i = 0; i < numFeatures; i++) {
    var name_1 = featureNames[i];
    var _a = featureDefinitions[name_1], isEnabled = _a.isEnabled, Component = _a.Component;
    if (isEnabled(props) && Component) {
      features.push(React8.createElement(Component, __assign({ key: name_1 }, props, { visualElement: visualElement2 })));
    }
  }
  return features;
}

// node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs
var import_react5 = __toESM(require_react(), 1);
var MotionConfigContext = (0, import_react5.createContext)({
  transformPagePoint: function(p) {
    return p;
  },
  isStatic: false,
  reducedMotion: "never"
});

// node_modules/framer-motion/dist/es/context/MotionContext/index.mjs
var import_react6 = __toESM(require_react(), 1);
var MotionContext = (0, import_react6.createContext)({});
function useVisualElementContext() {
  return (0, import_react6.useContext)(MotionContext).visualElement;
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
var import_react10 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/PresenceContext.mjs
var import_react7 = __toESM(require_react(), 1);
var PresenceContext = (0, import_react7.createContext)(null);

// node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
var import_react8 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/is-browser.mjs
var isBrowser2 = typeof document !== "undefined";

// node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
var useIsomorphicLayoutEffect = isBrowser2 ? import_react8.useLayoutEffect : import_react8.useEffect;

// node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs
var import_react9 = __toESM(require_react(), 1);
var prefersReducedMotion = { current: null };
var hasDetected = false;
function initPrefersReducedMotion() {
  hasDetected = true;
  if (!isBrowser2)
    return;
  if (window.matchMedia) {
    var motionMediaQuery_1 = window.matchMedia("(prefers-reduced-motion)");
    var setReducedMotionPreferences = function() {
      return prefersReducedMotion.current = motionMediaQuery_1.matches;
    };
    motionMediaQuery_1.addListener(setReducedMotionPreferences);
    setReducedMotionPreferences();
  } else {
    prefersReducedMotion.current = false;
  }
}
function useReducedMotion() {
  !hasDetected && initPrefersReducedMotion();
  var _a = __read((0, import_react9.useState)(prefersReducedMotion.current), 1), shouldReduceMotion = _a[0];
  return shouldReduceMotion;
}
function useReducedMotionConfig() {
  var reducedMotionPreference = useReducedMotion();
  var reducedMotion = (0, import_react9.useContext)(MotionConfigContext).reducedMotion;
  if (reducedMotion === "never") {
    return false;
  } else if (reducedMotion === "always") {
    return true;
  } else {
    return reducedMotionPreference;
  }
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
function useVisualElement(Component, visualState, props, createVisualElement) {
  var lazyContext = (0, import_react10.useContext)(LazyContext);
  var parent = useVisualElementContext();
  var presenceContext = (0, import_react10.useContext)(PresenceContext);
  var shouldReduceMotion = useReducedMotionConfig();
  var visualElementRef = (0, import_react10.useRef)(void 0);
  if (!createVisualElement)
    createVisualElement = lazyContext.renderer;
  if (!visualElementRef.current && createVisualElement) {
    visualElementRef.current = createVisualElement(Component, {
      visualState,
      parent,
      props,
      presenceId: presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id,
      blockInitialAnimation: (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false,
      shouldReduceMotion
    });
  }
  var visualElement2 = visualElementRef.current;
  useIsomorphicLayoutEffect(function() {
    visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.syncRender();
  });
  (0, import_react10.useEffect)(function() {
    var _a;
    (_a = visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.animationState) === null || _a === void 0 ? void 0 : _a.animateChanges();
  });
  useIsomorphicLayoutEffect(function() {
    return function() {
      return visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.notifyUnmount();
    };
  }, []);
  return visualElement2;
}

// node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
var import_react11 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/is-ref-object.mjs
function isRefObject(ref) {
  return typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
}

// node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
function useMotionRef(visualState, visualElement2, externalRef) {
  return (0, import_react11.useCallback)(function(instance) {
    var _a;
    instance && ((_a = visualState.mount) === null || _a === void 0 ? void 0 : _a.call(visualState, instance));
    if (visualElement2) {
      instance ? visualElement2.mount(instance) : visualElement2.unmount();
    }
    if (externalRef) {
      if (typeof externalRef === "function") {
        externalRef(instance);
      } else if (isRefObject(externalRef)) {
        externalRef.current = instance;
      }
    }
  }, [visualElement2]);
}

// node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
var import_react12 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/utils/variants.mjs
function isVariantLabels(v) {
  return Array.isArray(v);
}
function isVariantLabel(v) {
  return typeof v === "string" || isVariantLabels(v);
}
function getCurrent(visualElement2) {
  var current = {};
  visualElement2.forEachValue(function(value, key) {
    return current[key] = value.get();
  });
  return current;
}
function getVelocity(visualElement2) {
  var velocity = {};
  visualElement2.forEachValue(function(value, key) {
    return velocity[key] = value.getVelocity();
  });
  return velocity;
}
function resolveVariantFromProps(props, definition, custom, currentValues, currentVelocity) {
  var _a;
  if (currentValues === void 0) {
    currentValues = {};
  }
  if (currentVelocity === void 0) {
    currentVelocity = {};
  }
  if (typeof definition === "function") {
    definition = definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
  }
  if (typeof definition === "string") {
    definition = (_a = props.variants) === null || _a === void 0 ? void 0 : _a[definition];
  }
  if (typeof definition === "function") {
    definition = definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
  }
  return definition;
}
function resolveVariant(visualElement2, definition, custom) {
  var props = visualElement2.getProps();
  return resolveVariantFromProps(props, definition, custom !== null && custom !== void 0 ? custom : props.custom, getCurrent(visualElement2), getVelocity(visualElement2));
}
function checkIfControllingVariants(props) {
  var _a;
  return typeof ((_a = props.animate) === null || _a === void 0 ? void 0 : _a.start) === "function" || isVariantLabel(props.initial) || isVariantLabel(props.animate) || isVariantLabel(props.whileHover) || isVariantLabel(props.whileDrag) || isVariantLabel(props.whileTap) || isVariantLabel(props.whileFocus) || isVariantLabel(props.exit);
}
function checkIfVariantNode(props) {
  return Boolean(checkIfControllingVariants(props) || props.variants);
}

// node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs
function getCurrentTreeVariants(props, context) {
  if (checkIfControllingVariants(props)) {
    var initial3 = props.initial, animate4 = props.animate;
    return {
      initial: initial3 === false || isVariantLabel(initial3) ? initial3 : void 0,
      animate: isVariantLabel(animate4) ? animate4 : void 0
    };
  }
  return props.inherit !== false ? context : {};
}

// node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
function useCreateMotionContext(props) {
  var _a = getCurrentTreeVariants(props, (0, import_react12.useContext)(MotionContext)), initial3 = _a.initial, animate4 = _a.animate;
  return (0, import_react12.useMemo)(function() {
    return { initial: initial3, animate: animate4 };
  }, [variantLabelsAsDependency(initial3), variantLabelsAsDependency(animate4)]);
}
function variantLabelsAsDependency(prop) {
  return Array.isArray(prop) ? prop.join(" ") : prop;
}

// node_modules/framer-motion/dist/es/utils/use-constant.mjs
var import_react13 = __toESM(require_react(), 1);
function useConstant(init) {
  var ref = (0, import_react13.useRef)(null);
  if (ref.current === null) {
    ref.current = init();
  }
  return ref.current;
}

// node_modules/framer-motion/dist/es/projection/node/state.mjs
var globalProjectionState = {
  hasAnimatedSinceResize: true,
  hasEverUpdated: false
};

// node_modules/framer-motion/dist/es/projection/node/id.mjs
var id = 1;
function useProjectionId() {
  return useConstant(function() {
    if (globalProjectionState.hasEverUpdated) {
      return id++;
    }
  });
}

// node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs
var import_react14 = __toESM(require_react(), 1);
var LayoutGroupContext = (0, import_react14.createContext)({});

// node_modules/framer-motion/dist/es/motion/features/use-projection.mjs
var import_react16 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs
var import_react15 = __toESM(require_react(), 1);
var SwitchLayoutGroupContext = (0, import_react15.createContext)({});

// node_modules/framer-motion/dist/es/motion/features/use-projection.mjs
function useProjection(projectionId, _a, visualElement2, ProjectionNodeConstructor) {
  var _b;
  var layoutId = _a.layoutId, layout2 = _a.layout, drag2 = _a.drag, dragConstraints = _a.dragConstraints, layoutScroll = _a.layoutScroll;
  var initialPromotionConfig = (0, import_react16.useContext)(SwitchLayoutGroupContext);
  if (!ProjectionNodeConstructor || !visualElement2 || (visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.projection)) {
    return;
  }
  visualElement2.projection = new ProjectionNodeConstructor(projectionId, visualElement2.getLatestValues(), (_b = visualElement2.parent) === null || _b === void 0 ? void 0 : _b.projection);
  visualElement2.projection.setOptions({
    layoutId,
    layout: layout2,
    alwaysMeasureLayout: Boolean(drag2) || dragConstraints && isRefObject(dragConstraints),
    visualElement: visualElement2,
    scheduleRender: function() {
      return visualElement2.scheduleRender();
    },
    animationType: typeof layout2 === "string" ? layout2 : "both",
    initialPromotionConfig,
    layoutScroll
  });
}

// node_modules/framer-motion/dist/es/motion/utils/VisualElementHandler.mjs
var import_react17 = __toESM(require_react(), 1);
var VisualElementHandler = function(_super) {
  __extends(VisualElementHandler2, _super);
  function VisualElementHandler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  VisualElementHandler2.prototype.getSnapshotBeforeUpdate = function() {
    this.updateProps();
    return null;
  };
  VisualElementHandler2.prototype.componentDidUpdate = function() {
  };
  VisualElementHandler2.prototype.updateProps = function() {
    var _a = this.props, visualElement2 = _a.visualElement, props = _a.props;
    if (visualElement2)
      visualElement2.setProps(props);
  };
  VisualElementHandler2.prototype.render = function() {
    return this.props.children;
  };
  return VisualElementHandler2;
}(import_react17.default.Component);

// node_modules/framer-motion/dist/es/motion/index.mjs
function createMotionComponent(_a) {
  var preloadedFeatures = _a.preloadedFeatures, createVisualElement = _a.createVisualElement, projectionNodeConstructor = _a.projectionNodeConstructor, useRender = _a.useRender, useVisualState2 = _a.useVisualState, Component = _a.Component;
  preloadedFeatures && loadFeatures(preloadedFeatures);
  function MotionComponent(props, externalRef) {
    var layoutId = useLayoutId(props);
    props = __assign(__assign({}, props), { layoutId });
    var config2 = (0, import_react18.useContext)(MotionConfigContext);
    var features = null;
    var context = useCreateMotionContext(props);
    var projectionId = config2.isStatic ? void 0 : useProjectionId();
    var visualState = useVisualState2(props, config2.isStatic);
    if (!config2.isStatic && isBrowser2) {
      context.visualElement = useVisualElement(Component, visualState, __assign(__assign({}, config2), props), createVisualElement);
      useProjection(projectionId, props, context.visualElement, projectionNodeConstructor || featureDefinitions.projectionNodeConstructor);
      features = useFeatures(props, context.visualElement, preloadedFeatures);
    }
    return React9.createElement(VisualElementHandler, { visualElement: context.visualElement, props: __assign(__assign({}, config2), props) }, features, React9.createElement(MotionContext.Provider, { value: context }, useRender(Component, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, config2.isStatic, context.visualElement)));
  }
  return (0, import_react18.forwardRef)(MotionComponent);
}
function useLayoutId(_a) {
  var _b;
  var layoutId = _a.layoutId;
  var layoutGroupId = (_b = (0, import_react18.useContext)(LayoutGroupContext)) === null || _b === void 0 ? void 0 : _b.id;
  return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
}

// node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs
function createMotionProxy(createConfig) {
  function custom(Component, customMotionComponentConfig) {
    if (customMotionComponentConfig === void 0) {
      customMotionComponentConfig = {};
    }
    return createMotionComponent(createConfig(Component, customMotionComponentConfig));
  }
  if (typeof Proxy === "undefined") {
    return custom;
  }
  var componentCache = /* @__PURE__ */ new Map();
  return new Proxy(custom, {
    get: function(_target, key) {
      if (!componentCache.has(key)) {
        componentCache.set(key, custom(key));
      }
      return componentCache.get(key);
    }
  });
}

// node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs
var lowercaseSVGElements = [
  "animate",
  "circle",
  "defs",
  "desc",
  "ellipse",
  "g",
  "image",
  "line",
  "filter",
  "marker",
  "mask",
  "metadata",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "rect",
  "stop",
  "svg",
  "switch",
  "symbol",
  "text",
  "tspan",
  "use",
  "view"
];

// node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs
function isSVGComponent(Component) {
  if (typeof Component !== "string" || Component.includes("-")) {
    return false;
  } else if (lowercaseSVGElements.indexOf(Component) > -1 || /[A-Z]/.test(Component)) {
    return true;
  }
  return false;
}

// node_modules/framer-motion/dist/es/render/dom/use-render.mjs
var import_react21 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/html/use-props.mjs
var import_react19 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs
var scaleCorrectors = {};
function addScaleCorrector(correctors) {
  Object.assign(scaleCorrectors, correctors);
}

// node_modules/framer-motion/dist/es/render/html/utils/transform.mjs
var transformAxes = ["", "X", "Y", "Z"];
var order = ["translate", "scale", "rotate", "skew"];
var transformProps = ["transformPerspective", "x", "y", "z"];
order.forEach(function(operationKey) {
  return transformAxes.forEach(function(axesKey) {
    return transformProps.push(operationKey + axesKey);
  });
});
function sortTransformProps(a2, b2) {
  return transformProps.indexOf(a2) - transformProps.indexOf(b2);
}
var transformPropSet = new Set(transformProps);
function isTransformProp(key) {
  return transformPropSet.has(key);
}
var transformOriginProps = /* @__PURE__ */ new Set(["originX", "originY", "originZ"]);
function isTransformOriginProp(key) {
  return transformOriginProps.has(key);
}

// node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs
function isForcedMotionValue(key, _a) {
  var layout2 = _a.layout, layoutId = _a.layoutId;
  return isTransformProp(key) || isTransformOriginProp(key) || (layout2 || layoutId !== void 0) && (!!scaleCorrectors[key] || key === "opacity");
}

// node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs
var isMotionValue = function(value) {
  return Boolean(value !== null && typeof value === "object" && value.getVelocity);
};

// node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs
var translateAlias = {
  x: "translateX",
  y: "translateY",
  z: "translateZ",
  transformPerspective: "perspective"
};
function buildTransform(_a, _b, transformIsDefault, transformTemplate) {
  var transform3 = _a.transform, transformKeys2 = _a.transformKeys;
  var _c = _b.enableHardwareAcceleration, enableHardwareAcceleration = _c === void 0 ? true : _c, _d = _b.allowTransformNone, allowTransformNone = _d === void 0 ? true : _d;
  var transformString = "";
  transformKeys2.sort(sortTransformProps);
  var transformHasZ = false;
  var numTransformKeys = transformKeys2.length;
  for (var i = 0; i < numTransformKeys; i++) {
    var key = transformKeys2[i];
    transformString += "".concat(translateAlias[key] || key, "(").concat(transform3[key], ") ");
    if (key === "z")
      transformHasZ = true;
  }
  if (!transformHasZ && enableHardwareAcceleration) {
    transformString += "translateZ(0)";
  } else {
    transformString = transformString.trim();
  }
  if (transformTemplate) {
    transformString = transformTemplate(transform3, transformIsDefault ? "" : transformString);
  } else if (allowTransformNone && transformIsDefault) {
    transformString = "none";
  }
  return transformString;
}
function buildTransformOrigin(_a) {
  var _b = _a.originX, originX = _b === void 0 ? "50%" : _b, _c = _a.originY, originY = _c === void 0 ? "50%" : _c, _d = _a.originZ, originZ = _d === void 0 ? 0 : _d;
  return "".concat(originX, " ").concat(originY, " ").concat(originZ);
}

// node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs
function isCSSVariable(key) {
  return key.startsWith("--");
}

// node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs
var getValueAsType = function(value, type) {
  return type && typeof value === "number" ? type.transform(value) : value;
};

// node_modules/style-value-types/dist/es/utils.mjs
var clamp = (min2, max2) => (v) => Math.max(Math.min(v, max2), min2);
var sanitize = (v) => v % 1 ? Number(v.toFixed(5)) : v;
var floatRegex = /(-)?([\d]*\.?[\d])+/g;
var colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi;
var singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;
function isString2(v) {
  return typeof v === "string";
}

// node_modules/style-value-types/dist/es/numbers/index.mjs
var number = {
  test: (v) => typeof v === "number",
  parse: parseFloat,
  transform: (v) => v
};
var alpha = Object.assign(Object.assign({}, number), { transform: clamp(0, 1) });
var scale = Object.assign(Object.assign({}, number), { default: 1 });

// node_modules/style-value-types/dist/es/numbers/units.mjs
var createUnitType = (unit) => ({
  test: (v) => isString2(v) && v.endsWith(unit) && v.split(" ").length === 1,
  parse: parseFloat,
  transform: (v) => `${v}${unit}`
});
var degrees = createUnitType("deg");
var percent = createUnitType("%");
var px2 = createUnitType("px");
var vh = createUnitType("vh");
var vw = createUnitType("vw");
var progressPercentage = Object.assign(Object.assign({}, percent), { parse: (v) => percent.parse(v) / 100, transform: (v) => percent.transform(v * 100) });

// node_modules/style-value-types/dist/es/color/utils.mjs
var isColorString = (type, testProp) => (v) => {
  return Boolean(isString2(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));
};
var splitColor = (aName, bName, cName) => (v) => {
  if (!isString2(v))
    return v;
  const [a2, b2, c2, alpha2] = v.match(floatRegex);
  return {
    [aName]: parseFloat(a2),
    [bName]: parseFloat(b2),
    [cName]: parseFloat(c2),
    alpha: alpha2 !== void 0 ? parseFloat(alpha2) : 1
  };
};

// node_modules/style-value-types/dist/es/color/hsla.mjs
var hsla = {
  test: isColorString("hsl", "hue"),
  parse: splitColor("hue", "saturation", "lightness"),
  transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
    return "hsla(" + Math.round(hue) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
  }
};

// node_modules/style-value-types/dist/es/color/rgba.mjs
var clampRgbUnit = clamp(0, 255);
var rgbUnit = Object.assign(Object.assign({}, number), { transform: (v) => Math.round(clampRgbUnit(v)) });
var rgba = {
  test: isColorString("rgb", "red"),
  parse: splitColor("red", "green", "blue"),
  transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => "rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green) + ", " + rgbUnit.transform(blue) + ", " + sanitize(alpha.transform(alpha$1)) + ")"
};

// node_modules/style-value-types/dist/es/color/hex.mjs
function parseHex(v) {
  let r = "";
  let g = "";
  let b2 = "";
  let a2 = "";
  if (v.length > 5) {
    r = v.substr(1, 2);
    g = v.substr(3, 2);
    b2 = v.substr(5, 2);
    a2 = v.substr(7, 2);
  } else {
    r = v.substr(1, 1);
    g = v.substr(2, 1);
    b2 = v.substr(3, 1);
    a2 = v.substr(4, 1);
    r += r;
    g += g;
    b2 += b2;
    a2 += a2;
  }
  return {
    red: parseInt(r, 16),
    green: parseInt(g, 16),
    blue: parseInt(b2, 16),
    alpha: a2 ? parseInt(a2, 16) / 255 : 1
  };
}
var hex = {
  test: isColorString("#"),
  parse: parseHex,
  transform: rgba.transform
};

// node_modules/style-value-types/dist/es/color/index.mjs
var color2 = {
  test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),
  parse: (v) => {
    if (rgba.test(v)) {
      return rgba.parse(v);
    } else if (hsla.test(v)) {
      return hsla.parse(v);
    } else {
      return hex.parse(v);
    }
  },
  transform: (v) => {
    return isString2(v) ? v : v.hasOwnProperty("red") ? rgba.transform(v) : hsla.transform(v);
  }
};

// node_modules/style-value-types/dist/es/complex/index.mjs
var colorToken = "${c}";
var numberToken = "${n}";
function test(v) {
  var _a, _b, _c, _d;
  return isNaN(v) && isString2(v) && ((_b = (_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0;
}
function analyse(v) {
  if (typeof v === "number")
    v = `${v}`;
  const values = [];
  let numColors = 0;
  const colors2 = v.match(colorRegex);
  if (colors2) {
    numColors = colors2.length;
    v = v.replace(colorRegex, colorToken);
    values.push(...colors2.map(color2.parse));
  }
  const numbers = v.match(floatRegex);
  if (numbers) {
    v = v.replace(floatRegex, numberToken);
    values.push(...numbers.map(number.parse));
  }
  return { values, numColors, tokenised: v };
}
function parse(v) {
  return analyse(v).values;
}
function createTransformer(v) {
  const { values, numColors, tokenised } = analyse(v);
  const numValues = values.length;
  return (v2) => {
    let output = tokenised;
    for (let i = 0; i < numValues; i++) {
      output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color2.transform(v2[i]) : sanitize(v2[i]));
    }
    return output;
  };
}
var convertNumbersToZero = (v) => typeof v === "number" ? 0 : v;
function getAnimatableNone(v) {
  const parsed = parse(v);
  const transformer = createTransformer(v);
  return transformer(parsed.map(convertNumbersToZero));
}
var complex = { test, parse, createTransformer, getAnimatableNone };

// node_modules/style-value-types/dist/es/complex/filter.mjs
var maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
function applyDefaultFilter(v) {
  let [name, value] = v.slice(0, -1).split("(");
  if (name === "drop-shadow")
    return v;
  const [number2] = value.match(floatRegex) || [];
  if (!number2)
    return v;
  const unit = value.replace(number2, "");
  let defaultValue = maxDefaults.has(name) ? 1 : 0;
  if (number2 !== value)
    defaultValue *= 100;
  return name + "(" + defaultValue + unit + ")";
}
var functionRegex = /([a-z-]*)\(.*?\)/g;
var filter2 = Object.assign(Object.assign({}, complex), { getAnimatableNone: (v) => {
  const functions = v.match(functionRegex);
  return functions ? functions.map(applyDefaultFilter).join(" ") : v;
} });

// node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs
var int = __assign(__assign({}, number), { transform: Math.round });

// node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs
var numberValueTypes = {
  borderWidth: px2,
  borderTopWidth: px2,
  borderRightWidth: px2,
  borderBottomWidth: px2,
  borderLeftWidth: px2,
  borderRadius: px2,
  radius: px2,
  borderTopLeftRadius: px2,
  borderTopRightRadius: px2,
  borderBottomRightRadius: px2,
  borderBottomLeftRadius: px2,
  width: px2,
  maxWidth: px2,
  height: px2,
  maxHeight: px2,
  size: px2,
  top: px2,
  right: px2,
  bottom: px2,
  left: px2,
  padding: px2,
  paddingTop: px2,
  paddingRight: px2,
  paddingBottom: px2,
  paddingLeft: px2,
  margin: px2,
  marginTop: px2,
  marginRight: px2,
  marginBottom: px2,
  marginLeft: px2,
  rotate: degrees,
  rotateX: degrees,
  rotateY: degrees,
  rotateZ: degrees,
  scale,
  scaleX: scale,
  scaleY: scale,
  scaleZ: scale,
  skew: degrees,
  skewX: degrees,
  skewY: degrees,
  distance: px2,
  translateX: px2,
  translateY: px2,
  translateZ: px2,
  x: px2,
  y: px2,
  z: px2,
  perspective: px2,
  transformPerspective: px2,
  opacity: alpha,
  originX: progressPercentage,
  originY: progressPercentage,
  originZ: px2,
  zIndex: int,
  fillOpacity: alpha,
  strokeOpacity: alpha,
  numOctaves: int
};

// node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs
function buildHTMLStyles(state, latestValues, options, transformTemplate) {
  var _a;
  var style2 = state.style, vars = state.vars, transform3 = state.transform, transformKeys2 = state.transformKeys, transformOrigin2 = state.transformOrigin;
  transformKeys2.length = 0;
  var hasTransform2 = false;
  var hasTransformOrigin = false;
  var transformIsNone = true;
  for (var key in latestValues) {
    var value = latestValues[key];
    if (isCSSVariable(key)) {
      vars[key] = value;
      continue;
    }
    var valueType = numberValueTypes[key];
    var valueAsType = getValueAsType(value, valueType);
    if (isTransformProp(key)) {
      hasTransform2 = true;
      transform3[key] = valueAsType;
      transformKeys2.push(key);
      if (!transformIsNone)
        continue;
      if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0))
        transformIsNone = false;
    } else if (isTransformOriginProp(key)) {
      transformOrigin2[key] = valueAsType;
      hasTransformOrigin = true;
    } else {
      style2[key] = valueAsType;
    }
  }
  if (hasTransform2) {
    style2.transform = buildTransform(state, options, transformIsNone, transformTemplate);
  } else if (transformTemplate) {
    style2.transform = transformTemplate({}, "");
  } else if (!latestValues.transform && style2.transform) {
    style2.transform = "none";
  }
  if (hasTransformOrigin) {
    style2.transformOrigin = buildTransformOrigin(transformOrigin2);
  }
}

// node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs
var createHtmlRenderState = function() {
  return {
    style: {},
    transform: {},
    transformKeys: [],
    transformOrigin: {},
    vars: {}
  };
};

// node_modules/framer-motion/dist/es/render/html/use-props.mjs
function copyRawValuesOnly(target, source, props) {
  for (var key in source) {
    if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
      target[key] = source[key];
    }
  }
}
function useInitialMotionValues(_a, visualState, isStatic) {
  var transformTemplate = _a.transformTemplate;
  return (0, import_react19.useMemo)(function() {
    var state = createHtmlRenderState();
    buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);
    var vars = state.vars, style2 = state.style;
    return __assign(__assign({}, vars), style2);
  }, [visualState]);
}
function useStyle(props, visualState, isStatic) {
  var styleProp = props.style || {};
  var style2 = {};
  copyRawValuesOnly(style2, styleProp, props);
  Object.assign(style2, useInitialMotionValues(props, visualState, isStatic));
  if (props.transformValues) {
    style2 = props.transformValues(style2);
  }
  return style2;
}
function useHTMLProps(props, visualState, isStatic) {
  var htmlProps = {};
  var style2 = useStyle(props, visualState, isStatic);
  if (Boolean(props.drag) && props.dragListener !== false) {
    htmlProps.draggable = false;
    style2.userSelect = style2.WebkitUserSelect = style2.WebkitTouchCallout = "none";
    style2.touchAction = props.drag === true ? "none" : "pan-".concat(props.drag === "x" ? "y" : "x");
  }
  htmlProps.style = style2;
  return htmlProps;
}

// node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs
var validMotionProps = /* @__PURE__ */ new Set([
  "initial",
  "animate",
  "exit",
  "style",
  "variants",
  "transition",
  "transformTemplate",
  "transformValues",
  "custom",
  "inherit",
  "layout",
  "layoutId",
  "layoutDependency",
  "onLayoutAnimationStart",
  "onLayoutAnimationComplete",
  "onLayoutMeasure",
  "onBeforeLayoutMeasure",
  "onAnimationStart",
  "onAnimationComplete",
  "onUpdate",
  "onDragStart",
  "onDrag",
  "onDragEnd",
  "onMeasureDragConstraints",
  "onDirectionLock",
  "onDragTransitionEnd",
  "drag",
  "dragControls",
  "dragListener",
  "dragConstraints",
  "dragDirectionLock",
  "dragSnapToOrigin",
  "_dragX",
  "_dragY",
  "dragElastic",
  "dragMomentum",
  "dragPropagation",
  "dragTransition",
  "whileDrag",
  "onPan",
  "onPanStart",
  "onPanEnd",
  "onPanSessionStart",
  "onTap",
  "onTapStart",
  "onTapCancel",
  "onHoverStart",
  "onHoverEnd",
  "whileFocus",
  "whileTap",
  "whileHover",
  "whileInView",
  "onViewportEnter",
  "onViewportLeave",
  "viewport",
  "layoutScroll"
]);
function isValidMotionProp(key) {
  return validMotionProps.has(key);
}

// node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs
var shouldForward = function(key) {
  return !isValidMotionProp(key);
};
function loadExternalIsValidProp(isValidProp) {
  if (!isValidProp)
    return;
  shouldForward = function(key) {
    return key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key);
  };
}
try {
  loadExternalIsValidProp((init_is_prop_valid_browser_esm(), __toCommonJS(is_prop_valid_browser_esm_exports)).default);
} catch (_a) {
}
function filterProps(props, isDom, forwardMotionProps) {
  var filteredProps = {};
  for (var key in props) {
    if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || props["draggable"] && key.startsWith("onDrag")) {
      filteredProps[key] = props[key];
    }
  }
  return filteredProps;
}

// node_modules/framer-motion/dist/es/render/svg/use-props.mjs
var import_react20 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs
function calcOrigin(origin, offset2, size2) {
  return typeof origin === "string" ? origin : px2.transform(offset2 + size2 * origin);
}
function calcSVGTransformOrigin(dimensions, originX, originY) {
  var pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
  var pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
  return "".concat(pxOriginX, " ").concat(pxOriginY);
}

// node_modules/framer-motion/dist/es/render/svg/utils/path.mjs
var dashKeys = {
  offset: "stroke-dashoffset",
  array: "stroke-dasharray"
};
var camelKeys = {
  offset: "strokeDashoffset",
  array: "strokeDasharray"
};
function buildSVGPath(attrs, length2, spacing2, offset2, useDashCase) {
  if (spacing2 === void 0) {
    spacing2 = 1;
  }
  if (offset2 === void 0) {
    offset2 = 0;
  }
  if (useDashCase === void 0) {
    useDashCase = true;
  }
  attrs.pathLength = 1;
  var keys = useDashCase ? dashKeys : camelKeys;
  attrs[keys.offset] = px2.transform(-offset2);
  var pathLength = px2.transform(length2);
  var pathSpacing = px2.transform(spacing2);
  attrs[keys.array] = "".concat(pathLength, " ").concat(pathSpacing);
}

// node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs
function buildSVGAttrs(state, _a, options, transformTemplate) {
  var attrX = _a.attrX, attrY = _a.attrY, originX = _a.originX, originY = _a.originY, pathLength = _a.pathLength, _b = _a.pathSpacing, pathSpacing = _b === void 0 ? 1 : _b, _c = _a.pathOffset, pathOffset = _c === void 0 ? 0 : _c, latest = __rest(_a, ["attrX", "attrY", "originX", "originY", "pathLength", "pathSpacing", "pathOffset"]);
  buildHTMLStyles(state, latest, options, transformTemplate);
  state.attrs = state.style;
  state.style = {};
  var attrs = state.attrs, style2 = state.style, dimensions = state.dimensions;
  if (attrs.transform) {
    if (dimensions)
      style2.transform = attrs.transform;
    delete attrs.transform;
  }
  if (dimensions && (originX !== void 0 || originY !== void 0 || style2.transform)) {
    style2.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
  }
  if (attrX !== void 0)
    attrs.x = attrX;
  if (attrY !== void 0)
    attrs.y = attrY;
  if (pathLength !== void 0) {
    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
  }
}

// node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs
var createSvgRenderState = function() {
  return __assign(__assign({}, createHtmlRenderState()), { attrs: {} });
};

// node_modules/framer-motion/dist/es/render/svg/use-props.mjs
function useSVGProps(props, visualState) {
  var visualProps = (0, import_react20.useMemo)(function() {
    var state = createSvgRenderState();
    buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, props.transformTemplate);
    return __assign(__assign({}, state.attrs), { style: __assign({}, state.style) });
  }, [visualState]);
  if (props.style) {
    var rawStyles = {};
    copyRawValuesOnly(rawStyles, props.style, props);
    visualProps.style = __assign(__assign({}, rawStyles), visualProps.style);
  }
  return visualProps;
}

// node_modules/framer-motion/dist/es/render/dom/use-render.mjs
function createUseRender(forwardMotionProps) {
  if (forwardMotionProps === void 0) {
    forwardMotionProps = false;
  }
  var useRender = function(Component, props, projectionId, ref, _a, isStatic) {
    var latestValues = _a.latestValues;
    var useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;
    var visualProps = useVisualProps(props, latestValues, isStatic);
    var filteredProps = filterProps(props, typeof Component === "string", forwardMotionProps);
    var elementProps = __assign(__assign(__assign({}, filteredProps), visualProps), { ref });
    if (projectionId) {
      elementProps["data-projection-id"] = projectionId;
    }
    return (0, import_react21.createElement)(Component, elementProps);
  };
  return useRender;
}

// node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs
var CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;
var REPLACE_TEMPLATE = "$1-$2";
var camelToDash = function(str) {
  return str.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();
};

// node_modules/framer-motion/dist/es/render/html/utils/render.mjs
function renderHTML(element, _a, styleProp, projection) {
  var style2 = _a.style, vars = _a.vars;
  Object.assign(element.style, style2, projection && projection.getProjectionStyles(styleProp));
  for (var key in vars) {
    element.style.setProperty(key, vars[key]);
  }
}

// node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs
var camelCaseAttributes = /* @__PURE__ */ new Set([
  "baseFrequency",
  "diffuseConstant",
  "kernelMatrix",
  "kernelUnitLength",
  "keySplines",
  "keyTimes",
  "limitingConeAngle",
  "markerHeight",
  "markerWidth",
  "numOctaves",
  "targetX",
  "targetY",
  "surfaceScale",
  "specularConstant",
  "specularExponent",
  "stdDeviation",
  "tableValues",
  "viewBox",
  "gradientTransform",
  "pathLength"
]);

// node_modules/framer-motion/dist/es/render/svg/utils/render.mjs
function renderSVG(element, renderState, _styleProp, projection) {
  renderHTML(element, renderState, void 0, projection);
  for (var key in renderState.attrs) {
    element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
  }
}

// node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs
function scrapeMotionValuesFromProps(props) {
  var style2 = props.style;
  var newValues = {};
  for (var key in style2) {
    if (isMotionValue(style2[key]) || isForcedMotionValue(key, props)) {
      newValues[key] = style2[key];
    }
  }
  return newValues;
}

// node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs
function scrapeMotionValuesFromProps2(props) {
  var newValues = scrapeMotionValuesFromProps(props);
  for (var key in props) {
    if (isMotionValue(props[key])) {
      var targetKey = key === "x" || key === "y" ? "attr" + key.toUpperCase() : key;
      newValues[targetKey] = props[key];
    }
  }
  return newValues;
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
var import_react22 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs
function isAnimationControls(v) {
  return typeof v === "object" && typeof v.start === "function";
}

// node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs
var isKeyframesTarget = function(v) {
  return Array.isArray(v);
};

// node_modules/framer-motion/dist/es/utils/resolve-value.mjs
var isCustomValue = function(v) {
  return Boolean(v && typeof v === "object" && v.mix && v.toValue);
};
var resolveFinalValueInKeyframes = function(v) {
  return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
};

// node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs
function resolveMotionValue(value) {
  var unwrappedValue = isMotionValue(value) ? value.get() : value;
  return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
function makeState(_a, props, context, presenceContext) {
  var scrapeMotionValuesFromProps3 = _a.scrapeMotionValuesFromProps, createRenderState = _a.createRenderState, onMount = _a.onMount;
  var state = {
    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps3),
    renderState: createRenderState()
  };
  if (onMount) {
    state.mount = function(instance) {
      return onMount(props, instance, state);
    };
  }
  return state;
}
var makeUseVisualState = function(config2) {
  return function(props, isStatic) {
    var context = (0, import_react22.useContext)(MotionContext);
    var presenceContext = (0, import_react22.useContext)(PresenceContext);
    return isStatic ? makeState(config2, props, context, presenceContext) : useConstant(function() {
      return makeState(config2, props, context, presenceContext);
    });
  };
};
function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
  var values = {};
  var blockInitialAnimation = (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false;
  var motionValues = scrapeMotionValues(props);
  for (var key in motionValues) {
    values[key] = resolveMotionValue(motionValues[key]);
  }
  var initial3 = props.initial, animate4 = props.animate;
  var isControllingVariants = checkIfControllingVariants(props);
  var isVariantNode = checkIfVariantNode(props);
  if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {
    initial3 !== null && initial3 !== void 0 ? initial3 : initial3 = context.initial;
    animate4 !== null && animate4 !== void 0 ? animate4 : animate4 = context.animate;
  }
  var initialAnimationIsBlocked = blockInitialAnimation || initial3 === false;
  var variantToSet = initialAnimationIsBlocked ? animate4 : initial3;
  if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
    var list2 = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
    list2.forEach(function(definition) {
      var resolved = resolveVariantFromProps(props, definition);
      if (!resolved)
        return;
      var transitionEnd = resolved.transitionEnd;
      resolved.transition;
      var target = __rest(resolved, ["transitionEnd", "transition"]);
      for (var key2 in target) {
        var valueTarget = target[key2];
        if (Array.isArray(valueTarget)) {
          var index2 = initialAnimationIsBlocked ? valueTarget.length - 1 : 0;
          valueTarget = valueTarget[index2];
        }
        if (valueTarget !== null) {
          values[key2] = valueTarget;
        }
      }
      for (var key2 in transitionEnd)
        values[key2] = transitionEnd[key2];
    });
  }
  return values;
}

// node_modules/framer-motion/dist/es/render/svg/config-motion.mjs
var svgMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
    createRenderState: createSvgRenderState,
    onMount: function(props, instance, _a) {
      var renderState = _a.renderState, latestValues = _a.latestValues;
      try {
        renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
      } catch (e) {
        renderState.dimensions = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
      }
      buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, props.transformTemplate);
      renderSVG(instance, renderState);
    }
  })
};

// node_modules/framer-motion/dist/es/render/html/config-motion.mjs
var htmlMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps,
    createRenderState: createHtmlRenderState
  })
};

// node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs
function createDomMotionConfig(Component, _a, preloadedFeatures, createVisualElement, projectionNodeConstructor) {
  var _b = _a.forwardMotionProps, forwardMotionProps = _b === void 0 ? false : _b;
  var baseConfig = isSVGComponent(Component) ? svgMotionConfig : htmlMotionConfig;
  return __assign(__assign({}, baseConfig), { preloadedFeatures, useRender: createUseRender(forwardMotionProps), createVisualElement, projectionNodeConstructor, Component });
}

// node_modules/framer-motion/dist/es/render/utils/types.mjs
var AnimationType;
(function(AnimationType2) {
  AnimationType2["Animate"] = "animate";
  AnimationType2["Hover"] = "whileHover";
  AnimationType2["Tap"] = "whileTap";
  AnimationType2["Drag"] = "whileDrag";
  AnimationType2["Focus"] = "whileFocus";
  AnimationType2["InView"] = "whileInView";
  AnimationType2["Exit"] = "exit";
})(AnimationType || (AnimationType = {}));

// node_modules/framer-motion/dist/es/events/use-dom-event.mjs
var import_react23 = __toESM(require_react(), 1);
function addDomEvent(target, eventName, handler, options) {
  if (options === void 0) {
    options = { passive: true };
  }
  target.addEventListener(eventName, handler, options);
  return function() {
    return target.removeEventListener(eventName, handler);
  };
}
function useDomEvent(ref, eventName, handler, options) {
  (0, import_react23.useEffect)(function() {
    var element = ref.current;
    if (handler && element) {
      return addDomEvent(element, eventName, handler, options);
    }
  }, [ref, eventName, handler, options]);
}

// node_modules/framer-motion/dist/es/gestures/use-focus-gesture.mjs
function useFocusGesture(_a) {
  var whileFocus = _a.whileFocus, visualElement2 = _a.visualElement;
  var onFocus3 = function() {
    var _a2;
    (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Focus, true);
  };
  var onBlur3 = function() {
    var _a2;
    (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Focus, false);
  };
  useDomEvent(visualElement2, "focus", whileFocus ? onFocus3 : void 0);
  useDomEvent(visualElement2, "blur", whileFocus ? onBlur3 : void 0);
}

// node_modules/framer-motion/dist/es/gestures/utils/event-type.mjs
function isMouseEvent(event) {
  if (typeof PointerEvent !== "undefined" && event instanceof PointerEvent) {
    return !!(event.pointerType === "mouse");
  }
  return event instanceof MouseEvent;
}
function isTouchEvent(event) {
  var hasTouches = !!event.touches;
  return hasTouches;
}

// node_modules/framer-motion/dist/es/events/event-info.mjs
function filterPrimaryPointer(eventHandler) {
  return function(event) {
    var isMouseEvent2 = event instanceof MouseEvent;
    var isPrimaryPointer = !isMouseEvent2 || isMouseEvent2 && event.button === 0;
    if (isPrimaryPointer) {
      eventHandler(event);
    }
  };
}
var defaultPagePoint = { pageX: 0, pageY: 0 };
function pointFromTouch(e, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  var primaryTouch = e.touches[0] || e.changedTouches[0];
  var point = primaryTouch || defaultPagePoint;
  return {
    x: point[pointType + "X"],
    y: point[pointType + "Y"]
  };
}
function pointFromMouse(point, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  return {
    x: point[pointType + "X"],
    y: point[pointType + "Y"]
  };
}
function extractEventInfo(event, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  return {
    point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)
  };
}
var wrapHandler = function(handler, shouldFilterPrimaryPointer) {
  if (shouldFilterPrimaryPointer === void 0) {
    shouldFilterPrimaryPointer = false;
  }
  var listener = function(event) {
    return handler(event, extractEventInfo(event));
  };
  return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;
};

// node_modules/framer-motion/dist/es/events/utils.mjs
var supportsPointerEvents = function() {
  return isBrowser2 && window.onpointerdown === null;
};
var supportsTouchEvents = function() {
  return isBrowser2 && window.ontouchstart === null;
};
var supportsMouseEvents = function() {
  return isBrowser2 && window.onmousedown === null;
};

// node_modules/framer-motion/dist/es/events/use-pointer-event.mjs
var mouseEventNames = {
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointercancel: "mousecancel",
  pointerover: "mouseover",
  pointerout: "mouseout",
  pointerenter: "mouseenter",
  pointerleave: "mouseleave"
};
var touchEventNames = {
  pointerdown: "touchstart",
  pointermove: "touchmove",
  pointerup: "touchend",
  pointercancel: "touchcancel"
};
function getPointerEventName(name) {
  if (supportsPointerEvents()) {
    return name;
  } else if (supportsTouchEvents()) {
    return touchEventNames[name];
  } else if (supportsMouseEvents()) {
    return mouseEventNames[name];
  }
  return name;
}
function addPointerEvent(target, eventName, handler, options) {
  return addDomEvent(target, getPointerEventName(eventName), wrapHandler(handler, eventName === "pointerdown"), options);
}
function usePointerEvent2(ref, eventName, handler, options) {
  return useDomEvent(ref, getPointerEventName(eventName), handler && wrapHandler(handler, eventName === "pointerdown"), options);
}

// node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs
function createLock(name) {
  var lock = null;
  return function() {
    var openLock = function() {
      lock = null;
    };
    if (lock === null) {
      lock = name;
      return openLock;
    }
    return false;
  };
}
var globalHorizontalLock = createLock("dragHorizontal");
var globalVerticalLock = createLock("dragVertical");
function getGlobalLock(drag2) {
  var lock = false;
  if (drag2 === "y") {
    lock = globalVerticalLock();
  } else if (drag2 === "x") {
    lock = globalHorizontalLock();
  } else {
    var openHorizontal_1 = globalHorizontalLock();
    var openVertical_1 = globalVerticalLock();
    if (openHorizontal_1 && openVertical_1) {
      lock = function() {
        openHorizontal_1();
        openVertical_1();
      };
    } else {
      if (openHorizontal_1)
        openHorizontal_1();
      if (openVertical_1)
        openVertical_1();
    }
  }
  return lock;
}
function isDragActive() {
  var openGestureLock = getGlobalLock(true);
  if (!openGestureLock)
    return true;
  openGestureLock();
  return false;
}

// node_modules/framer-motion/dist/es/gestures/use-hover-gesture.mjs
function createHoverEvent(visualElement2, isActive, callback) {
  return function(event, info) {
    var _a;
    if (!isMouseEvent(event) || isDragActive())
      return;
    (_a = visualElement2.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Hover, isActive);
    callback === null || callback === void 0 ? void 0 : callback(event, info);
  };
}
function useHoverGesture(_a) {
  var onHoverStart = _a.onHoverStart, onHoverEnd = _a.onHoverEnd, whileHover = _a.whileHover, visualElement2 = _a.visualElement;
  usePointerEvent2(visualElement2, "pointerenter", onHoverStart || whileHover ? createHoverEvent(visualElement2, true, onHoverStart) : void 0, { passive: !onHoverStart });
  usePointerEvent2(visualElement2, "pointerleave", onHoverEnd || whileHover ? createHoverEvent(visualElement2, false, onHoverEnd) : void 0, { passive: !onHoverEnd });
}

// node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs
var import_react25 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs
var isNodeOrChild = function(parent, child) {
  if (!child) {
    return false;
  } else if (parent === child) {
    return true;
  } else {
    return isNodeOrChild(parent, child.parentElement);
  }
};

// node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs
var import_react24 = __toESM(require_react(), 1);
function useUnmountEffect2(callback) {
  return (0, import_react24.useEffect)(function() {
    return function() {
      return callback();
    };
  }, []);
}

// node_modules/popmotion/node_modules/tslib/tslib.es6.js
function __rest2(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}

// node_modules/popmotion/dist/es/utils/clamp.mjs
var clamp2 = (min2, max2, v) => Math.min(Math.max(v, min2), max2);

// node_modules/popmotion/dist/es/animations/utils/find-spring.mjs
var safeMin = 1e-3;
var minDuration = 0.01;
var maxDuration = 10;
var minDamping = 0.05;
var maxDamping = 1;
function findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1 }) {
  let envelope;
  let derivative;
  warning(duration <= maxDuration * 1e3, "Spring duration must be 10 seconds or less");
  let dampingRatio = 1 - bounce;
  dampingRatio = clamp2(minDamping, maxDamping, dampingRatio);
  duration = clamp2(minDuration, maxDuration, duration / 1e3);
  if (dampingRatio < 1) {
    envelope = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration;
      const a2 = exponentialDecay - velocity;
      const b2 = calcAngularFreq(undampedFreq2, dampingRatio);
      const c2 = Math.exp(-delta);
      return safeMin - a2 / b2 * c2;
    };
    derivative = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration;
      const d = delta * velocity + velocity;
      const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
      const f = Math.exp(-delta);
      const g = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
      const factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
      return factor * ((d - e) * f) / g;
    };
  } else {
    envelope = (undampedFreq2) => {
      const a2 = Math.exp(-undampedFreq2 * duration);
      const b2 = (undampedFreq2 - velocity) * duration + 1;
      return -safeMin + a2 * b2;
    };
    derivative = (undampedFreq2) => {
      const a2 = Math.exp(-undampedFreq2 * duration);
      const b2 = (velocity - undampedFreq2) * (duration * duration);
      return a2 * b2;
    };
  }
  const initialGuess = 5 / duration;
  const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
  duration = duration * 1e3;
  if (isNaN(undampedFreq)) {
    return {
      stiffness: 100,
      damping: 10,
      duration
    };
  } else {
    const stiffness = Math.pow(undampedFreq, 2) * mass;
    return {
      stiffness,
      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
      duration
    };
  }
}
var rootIterations = 12;
function approximateRoot(envelope, derivative, initialGuess) {
  let result = initialGuess;
  for (let i = 1; i < rootIterations; i++) {
    result = result - envelope(result) / derivative(result);
  }
  return result;
}
function calcAngularFreq(undampedFreq, dampingRatio) {
  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
}

// node_modules/popmotion/dist/es/animations/generators/spring.mjs
var durationKeys = ["duration", "bounce"];
var physicsKeys = ["stiffness", "damping", "mass"];
function isSpringType(options, keys) {
  return keys.some((key) => options[key] !== void 0);
}
function getSpringOptions(options) {
  let springOptions = Object.assign({ velocity: 0, stiffness: 100, damping: 10, mass: 1, isResolvedFromDuration: false }, options);
  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
    const derived = findSpring(options);
    springOptions = Object.assign(Object.assign(Object.assign({}, springOptions), derived), { velocity: 0, mass: 1 });
    springOptions.isResolvedFromDuration = true;
  }
  return springOptions;
}
function spring(_a) {
  var { from = 0, to = 1, restSpeed = 2, restDelta } = _a, options = __rest2(_a, ["from", "to", "restSpeed", "restDelta"]);
  const state = { done: false, value: from };
  let { stiffness, damping, mass, velocity, duration, isResolvedFromDuration } = getSpringOptions(options);
  let resolveSpring = zero;
  let resolveVelocity = zero;
  function createSpring() {
    const initialVelocity = velocity ? -(velocity / 1e3) : 0;
    const initialDelta = to - from;
    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
    const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1e3;
    if (restDelta === void 0) {
      restDelta = Math.min(Math.abs(to - from) / 100, 0.4);
    }
    if (dampingRatio < 1) {
      const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
      resolveSpring = (t) => {
        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
        return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));
      };
      resolveVelocity = (t) => {
        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
        return dampingRatio * undampedAngularFreq * envelope * (Math.sin(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq + initialDelta * Math.cos(angularFreq * t)) - envelope * (Math.cos(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) - angularFreq * initialDelta * Math.sin(angularFreq * t));
      };
    } else if (dampingRatio === 1) {
      resolveSpring = (t) => to - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);
    } else {
      const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
      resolveSpring = (t) => {
        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
        const freqForT = Math.min(dampedAngularFreq * t, 300);
        return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
      };
    }
  }
  createSpring();
  return {
    next: (t) => {
      const current = resolveSpring(t);
      if (!isResolvedFromDuration) {
        const currentVelocity = resolveVelocity(t) * 1e3;
        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
        const isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;
        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
      } else {
        state.done = t >= duration;
      }
      state.value = state.done ? to : current;
      return state;
    },
    flipTarget: () => {
      velocity = -velocity;
      [from, to] = [to, from];
      createSpring();
    }
  };
}
spring.needsInterpolation = (a2, b2) => typeof a2 === "string" || typeof b2 === "string";
var zero = (_t) => 0;

// node_modules/popmotion/dist/es/utils/progress.mjs
var progress = (from, to, value) => {
  const toFromDifference = to - from;
  return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
};

// node_modules/popmotion/dist/es/utils/mix.mjs
var mix = (from, to, progress4) => -progress4 * from + progress4 * to + from;

// node_modules/popmotion/dist/es/utils/hsla-to-rgba.mjs
function hueToRgb(p, q, t) {
  if (t < 0)
    t += 1;
  if (t > 1)
    t -= 1;
  if (t < 1 / 6)
    return p + (q - p) * 6 * t;
  if (t < 1 / 2)
    return q;
  if (t < 2 / 3)
    return p + (q - p) * (2 / 3 - t) * 6;
  return p;
}
function hslaToRgba({ hue, saturation, lightness, alpha: alpha2 }) {
  hue /= 360;
  saturation /= 100;
  lightness /= 100;
  let red = 0;
  let green = 0;
  let blue = 0;
  if (!saturation) {
    red = green = blue = lightness;
  } else {
    const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
    const p = 2 * lightness - q;
    red = hueToRgb(p, q, hue + 1 / 3);
    green = hueToRgb(p, q, hue);
    blue = hueToRgb(p, q, hue - 1 / 3);
  }
  return {
    red: Math.round(red * 255),
    green: Math.round(green * 255),
    blue: Math.round(blue * 255),
    alpha: alpha2
  };
}

// node_modules/popmotion/dist/es/utils/mix-color.mjs
var mixLinearColor = (from, to, v) => {
  const fromExpo = from * from;
  const toExpo = to * to;
  return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));
};
var colorTypes = [hex, rgba, hsla];
var getColorType = (v) => colorTypes.find((type) => type.test(v));
var notAnimatable = (color3) => `'${color3}' is not an animatable color. Use the equivalent color code instead.`;
var mixColor = (from, to) => {
  let fromColorType = getColorType(from);
  let toColorType = getColorType(to);
  invariant(!!fromColorType, notAnimatable(from));
  invariant(!!toColorType, notAnimatable(to));
  let fromColor = fromColorType.parse(from);
  let toColor = toColorType.parse(to);
  if (fromColorType === hsla) {
    fromColor = hslaToRgba(fromColor);
    fromColorType = rgba;
  }
  if (toColorType === hsla) {
    toColor = hslaToRgba(toColor);
    toColorType = rgba;
  }
  const blended = Object.assign({}, fromColor);
  return (v) => {
    for (const key in blended) {
      if (key !== "alpha") {
        blended[key] = mixLinearColor(fromColor[key], toColor[key], v);
      }
    }
    blended.alpha = mix(fromColor.alpha, toColor.alpha, v);
    return fromColorType.transform(blended);
  };
};

// node_modules/popmotion/dist/es/utils/inc.mjs
var isNum = (v) => typeof v === "number";

// node_modules/popmotion/dist/es/utils/pipe.mjs
var combineFunctions = (a2, b2) => (v) => b2(a2(v));
var pipe2 = (...transformers) => transformers.reduce(combineFunctions);

// node_modules/popmotion/dist/es/utils/mix-complex.mjs
function getMixer(origin, target) {
  if (isNum(origin)) {
    return (v) => mix(origin, target, v);
  } else if (color2.test(origin)) {
    return mixColor(origin, target);
  } else {
    return mixComplex(origin, target);
  }
}
var mixArray = (from, to) => {
  const output = [...from];
  const numValues = output.length;
  const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));
  return (v) => {
    for (let i = 0; i < numValues; i++) {
      output[i] = blendValue[i](v);
    }
    return output;
  };
};
var mixObject = (origin, target) => {
  const output = Object.assign(Object.assign({}, origin), target);
  const blendValue = {};
  for (const key in output) {
    if (origin[key] !== void 0 && target[key] !== void 0) {
      blendValue[key] = getMixer(origin[key], target[key]);
    }
  }
  return (v) => {
    for (const key in blendValue) {
      output[key] = blendValue[key](v);
    }
    return output;
  };
};
function analyse2(value) {
  const parsed = complex.parse(value);
  const numValues = parsed.length;
  let numNumbers = 0;
  let numRGB = 0;
  let numHSL = 0;
  for (let i = 0; i < numValues; i++) {
    if (numNumbers || typeof parsed[i] === "number") {
      numNumbers++;
    } else {
      if (parsed[i].hue !== void 0) {
        numHSL++;
      } else {
        numRGB++;
      }
    }
  }
  return { parsed, numNumbers, numRGB, numHSL };
}
var mixComplex = (origin, target) => {
  const template = complex.createTransformer(target);
  const originStats = analyse2(origin);
  const targetStats = analyse2(target);
  const canInterpolate = originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers;
  if (canInterpolate) {
    return pipe2(mixArray(originStats.parsed, targetStats.parsed), template);
  } else {
    warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
    return (p) => `${p > 0 ? target : origin}`;
  }
};

// node_modules/popmotion/dist/es/utils/interpolate.mjs
var mixNumber = (from, to) => (p) => mix(from, to, p);
function detectMixerFactory(v) {
  if (typeof v === "number") {
    return mixNumber;
  } else if (typeof v === "string") {
    if (color2.test(v)) {
      return mixColor;
    } else {
      return mixComplex;
    }
  } else if (Array.isArray(v)) {
    return mixArray;
  } else if (typeof v === "object") {
    return mixObject;
  }
}
function createMixers(output, ease, customMixer) {
  const mixers = [];
  const mixerFactory = customMixer || detectMixerFactory(output[0]);
  const numMixers = output.length - 1;
  for (let i = 0; i < numMixers; i++) {
    let mixer = mixerFactory(output[i], output[i + 1]);
    if (ease) {
      const easingFunction = Array.isArray(ease) ? ease[i] : ease;
      mixer = pipe2(easingFunction, mixer);
    }
    mixers.push(mixer);
  }
  return mixers;
}
function fastInterpolate([from, to], [mixer]) {
  return (v) => mixer(progress(from, to, v));
}
function slowInterpolate(input, mixers) {
  const inputLength = input.length;
  const lastInputIndex = inputLength - 1;
  return (v) => {
    let mixerIndex = 0;
    let foundMixerIndex = false;
    if (v <= input[0]) {
      foundMixerIndex = true;
    } else if (v >= input[lastInputIndex]) {
      mixerIndex = lastInputIndex - 1;
      foundMixerIndex = true;
    }
    if (!foundMixerIndex) {
      let i = 1;
      for (; i < inputLength; i++) {
        if (input[i] > v || i === lastInputIndex) {
          break;
        }
      }
      mixerIndex = i - 1;
    }
    const progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);
    return mixers[mixerIndex](progressInRange);
  };
}
function interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {
  const inputLength = input.length;
  invariant(inputLength === output.length, "Both input and output ranges must be the same length");
  invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, "Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.");
  if (input[0] > input[inputLength - 1]) {
    input = [].concat(input);
    output = [].concat(output);
    input.reverse();
    output.reverse();
  }
  const mixers = createMixers(output, ease, mixer);
  const interpolator = inputLength === 2 ? fastInterpolate(input, mixers) : slowInterpolate(input, mixers);
  return isClamp ? (v) => interpolator(clamp2(input[0], input[inputLength - 1], v)) : interpolator;
}

// node_modules/popmotion/dist/es/easing/utils.mjs
var reverseEasing = (easing) => (p) => 1 - easing(1 - p);
var mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;
var createExpoIn = (power) => (p) => Math.pow(p, power);
var createBackIn = (power) => (p) => p * p * ((power + 1) * p - power);
var createAnticipate = (power) => {
  const backEasing = createBackIn(power);
  return (p) => (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
};

// node_modules/popmotion/dist/es/easing/index.mjs
var DEFAULT_OVERSHOOT_STRENGTH = 1.525;
var BOUNCE_FIRST_THRESHOLD = 4 / 11;
var BOUNCE_SECOND_THRESHOLD = 8 / 11;
var BOUNCE_THIRD_THRESHOLD = 9 / 10;
var linear = (p) => p;
var easeIn = createExpoIn(2);
var easeOut = reverseEasing(easeIn);
var easeInOut = mirrorEasing(easeIn);
var circIn = (p) => 1 - Math.sin(Math.acos(p));
var circOut = reverseEasing(circIn);
var circInOut = mirrorEasing(circOut);
var backIn = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);
var backOut = reverseEasing(backIn);
var backInOut = mirrorEasing(backIn);
var anticipate = createAnticipate(DEFAULT_OVERSHOOT_STRENGTH);
var ca = 4356 / 361;
var cb = 35442 / 1805;
var cc = 16061 / 1805;
var bounceOut = (p) => {
  if (p === 1 || p === 0)
    return p;
  const p2 = p * p;
  return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;
};
var bounceIn = reverseEasing(bounceOut);
var bounceInOut = (p) => p < 0.5 ? 0.5 * (1 - bounceOut(1 - p * 2)) : 0.5 * bounceOut(p * 2 - 1) + 0.5;

// node_modules/popmotion/dist/es/animations/generators/keyframes.mjs
function defaultEasing(values, easing) {
  return values.map(() => easing || easeInOut).splice(0, values.length - 1);
}
function defaultOffset(values) {
  const numValues = values.length;
  return values.map((_value, i) => i !== 0 ? i / (numValues - 1) : 0);
}
function convertOffsetToTimes(offset2, duration) {
  return offset2.map((o) => o * duration);
}
function keyframes2({ from = 0, to = 1, ease, offset: offset2, duration = 300 }) {
  const state = { done: false, value: from };
  const values = Array.isArray(to) ? to : [from, to];
  const times = convertOffsetToTimes(offset2 && offset2.length === values.length ? offset2 : defaultOffset(values), duration);
  function createInterpolator() {
    return interpolate(times, values, {
      ease: Array.isArray(ease) ? ease : defaultEasing(values, ease)
    });
  }
  let interpolator = createInterpolator();
  return {
    next: (t) => {
      state.value = interpolator(t);
      state.done = t >= duration;
      return state;
    },
    flipTarget: () => {
      values.reverse();
      interpolator = createInterpolator();
    }
  };
}

// node_modules/popmotion/dist/es/animations/generators/decay.mjs
function decay({ velocity = 0, from = 0, power = 0.8, timeConstant = 350, restDelta = 0.5, modifyTarget }) {
  const state = { done: false, value: from };
  let amplitude = power * velocity;
  const ideal = from + amplitude;
  const target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
  if (target !== ideal)
    amplitude = target - from;
  return {
    next: (t) => {
      const delta = -amplitude * Math.exp(-t / timeConstant);
      state.done = !(delta > restDelta || delta < -restDelta);
      state.value = state.done ? target : target + delta;
      return state;
    },
    flipTarget: () => {
    }
  };
}

// node_modules/popmotion/dist/es/animations/utils/detect-animation-from-options.mjs
var types = { keyframes: keyframes2, spring, decay };
function detectAnimationFromOptions(config2) {
  if (Array.isArray(config2.to)) {
    return keyframes2;
  } else if (types[config2.type]) {
    return types[config2.type];
  }
  const keys = new Set(Object.keys(config2));
  if (keys.has("ease") || keys.has("duration") && !keys.has("dampingRatio")) {
    return keyframes2;
  } else if (keys.has("dampingRatio") || keys.has("stiffness") || keys.has("mass") || keys.has("damping") || keys.has("restSpeed") || keys.has("restDelta")) {
    return spring;
  }
  return keyframes2;
}

// node_modules/popmotion/node_modules/framesync/dist/es/on-next-frame.mjs
var defaultTimestep = 1 / 60 * 1e3;
var getCurrentTime = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime()), defaultTimestep);

// node_modules/popmotion/node_modules/framesync/dist/es/create-render-step.mjs
function createRenderStep(runNextFrame3) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing3 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing3;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing3)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index2 = toRunNextFrame.indexOf(callback);
      if (index2 !== -1)
        toRunNextFrame.splice(index2, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData) => {
      if (isProcessing3) {
        flushNextFrame = true;
        return;
      }
      isProcessing3 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame3();
          }
        }
      }
      isProcessing3 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData);
      }
    }
  };
  return step;
}

// node_modules/popmotion/node_modules/framesync/dist/es/index.mjs
var maxElapsed = 40;
var useDefaultElapsed = true;
var runNextFrame = false;
var isProcessing = false;
var frame = {
  delta: 0,
  timestamp: 0
};
var stepsOrder = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps = stepsOrder.reduce((acc, key) => {
  acc[key] = createRenderStep(() => runNextFrame = true);
  return acc;
}, {});
var sync = stepsOrder.reduce((acc, key) => {
  const step = steps[key];
  acc[key] = (process2, keepAlive = false, immediate = false) => {
    if (!runNextFrame)
      startLoop();
    return step.schedule(process2, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync = stepsOrder.reduce((acc, key) => {
  acc[key] = steps[key].cancel;
  return acc;
}, {});
var flushSync = stepsOrder.reduce((acc, key) => {
  acc[key] = () => steps[key].process(frame);
  return acc;
}, {});
var processStep = (stepId) => steps[stepId].process(frame);
var processFrame = (timestamp) => {
  runNextFrame = false;
  frame.delta = useDefaultElapsed ? defaultTimestep : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
  frame.timestamp = timestamp;
  isProcessing = true;
  stepsOrder.forEach(processStep);
  isProcessing = false;
  if (runNextFrame) {
    useDefaultElapsed = false;
    onNextFrame(processFrame);
  }
};
var startLoop = () => {
  runNextFrame = true;
  useDefaultElapsed = true;
  if (!isProcessing)
    onNextFrame(processFrame);
};
var getFrameData = () => frame;
var es_default = sync;

// node_modules/popmotion/dist/es/animations/utils/elapsed.mjs
function loopElapsed(elapsed, duration, delay = 0) {
  return elapsed - duration - delay;
}
function reverseElapsed(elapsed, duration, delay = 0, isForwardPlayback = true) {
  return isForwardPlayback ? loopElapsed(duration + -elapsed, duration, delay) : duration - (elapsed - duration) + delay;
}
function hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {
  return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;
}

// node_modules/popmotion/dist/es/animations/index.mjs
var framesync = (update) => {
  const passTimestamp = ({ delta }) => update(delta);
  return {
    start: () => es_default.update(passTimestamp, true),
    stop: () => cancelSync.update(passTimestamp)
  };
};
function animate(_a) {
  var _b, _c;
  var { from, autoplay = true, driver = framesync, elapsed = 0, repeat: repeatMax = 0, repeatType = "loop", repeatDelay = 0, onPlay, onStop, onComplete, onRepeat, onUpdate } = _a, options = __rest2(_a, ["from", "autoplay", "driver", "elapsed", "repeat", "repeatType", "repeatDelay", "onPlay", "onStop", "onComplete", "onRepeat", "onUpdate"]);
  let { to } = options;
  let driverControls;
  let repeatCount = 0;
  let computedDuration = options.duration;
  let latest;
  let isComplete = false;
  let isForwardPlayback = true;
  let interpolateFromNumber;
  const animator = detectAnimationFromOptions(options);
  if ((_c = (_b = animator).needsInterpolation) === null || _c === void 0 ? void 0 : _c.call(_b, from, to)) {
    interpolateFromNumber = interpolate([0, 100], [from, to], {
      clamp: false
    });
    from = 0;
    to = 100;
  }
  const animation = animator(Object.assign(Object.assign({}, options), { from, to }));
  function repeat() {
    repeatCount++;
    if (repeatType === "reverse") {
      isForwardPlayback = repeatCount % 2 === 0;
      elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);
    } else {
      elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);
      if (repeatType === "mirror")
        animation.flipTarget();
    }
    isComplete = false;
    onRepeat && onRepeat();
  }
  function complete() {
    driverControls.stop();
    onComplete && onComplete();
  }
  function update(delta) {
    if (!isForwardPlayback)
      delta = -delta;
    elapsed += delta;
    if (!isComplete) {
      const state = animation.next(Math.max(0, elapsed));
      latest = state.value;
      if (interpolateFromNumber)
        latest = interpolateFromNumber(latest);
      isComplete = isForwardPlayback ? state.done : elapsed <= 0;
    }
    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(latest);
    if (isComplete) {
      if (repeatCount === 0)
        computedDuration !== null && computedDuration !== void 0 ? computedDuration : computedDuration = elapsed;
      if (repeatCount < repeatMax) {
        hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();
      } else {
        complete();
      }
    }
  }
  function play() {
    onPlay === null || onPlay === void 0 ? void 0 : onPlay();
    driverControls = driver(update);
    driverControls.start();
  }
  autoplay && play();
  return {
    stop: () => {
      onStop === null || onStop === void 0 ? void 0 : onStop();
      driverControls.stop();
    }
  };
}

// node_modules/popmotion/dist/es/utils/velocity-per-second.mjs
function velocityPerSecond(velocity, frameDuration) {
  return frameDuration ? velocity * (1e3 / frameDuration) : 0;
}

// node_modules/popmotion/dist/es/animations/inertia.mjs
function inertia({ from = 0, velocity = 0, min: min2, max: max2, power = 0.8, timeConstant = 750, bounceStiffness = 500, bounceDamping = 10, restDelta = 1, modifyTarget, driver, onUpdate, onComplete, onStop }) {
  let currentAnimation;
  function isOutOfBounds(v) {
    return min2 !== void 0 && v < min2 || max2 !== void 0 && v > max2;
  }
  function boundaryNearest(v) {
    if (min2 === void 0)
      return max2;
    if (max2 === void 0)
      return min2;
    return Math.abs(min2 - v) < Math.abs(max2 - v) ? min2 : max2;
  }
  function startAnimation2(options) {
    currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();
    currentAnimation = animate(Object.assign(Object.assign({}, options), {
      driver,
      onUpdate: (v) => {
        var _a;
        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v);
        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, v);
      },
      onComplete,
      onStop
    }));
  }
  function startSpring(options) {
    startAnimation2(Object.assign({ type: "spring", stiffness: bounceStiffness, damping: bounceDamping, restDelta }, options));
  }
  if (isOutOfBounds(from)) {
    startSpring({ from, velocity, to: boundaryNearest(from) });
  } else {
    let target = power * velocity + from;
    if (typeof modifyTarget !== "undefined")
      target = modifyTarget(target);
    const boundary = boundaryNearest(target);
    const heading = boundary === min2 ? -1 : 1;
    let prev;
    let current;
    const checkBoundary = (v) => {
      prev = current;
      current = v;
      velocity = velocityPerSecond(v - prev, getFrameData().delta);
      if (heading === 1 && v > boundary || heading === -1 && v < boundary) {
        startSpring({ from: v, to: boundary, velocity });
      }
    };
    startAnimation2({
      type: "decay",
      from,
      velocity,
      timeConstant,
      power,
      restDelta,
      modifyTarget,
      onUpdate: isOutOfBounds(target) ? checkBoundary : void 0
    });
  }
  return {
    stop: () => currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop()
  };
}

// node_modules/popmotion/dist/es/utils/attract.mjs
var identity = (v) => v;
var createAttractor = (alterDisplacement = identity) => (constant, origin, v) => {
  const displacement = origin - v;
  const springModifiedDisplacement = -(0 - constant + 1) * (0 - alterDisplacement(Math.abs(displacement)));
  return displacement <= 0 ? origin + springModifiedDisplacement : origin - springModifiedDisplacement;
};
var attract = createAttractor();
var attractExpo = createAttractor(Math.sqrt);

// node_modules/popmotion/dist/es/utils/is-point.mjs
var isPoint = (point) => point.hasOwnProperty("x") && point.hasOwnProperty("y");

// node_modules/popmotion/dist/es/utils/is-point-3d.mjs
var isPoint3D = (point) => isPoint(point) && point.hasOwnProperty("z");

// node_modules/popmotion/dist/es/utils/distance.mjs
var distance1D = (a2, b2) => Math.abs(a2 - b2);
function distance(a2, b2) {
  if (isNum(a2) && isNum(b2)) {
    return distance1D(a2, b2);
  } else if (isPoint(a2) && isPoint(b2)) {
    const xDelta = distance1D(a2.x, b2.x);
    const yDelta = distance1D(a2.y, b2.y);
    const zDelta = isPoint3D(a2) && isPoint3D(b2) ? distance1D(a2.z, b2.z) : 0;
    return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));
  }
}

// node_modules/popmotion/dist/es/easing/cubic-bezier.mjs
var a = (a1, a2) => 1 - 3 * a2 + 3 * a1;
var b = (a1, a2) => 3 * a2 - 6 * a1;
var c = (a1) => 3 * a1;
var calcBezier = (t, a1, a2) => ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;
var getSlope = (t, a1, a2) => 3 * a(a1, a2) * t * t + 2 * b(a1, a2) * t + c(a1);
var subdivisionPrecision = 1e-7;
var subdivisionMaxIterations = 10;
function binarySubdivide(aX, aA, aB, mX1, mX2) {
  let currentX;
  let currentT;
  let i = 0;
  do {
    currentT = aA + (aB - aA) / 2;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);
  return currentT;
}
var newtonIterations = 8;
var newtonMinSlope = 1e-3;
function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
  for (let i = 0; i < newtonIterations; ++i) {
    const currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0) {
      return aGuessT;
    }
    const currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}
var kSplineTableSize = 11;
var kSampleStepSize = 1 / (kSplineTableSize - 1);
function cubicBezier(mX1, mY1, mX2, mY2) {
  if (mX1 === mY1 && mX2 === mY2)
    return linear;
  const sampleValues = new Float32Array(kSplineTableSize);
  for (let i = 0; i < kSplineTableSize; ++i) {
    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
  }
  function getTForX(aX) {
    let intervalStart = 0;
    let currentSample = 1;
    const lastSample = kSplineTableSize - 1;
    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;
    const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    const guessForT = intervalStart + dist * kSampleStepSize;
    const initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= newtonMinSlope) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }
  return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
}

// node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs
function useTapGesture(_a) {
  var onTap = _a.onTap, onTapStart = _a.onTapStart, onTapCancel = _a.onTapCancel, whileTap = _a.whileTap, visualElement2 = _a.visualElement;
  var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;
  var isPressing = (0, import_react25.useRef)(false);
  var cancelPointerEndListeners = (0, import_react25.useRef)(null);
  var eventOptions = {
    passive: !(onTapStart || onTap || onTapCancel || onPointerDown)
  };
  function removePointerEndListener() {
    var _a2;
    (_a2 = cancelPointerEndListeners.current) === null || _a2 === void 0 ? void 0 : _a2.call(cancelPointerEndListeners);
    cancelPointerEndListeners.current = null;
  }
  function checkPointerEnd() {
    var _a2;
    removePointerEndListener();
    isPressing.current = false;
    (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Tap, false);
    return !isDragActive();
  }
  function onPointerUp(event, info) {
    if (!checkPointerEnd())
      return;
    !isNodeOrChild(visualElement2.getInstance(), event.target) ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info) : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);
  }
  function onPointerCancel(event, info) {
    if (!checkPointerEnd())
      return;
    onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);
  }
  function onPointerDown(event, info) {
    var _a2;
    removePointerEndListener();
    if (isPressing.current)
      return;
    isPressing.current = true;
    cancelPointerEndListeners.current = pipe2(addPointerEvent(window, "pointerup", onPointerUp, eventOptions), addPointerEvent(window, "pointercancel", onPointerCancel, eventOptions));
    (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Tap, true);
    onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);
  }
  usePointerEvent2(visualElement2, "pointerdown", hasPressListeners ? onPointerDown : void 0, eventOptions);
  useUnmountEffect2(removePointerEndListener);
}

// node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs
var import_react26 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/warn-once.mjs
var warned = /* @__PURE__ */ new Set();
function warnOnce(condition, message, element) {
  if (condition || warned.has(message))
    return;
  console.warn(message);
  if (element)
    console.warn(element);
  warned.add(message);
}

// node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs
var observerCallbacks = /* @__PURE__ */ new WeakMap();
var observers = /* @__PURE__ */ new WeakMap();
var fireObserverCallback = function(entry) {
  var _a;
  (_a = observerCallbacks.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);
};
var fireAllObserverCallbacks = function(entries) {
  entries.forEach(fireObserverCallback);
};
function initIntersectionObserver(_a) {
  var root = _a.root, options = __rest(_a, ["root"]);
  var lookupRoot = root || document;
  if (!observers.has(lookupRoot)) {
    observers.set(lookupRoot, {});
  }
  var rootObservers = observers.get(lookupRoot);
  var key = JSON.stringify(options);
  if (!rootObservers[key]) {
    rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, __assign({ root }, options));
  }
  return rootObservers[key];
}
function observeIntersection(element, options, callback) {
  var rootInteresectionObserver = initIntersectionObserver(options);
  observerCallbacks.set(element, callback);
  rootInteresectionObserver.observe(element);
  return function() {
    observerCallbacks.delete(element);
    rootInteresectionObserver.unobserve(element);
  };
}

// node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs
function useViewport(_a) {
  var visualElement2 = _a.visualElement, whileInView = _a.whileInView, onViewportEnter = _a.onViewportEnter, onViewportLeave = _a.onViewportLeave, _b = _a.viewport, viewport2 = _b === void 0 ? {} : _b;
  var state = (0, import_react26.useRef)({
    hasEnteredView: false,
    isInView: false
  });
  var shouldObserve = Boolean(whileInView || onViewportEnter || onViewportLeave);
  if (viewport2.once && state.current.hasEnteredView)
    shouldObserve = false;
  var useObserver = typeof IntersectionObserver === "undefined" ? useMissingIntersectionObserver : useIntersectionObserver;
  useObserver(shouldObserve, state.current, visualElement2, viewport2);
}
var thresholdNames = {
  some: 0,
  all: 1
};
function useIntersectionObserver(shouldObserve, state, visualElement2, _a) {
  var root = _a.root, rootMargin = _a.margin, _b = _a.amount, amount = _b === void 0 ? "some" : _b, once = _a.once;
  (0, import_react26.useEffect)(function() {
    if (!shouldObserve)
      return;
    var options = {
      root: root === null || root === void 0 ? void 0 : root.current,
      rootMargin,
      threshold: typeof amount === "number" ? amount : thresholdNames[amount]
    };
    var intersectionCallback = function(entry) {
      var _a2;
      var isIntersecting = entry.isIntersecting;
      if (state.isInView === isIntersecting)
        return;
      state.isInView = isIntersecting;
      if (once && !isIntersecting && state.hasEnteredView) {
        return;
      } else if (isIntersecting) {
        state.hasEnteredView = true;
      }
      (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.InView, isIntersecting);
      var props = visualElement2.getProps();
      var callback = isIntersecting ? props.onViewportEnter : props.onViewportLeave;
      callback === null || callback === void 0 ? void 0 : callback(entry);
    };
    return observeIntersection(visualElement2.getInstance(), options, intersectionCallback);
  }, [shouldObserve, root, rootMargin, amount]);
}
function useMissingIntersectionObserver(shouldObserve, state, visualElement2, _a) {
  var _b = _a.fallback, fallback = _b === void 0 ? true : _b;
  (0, import_react26.useEffect)(function() {
    if (!shouldObserve || !fallback)
      return;
    if (env !== "production") {
      warnOnce(false, "IntersectionObserver not available on this device. whileInView animations will trigger on mount.");
    }
    requestAnimationFrame(function() {
      var _a2;
      state.hasEnteredView = true;
      var onViewportEnter = visualElement2.getProps().onViewportEnter;
      onViewportEnter === null || onViewportEnter === void 0 ? void 0 : onViewportEnter(null);
      (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.InView, true);
    });
  }, [shouldObserve]);
}

// node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.mjs
var makeRenderlessComponent = function(hook) {
  return function(props) {
    hook(props);
    return null;
  };
};

// node_modules/framer-motion/dist/es/motion/features/gestures.mjs
var gestureAnimations = {
  inView: makeRenderlessComponent(useViewport),
  tap: makeRenderlessComponent(useTapGesture),
  focus: makeRenderlessComponent(useFocusGesture),
  hover: makeRenderlessComponent(useHoverGesture)
};

// node_modules/framer-motion/dist/es/motion/features/animations.mjs
var import_react28 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
var import_react27 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-id.mjs
var counter = 0;
var incrementId = function() {
  return counter++;
};
var useId2 = function() {
  return useConstant(incrementId);
};

// node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
function usePresence() {
  var context = (0, import_react27.useContext)(PresenceContext);
  if (context === null)
    return [true, null];
  var isPresent2 = context.isPresent, onExitComplete = context.onExitComplete, register = context.register;
  var id2 = useId2();
  (0, import_react27.useEffect)(function() {
    return register(id2);
  }, []);
  var safeToRemove = function() {
    return onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id2);
  };
  return !isPresent2 && onExitComplete ? [false, safeToRemove] : [true];
}
function useIsPresent() {
  return isPresent((0, import_react27.useContext)(PresenceContext));
}
function isPresent(context) {
  return context === null ? true : context.isPresent;
}

// node_modules/framer-motion/dist/es/utils/shallow-compare.mjs
function shallowCompare(next, prev) {
  if (!Array.isArray(prev))
    return false;
  var prevLength = prev.length;
  if (prevLength !== next.length)
    return false;
  for (var i = 0; i < prevLength; i++) {
    if (prev[i] !== next[i])
      return false;
  }
  return true;
}

// node_modules/framer-motion/dist/es/utils/time-conversion.mjs
var secondsToMilliseconds = function(seconds) {
  return seconds * 1e3;
};

// node_modules/framer-motion/dist/es/animation/utils/easing.mjs
var easingLookup = {
  linear,
  easeIn,
  easeInOut,
  easeOut,
  circIn,
  circInOut,
  circOut,
  backIn,
  backInOut,
  backOut,
  anticipate,
  bounceIn,
  bounceInOut,
  bounceOut
};
var easingDefinitionToFunction = function(definition) {
  if (Array.isArray(definition)) {
    invariant(definition.length === 4, "Cubic bezier arrays must contain four numerical values.");
    var _a = __read(definition, 4), x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3];
    return cubicBezier(x1, y1, x2, y2);
  } else if (typeof definition === "string") {
    invariant(easingLookup[definition] !== void 0, "Invalid easing type '".concat(definition, "'"));
    return easingLookup[definition];
  }
  return definition;
};
var isEasingArray = function(ease) {
  return Array.isArray(ease) && typeof ease[0] !== "number";
};

// node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs
var isAnimatable = function(key, value) {
  if (key === "zIndex")
    return false;
  if (typeof value === "number" || Array.isArray(value))
    return true;
  if (typeof value === "string" && complex.test(value) && !value.startsWith("url(")) {
    return true;
  }
  return false;
};

// node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs
var underDampedSpring = function() {
  return {
    type: "spring",
    stiffness: 500,
    damping: 25,
    restSpeed: 10
  };
};
var criticallyDampedSpring = function(to) {
  return {
    type: "spring",
    stiffness: 550,
    damping: to === 0 ? 2 * Math.sqrt(550) : 30,
    restSpeed: 10
  };
};
var linearTween = function() {
  return {
    type: "keyframes",
    ease: "linear",
    duration: 0.3
  };
};
var keyframes3 = function(values) {
  return {
    type: "keyframes",
    duration: 0.8,
    values
  };
};
var defaultTransitions = {
  x: underDampedSpring,
  y: underDampedSpring,
  z: underDampedSpring,
  rotate: underDampedSpring,
  rotateX: underDampedSpring,
  rotateY: underDampedSpring,
  rotateZ: underDampedSpring,
  scaleX: criticallyDampedSpring,
  scaleY: criticallyDampedSpring,
  scale: criticallyDampedSpring,
  opacity: linearTween,
  backgroundColor: linearTween,
  color: linearTween,
  default: criticallyDampedSpring
};
var getDefaultTransition = function(valueKey, to) {
  var transitionFactory;
  if (isKeyframesTarget(to)) {
    transitionFactory = keyframes3;
  } else {
    transitionFactory = defaultTransitions[valueKey] || defaultTransitions.default;
  }
  return __assign({ to }, transitionFactory(to));
};

// node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs
var defaultValueTypes = __assign(__assign({}, numberValueTypes), {
  color: color2,
  backgroundColor: color2,
  outlineColor: color2,
  fill: color2,
  stroke: color2,
  borderColor: color2,
  borderTopColor: color2,
  borderRightColor: color2,
  borderBottomColor: color2,
  borderLeftColor: color2,
  filter: filter2,
  WebkitFilter: filter2
});
var getDefaultValueType = function(key) {
  return defaultValueTypes[key];
};

// node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs
function getAnimatableNone2(key, value) {
  var _a;
  var defaultValueType = getDefaultValueType(key);
  if (defaultValueType !== filter2)
    defaultValueType = complex;
  return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value);
}

// node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs
var instantAnimationState = {
  current: false
};

// node_modules/framer-motion/dist/es/animation/utils/transitions.mjs
function isTransitionDefined(_a) {
  _a.when;
  _a.delay;
  _a.delayChildren;
  _a.staggerChildren;
  _a.staggerDirection;
  _a.repeat;
  _a.repeatType;
  _a.repeatDelay;
  _a.from;
  var transition3 = __rest(_a, ["when", "delay", "delayChildren", "staggerChildren", "staggerDirection", "repeat", "repeatType", "repeatDelay", "from"]);
  return !!Object.keys(transition3).length;
}
var legacyRepeatWarning = false;
function convertTransitionToAnimationOptions(_a) {
  var ease = _a.ease, times = _a.times, yoyo = _a.yoyo, flip2 = _a.flip, loop = _a.loop, transition3 = __rest(_a, ["ease", "times", "yoyo", "flip", "loop"]);
  var options = __assign({}, transition3);
  if (times)
    options["offset"] = times;
  if (transition3.duration)
    options["duration"] = secondsToMilliseconds(transition3.duration);
  if (transition3.repeatDelay)
    options.repeatDelay = secondsToMilliseconds(transition3.repeatDelay);
  if (ease) {
    options["ease"] = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);
  }
  if (transition3.type === "tween")
    options.type = "keyframes";
  if (yoyo || loop || flip2) {
    warning(!legacyRepeatWarning, "yoyo, loop and flip have been removed from the API. Replace with repeat and repeatType options.");
    legacyRepeatWarning = true;
    if (yoyo) {
      options.repeatType = "reverse";
    } else if (loop) {
      options.repeatType = "loop";
    } else if (flip2) {
      options.repeatType = "mirror";
    }
    options.repeat = loop || yoyo || flip2 || transition3.repeat;
  }
  if (transition3.type !== "spring")
    options.type = "keyframes";
  return options;
}
function getDelayFromTransition(transition3, key) {
  var _a, _b;
  var valueTransition = getValueTransition(transition3, key) || {};
  return (_b = (_a = valueTransition.delay) !== null && _a !== void 0 ? _a : transition3.delay) !== null && _b !== void 0 ? _b : 0;
}
function hydrateKeyframes(options) {
  if (Array.isArray(options.to) && options.to[0] === null) {
    options.to = __spreadArray([], __read(options.to), false);
    options.to[0] = options.from;
  }
  return options;
}
function getPopmotionAnimationOptions(transition3, options, key) {
  var _a;
  if (Array.isArray(options.to)) {
    (_a = transition3.duration) !== null && _a !== void 0 ? _a : transition3.duration = 0.8;
  }
  hydrateKeyframes(options);
  if (!isTransitionDefined(transition3)) {
    transition3 = __assign(__assign({}, transition3), getDefaultTransition(key, options.to));
  }
  return __assign(__assign({}, options), convertTransitionToAnimationOptions(transition3));
}
function getAnimation(key, value, target, transition3, onComplete) {
  var _a;
  var valueTransition = getValueTransition(transition3, key);
  var origin = (_a = valueTransition.from) !== null && _a !== void 0 ? _a : value.get();
  var isTargetAnimatable = isAnimatable(key, target);
  if (origin === "none" && isTargetAnimatable && typeof target === "string") {
    origin = getAnimatableNone2(key, target);
  } else if (isZero(origin) && typeof target === "string") {
    origin = getZeroUnit(target);
  } else if (!Array.isArray(target) && isZero(target) && typeof origin === "string") {
    target = getZeroUnit(origin);
  }
  var isOriginAnimatable = isAnimatable(key, origin);
  warning(isOriginAnimatable === isTargetAnimatable, "You are trying to animate ".concat(key, ' from "').concat(origin, '" to "').concat(target, '". ').concat(origin, " is not an animatable value - to enable this animation set ").concat(origin, " to a value animatable to ").concat(target, " via the `style` property."));
  function start2() {
    var options = {
      from: origin,
      to: target,
      velocity: value.getVelocity(),
      onComplete,
      onUpdate: function(v) {
        return value.set(v);
      }
    };
    return valueTransition.type === "inertia" || valueTransition.type === "decay" ? inertia(__assign(__assign({}, options), valueTransition)) : animate(__assign(__assign({}, getPopmotionAnimationOptions(valueTransition, options, key)), { onUpdate: function(v) {
      var _a2;
      options.onUpdate(v);
      (_a2 = valueTransition.onUpdate) === null || _a2 === void 0 ? void 0 : _a2.call(valueTransition, v);
    }, onComplete: function() {
      var _a2;
      options.onComplete();
      (_a2 = valueTransition.onComplete) === null || _a2 === void 0 ? void 0 : _a2.call(valueTransition);
    } }));
  }
  function set() {
    var _a2, _b;
    var finalTarget = resolveFinalValueInKeyframes(target);
    value.set(finalTarget);
    onComplete();
    (_a2 = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onUpdate) === null || _a2 === void 0 ? void 0 : _a2.call(valueTransition, finalTarget);
    (_b = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onComplete) === null || _b === void 0 ? void 0 : _b.call(valueTransition);
    return { stop: function() {
    } };
  }
  return !isOriginAnimatable || !isTargetAnimatable || valueTransition.type === false ? set : start2;
}
function isZero(value) {
  return value === 0 || typeof value === "string" && parseFloat(value) === 0 && value.indexOf(" ") === -1;
}
function getZeroUnit(potentialUnitType) {
  return typeof potentialUnitType === "number" ? 0 : getAnimatableNone2("", potentialUnitType);
}
function getValueTransition(transition3, key) {
  return transition3[key] || transition3["default"] || transition3;
}
function startAnimation(key, value, target, transition3) {
  if (transition3 === void 0) {
    transition3 = {};
  }
  if (instantAnimationState.current) {
    transition3 = { type: false };
  }
  return value.start(function(onComplete) {
    var delayTimer;
    var controls;
    var animation = getAnimation(key, value, target, transition3, onComplete);
    var delay = getDelayFromTransition(transition3, key);
    var start2 = function() {
      return controls = animation();
    };
    if (delay) {
      delayTimer = window.setTimeout(start2, secondsToMilliseconds(delay));
    } else {
      start2();
    }
    return function() {
      clearTimeout(delayTimer);
      controls === null || controls === void 0 ? void 0 : controls.stop();
    };
  });
}

// node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs
var isNumericalString = function(v) {
  return /^\-?\d*\.?\d+$/.test(v);
};

// node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs
var isZeroValueString = function(v) {
  return /^0[^.\s]+$/.test(v);
};

// node_modules/framer-motion/node_modules/framesync/dist/es/on-next-frame.mjs
var defaultTimestep2 = 1 / 60 * 1e3;
var getCurrentTime2 = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame2 = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime2()), defaultTimestep2);

// node_modules/framer-motion/node_modules/framesync/dist/es/create-render-step.mjs
function createRenderStep2(runNextFrame3) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing3 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing3;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (buffer.indexOf(callback) === -1) {
        buffer.push(callback);
        if (addToCurrentFrame && isProcessing3)
          numToRun = toRun.length;
      }
      return callback;
    },
    cancel: (callback) => {
      const index2 = toRunNextFrame.indexOf(callback);
      if (index2 !== -1)
        toRunNextFrame.splice(index2, 1);
      toKeepAlive.delete(callback);
    },
    process: (frameData) => {
      if (isProcessing3) {
        flushNextFrame = true;
        return;
      }
      isProcessing3 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = toRun[i];
          callback(frameData);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame3();
          }
        }
      }
      isProcessing3 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData);
      }
    }
  };
  return step;
}

// node_modules/framer-motion/node_modules/framesync/dist/es/index.mjs
var maxElapsed2 = 40;
var useDefaultElapsed2 = true;
var runNextFrame2 = false;
var isProcessing2 = false;
var frame2 = {
  delta: 0,
  timestamp: 0
};
var stepsOrder2 = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps3 = stepsOrder2.reduce((acc, key) => {
  acc[key] = createRenderStep2(() => runNextFrame2 = true);
  return acc;
}, {});
var sync2 = stepsOrder2.reduce((acc, key) => {
  const step = steps3[key];
  acc[key] = (process2, keepAlive = false, immediate = false) => {
    if (!runNextFrame2)
      startLoop2();
    return step.schedule(process2, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync2 = stepsOrder2.reduce((acc, key) => {
  acc[key] = steps3[key].cancel;
  return acc;
}, {});
var flushSync2 = stepsOrder2.reduce((acc, key) => {
  acc[key] = () => steps3[key].process(frame2);
  return acc;
}, {});
var processStep2 = (stepId) => steps3[stepId].process(frame2);
var processFrame2 = (timestamp) => {
  runNextFrame2 = false;
  frame2.delta = useDefaultElapsed2 ? defaultTimestep2 : Math.max(Math.min(timestamp - frame2.timestamp, maxElapsed2), 1);
  frame2.timestamp = timestamp;
  isProcessing2 = true;
  stepsOrder2.forEach(processStep2);
  isProcessing2 = false;
  if (runNextFrame2) {
    useDefaultElapsed2 = false;
    onNextFrame2(processFrame2);
  }
};
var startLoop2 = () => {
  runNextFrame2 = true;
  useDefaultElapsed2 = true;
  if (!isProcessing2)
    onNextFrame2(processFrame2);
};
var getFrameData2 = () => frame2;
var es_default2 = sync2;

// node_modules/framer-motion/dist/es/utils/array.mjs
function addUniqueItem(arr, item) {
  arr.indexOf(item) === -1 && arr.push(item);
}
function removeItem2(arr, item) {
  var index2 = arr.indexOf(item);
  index2 > -1 && arr.splice(index2, 1);
}
function moveItem(_a, fromIndex, toIndex) {
  var _b = __read(_a), arr = _b.slice(0);
  var startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;
  if (startIndex >= 0 && startIndex < arr.length) {
    var endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;
    var _c = __read(arr.splice(fromIndex, 1), 1), item = _c[0];
    arr.splice(endIndex, 0, item);
  }
  return arr;
}

// node_modules/framer-motion/dist/es/utils/subscription-manager.mjs
var SubscriptionManager = function() {
  function SubscriptionManager2() {
    this.subscriptions = [];
  }
  SubscriptionManager2.prototype.add = function(handler) {
    var _this = this;
    addUniqueItem(this.subscriptions, handler);
    return function() {
      return removeItem2(_this.subscriptions, handler);
    };
  };
  SubscriptionManager2.prototype.notify = function(a2, b2, c2) {
    var numSubscriptions = this.subscriptions.length;
    if (!numSubscriptions)
      return;
    if (numSubscriptions === 1) {
      this.subscriptions[0](a2, b2, c2);
    } else {
      for (var i = 0; i < numSubscriptions; i++) {
        var handler = this.subscriptions[i];
        handler && handler(a2, b2, c2);
      }
    }
  };
  SubscriptionManager2.prototype.getSize = function() {
    return this.subscriptions.length;
  };
  SubscriptionManager2.prototype.clear = function() {
    this.subscriptions.length = 0;
  };
  return SubscriptionManager2;
}();

// node_modules/framer-motion/dist/es/value/index.mjs
var isFloat = function(value) {
  return !isNaN(parseFloat(value));
};
var MotionValue = function() {
  function MotionValue3(init) {
    var _this = this;
    this.version = "6.5.1";
    this.timeDelta = 0;
    this.lastUpdated = 0;
    this.updateSubscribers = new SubscriptionManager();
    this.velocityUpdateSubscribers = new SubscriptionManager();
    this.renderSubscribers = new SubscriptionManager();
    this.canTrackVelocity = false;
    this.updateAndNotify = function(v, render) {
      if (render === void 0) {
        render = true;
      }
      _this.prev = _this.current;
      _this.current = v;
      var _a = getFrameData2(), delta = _a.delta, timestamp = _a.timestamp;
      if (_this.lastUpdated !== timestamp) {
        _this.timeDelta = delta;
        _this.lastUpdated = timestamp;
        es_default2.postRender(_this.scheduleVelocityCheck);
      }
      if (_this.prev !== _this.current) {
        _this.updateSubscribers.notify(_this.current);
      }
      if (_this.velocityUpdateSubscribers.getSize()) {
        _this.velocityUpdateSubscribers.notify(_this.getVelocity());
      }
      if (render) {
        _this.renderSubscribers.notify(_this.current);
      }
    };
    this.scheduleVelocityCheck = function() {
      return es_default2.postRender(_this.velocityCheck);
    };
    this.velocityCheck = function(_a) {
      var timestamp = _a.timestamp;
      if (timestamp !== _this.lastUpdated) {
        _this.prev = _this.current;
        _this.velocityUpdateSubscribers.notify(_this.getVelocity());
      }
    };
    this.hasAnimated = false;
    this.prev = this.current = init;
    this.canTrackVelocity = isFloat(this.current);
  }
  MotionValue3.prototype.onChange = function(subscription) {
    return this.updateSubscribers.add(subscription);
  };
  MotionValue3.prototype.clearListeners = function() {
    this.updateSubscribers.clear();
  };
  MotionValue3.prototype.onRenderRequest = function(subscription) {
    subscription(this.get());
    return this.renderSubscribers.add(subscription);
  };
  MotionValue3.prototype.attach = function(passiveEffect) {
    this.passiveEffect = passiveEffect;
  };
  MotionValue3.prototype.set = function(v, render) {
    if (render === void 0) {
      render = true;
    }
    if (!render || !this.passiveEffect) {
      this.updateAndNotify(v, render);
    } else {
      this.passiveEffect(v, this.updateAndNotify);
    }
  };
  MotionValue3.prototype.get = function() {
    return this.current;
  };
  MotionValue3.prototype.getPrevious = function() {
    return this.prev;
  };
  MotionValue3.prototype.getVelocity = function() {
    return this.canTrackVelocity ? velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;
  };
  MotionValue3.prototype.start = function(animation) {
    var _this = this;
    this.stop();
    return new Promise(function(resolve) {
      _this.hasAnimated = true;
      _this.stopAnimation = animation(resolve);
    }).then(function() {
      return _this.clearAnimation();
    });
  };
  MotionValue3.prototype.stop = function() {
    if (this.stopAnimation)
      this.stopAnimation();
    this.clearAnimation();
  };
  MotionValue3.prototype.isAnimating = function() {
    return !!this.stopAnimation;
  };
  MotionValue3.prototype.clearAnimation = function() {
    this.stopAnimation = null;
  };
  MotionValue3.prototype.destroy = function() {
    this.updateSubscribers.clear();
    this.renderSubscribers.clear();
    this.stop();
  };
  return MotionValue3;
}();
function motionValue(init) {
  return new MotionValue(init);
}

// node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs
var testValueType = function(v) {
  return function(type) {
    return type.test(v);
  };
};

// node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs
var auto = {
  test: function(v) {
    return v === "auto";
  },
  parse: function(v) {
    return v;
  }
};

// node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs
var dimensionValueTypes = [number, px2, percent, degrees, vw, vh, auto];
var findDimensionValueType = function(v) {
  return dimensionValueTypes.find(testValueType(v));
};

// node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs
var valueTypes = __spreadArray(__spreadArray([], __read(dimensionValueTypes), false), [color2, complex], false);
var findValueType = function(v) {
  return valueTypes.find(testValueType(v));
};

// node_modules/framer-motion/dist/es/render/utils/setters.mjs
function setMotionValue(visualElement2, key, value) {
  if (visualElement2.hasValue(key)) {
    visualElement2.getValue(key).set(value);
  } else {
    visualElement2.addValue(key, motionValue(value));
  }
}
function setTarget(visualElement2, definition) {
  var resolved = resolveVariant(visualElement2, definition);
  var _a = resolved ? visualElement2.makeTargetAnimatable(resolved, false) : {}, _b = _a.transitionEnd, transitionEnd = _b === void 0 ? {} : _b;
  _a.transition;
  var target = __rest(_a, ["transitionEnd", "transition"]);
  target = __assign(__assign({}, target), transitionEnd);
  for (var key in target) {
    var value = resolveFinalValueInKeyframes(target[key]);
    setMotionValue(visualElement2, key, value);
  }
}
function checkTargetForNewValues(visualElement2, target, origin) {
  var _a, _b, _c;
  var _d;
  var newValueKeys = Object.keys(target).filter(function(key2) {
    return !visualElement2.hasValue(key2);
  });
  var numNewValues = newValueKeys.length;
  if (!numNewValues)
    return;
  for (var i = 0; i < numNewValues; i++) {
    var key = newValueKeys[i];
    var targetValue = target[key];
    var value = null;
    if (Array.isArray(targetValue)) {
      value = targetValue[0];
    }
    if (value === null) {
      value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement2.readValue(key)) !== null && _b !== void 0 ? _b : target[key];
    }
    if (value === void 0 || value === null)
      continue;
    if (typeof value === "string" && (isNumericalString(value) || isZeroValueString(value))) {
      value = parseFloat(value);
    } else if (!findValueType(value) && complex.test(targetValue)) {
      value = getAnimatableNone2(key, targetValue);
    }
    visualElement2.addValue(key, motionValue(value));
    (_c = (_d = origin)[key]) !== null && _c !== void 0 ? _c : _d[key] = value;
    visualElement2.setBaseTarget(key, value);
  }
}
function getOriginFromTransition(key, transition3) {
  if (!transition3)
    return;
  var valueTransition = transition3[key] || transition3["default"] || transition3;
  return valueTransition.from;
}
function getOrigin(target, transition3, visualElement2) {
  var _a, _b;
  var origin = {};
  for (var key in target) {
    origin[key] = (_a = getOriginFromTransition(key, transition3)) !== null && _a !== void 0 ? _a : (_b = visualElement2.getValue(key)) === null || _b === void 0 ? void 0 : _b.get();
  }
  return origin;
}

// node_modules/framer-motion/dist/es/render/utils/animation.mjs
function animateVisualElement(visualElement2, definition, options) {
  if (options === void 0) {
    options = {};
  }
  visualElement2.notifyAnimationStart(definition);
  var animation;
  if (Array.isArray(definition)) {
    var animations2 = definition.map(function(variant) {
      return animateVariant(visualElement2, variant, options);
    });
    animation = Promise.all(animations2);
  } else if (typeof definition === "string") {
    animation = animateVariant(visualElement2, definition, options);
  } else {
    var resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement2, definition, options.custom) : definition;
    animation = animateTarget(visualElement2, resolvedDefinition, options);
  }
  return animation.then(function() {
    return visualElement2.notifyAnimationComplete(definition);
  });
}
function animateVariant(visualElement2, variant, options) {
  var _a;
  if (options === void 0) {
    options = {};
  }
  var resolved = resolveVariant(visualElement2, variant, options.custom);
  var _b = (resolved || {}).transition, transition3 = _b === void 0 ? visualElement2.getDefaultTransition() || {} : _b;
  if (options.transitionOverride) {
    transition3 = options.transitionOverride;
  }
  var getAnimation2 = resolved ? function() {
    return animateTarget(visualElement2, resolved, options);
  } : function() {
    return Promise.resolve();
  };
  var getChildAnimations = ((_a = visualElement2.variantChildren) === null || _a === void 0 ? void 0 : _a.size) ? function(forwardDelay) {
    if (forwardDelay === void 0) {
      forwardDelay = 0;
    }
    var _a2 = transition3.delayChildren, delayChildren = _a2 === void 0 ? 0 : _a2, staggerChildren = transition3.staggerChildren, staggerDirection = transition3.staggerDirection;
    return animateChildren(visualElement2, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
  } : function() {
    return Promise.resolve();
  };
  var when = transition3.when;
  if (when) {
    var _c = __read(when === "beforeChildren" ? [getAnimation2, getChildAnimations] : [getChildAnimations, getAnimation2], 2), first = _c[0], last = _c[1];
    return first().then(last);
  } else {
    return Promise.all([getAnimation2(), getChildAnimations(options.delay)]);
  }
}
function animateTarget(visualElement2, definition, _a) {
  var _b;
  var _c = _a === void 0 ? {} : _a, _d = _c.delay, delay = _d === void 0 ? 0 : _d, transitionOverride = _c.transitionOverride, type = _c.type;
  var _e = visualElement2.makeTargetAnimatable(definition), _f = _e.transition, transition3 = _f === void 0 ? visualElement2.getDefaultTransition() : _f, transitionEnd = _e.transitionEnd, target = __rest(_e, ["transition", "transitionEnd"]);
  if (transitionOverride)
    transition3 = transitionOverride;
  var animations2 = [];
  var animationTypeState = type && ((_b = visualElement2.animationState) === null || _b === void 0 ? void 0 : _b.getState()[type]);
  for (var key in target) {
    var value = visualElement2.getValue(key);
    var valueTarget = target[key];
    if (!value || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {
      continue;
    }
    var valueTransition = __assign({ delay }, transition3);
    if (visualElement2.shouldReduceMotion && isTransformProp(key)) {
      valueTransition = __assign(__assign({}, valueTransition), { type: false, delay: 0 });
    }
    var animation = startAnimation(key, value, valueTarget, valueTransition);
    animations2.push(animation);
  }
  return Promise.all(animations2).then(function() {
    transitionEnd && setTarget(visualElement2, transitionEnd);
  });
}
function animateChildren(visualElement2, variant, delayChildren, staggerChildren, staggerDirection, options) {
  if (delayChildren === void 0) {
    delayChildren = 0;
  }
  if (staggerChildren === void 0) {
    staggerChildren = 0;
  }
  if (staggerDirection === void 0) {
    staggerDirection = 1;
  }
  var animations2 = [];
  var maxStaggerDuration = (visualElement2.variantChildren.size - 1) * staggerChildren;
  var generateStaggerDuration = staggerDirection === 1 ? function(i) {
    if (i === void 0) {
      i = 0;
    }
    return i * staggerChildren;
  } : function(i) {
    if (i === void 0) {
      i = 0;
    }
    return maxStaggerDuration - i * staggerChildren;
  };
  Array.from(visualElement2.variantChildren).sort(sortByTreeOrder).forEach(function(child, i) {
    animations2.push(animateVariant(child, variant, __assign(__assign({}, options), { delay: delayChildren + generateStaggerDuration(i) })).then(function() {
      return child.notifyAnimationComplete(variant);
    }));
  });
  return Promise.all(animations2);
}
function sortByTreeOrder(a2, b2) {
  return a2.sortNodePosition(b2);
}
function shouldBlockAnimation(_a, key) {
  var protectedKeys = _a.protectedKeys, needsAnimating = _a.needsAnimating;
  var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
  needsAnimating[key] = false;
  return shouldBlock;
}

// node_modules/framer-motion/dist/es/render/utils/animation-state.mjs
var variantPriorityOrder = [
  AnimationType.Animate,
  AnimationType.InView,
  AnimationType.Focus,
  AnimationType.Hover,
  AnimationType.Tap,
  AnimationType.Drag,
  AnimationType.Exit
];
var reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder), false).reverse();
var numAnimationTypes = variantPriorityOrder.length;
function animateList(visualElement2) {
  return function(animations2) {
    return Promise.all(animations2.map(function(_a) {
      var animation = _a.animation, options = _a.options;
      return animateVisualElement(visualElement2, animation, options);
    }));
  };
}
function createAnimationState(visualElement2) {
  var animate4 = animateList(visualElement2);
  var state = createState();
  var allAnimatedKeys = {};
  var isInitialRender = true;
  var buildResolvedTypeValues = function(acc, definition) {
    var resolved = resolveVariant(visualElement2, definition);
    if (resolved) {
      resolved.transition;
      var transitionEnd = resolved.transitionEnd, target = __rest(resolved, ["transition", "transitionEnd"]);
      acc = __assign(__assign(__assign({}, acc), target), transitionEnd);
    }
    return acc;
  };
  function isAnimated(key) {
    return allAnimatedKeys[key] !== void 0;
  }
  function setAnimateFunction(makeAnimator) {
    animate4 = makeAnimator(visualElement2);
  }
  function animateChanges(options, changedActiveType) {
    var _a;
    var props = visualElement2.getProps();
    var context = visualElement2.getVariantContext(true) || {};
    var animations2 = [];
    var removedKeys = /* @__PURE__ */ new Set();
    var encounteredKeys = {};
    var removedVariantIndex = Infinity;
    var _loop_1 = function(i2) {
      var type = reversePriorityOrder[i2];
      var typeState = state[type];
      var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];
      var propIsVariant = isVariantLabel(prop);
      var activeDelta = type === changedActiveType ? typeState.isActive : null;
      if (activeDelta === false)
        removedVariantIndex = i2;
      var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
      if (isInherited && isInitialRender && visualElement2.manuallyAnimateOnMount) {
        isInherited = false;
      }
      typeState.protectedKeys = __assign({}, encounteredKeys);
      if (!typeState.isActive && activeDelta === null || !prop && !typeState.prevProp || isAnimationControls(prop) || typeof prop === "boolean") {
        return "continue";
      }
      var variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);
      var shouldAnimateType = variantDidChange || type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || i2 > removedVariantIndex && propIsVariant;
      var definitionList = Array.isArray(prop) ? prop : [prop];
      var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
      if (activeDelta === false)
        resolvedValues = {};
      var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;
      var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);
      var markToAnimate = function(key2) {
        shouldAnimateType = true;
        removedKeys.delete(key2);
        typeState.needsAnimating[key2] = true;
      };
      for (var key in allKeys) {
        var next = resolvedValues[key];
        var prev = prevResolvedValues[key];
        if (encounteredKeys.hasOwnProperty(key))
          continue;
        if (next !== prev) {
          if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {
            if (!shallowCompare(next, prev) || variantDidChange) {
              markToAnimate(key);
            } else {
              typeState.protectedKeys[key] = true;
            }
          } else if (next !== void 0) {
            markToAnimate(key);
          } else {
            removedKeys.add(key);
          }
        } else if (next !== void 0 && removedKeys.has(key)) {
          markToAnimate(key);
        } else {
          typeState.protectedKeys[key] = true;
        }
      }
      typeState.prevProp = prop;
      typeState.prevResolvedValues = resolvedValues;
      if (typeState.isActive) {
        encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);
      }
      if (isInitialRender && visualElement2.blockInitialAnimation) {
        shouldAnimateType = false;
      }
      if (shouldAnimateType && !isInherited) {
        animations2.push.apply(animations2, __spreadArray([], __read(definitionList.map(function(animation) {
          return {
            animation,
            options: __assign({ type }, options)
          };
        })), false));
      }
    };
    for (var i = 0; i < numAnimationTypes; i++) {
      _loop_1(i);
    }
    allAnimatedKeys = __assign({}, encounteredKeys);
    if (removedKeys.size) {
      var fallbackAnimation_1 = {};
      removedKeys.forEach(function(key) {
        var fallbackTarget = visualElement2.getBaseTarget(key);
        if (fallbackTarget !== void 0) {
          fallbackAnimation_1[key] = fallbackTarget;
        }
      });
      animations2.push({ animation: fallbackAnimation_1 });
    }
    var shouldAnimate = Boolean(animations2.length);
    if (isInitialRender && props.initial === false && !visualElement2.manuallyAnimateOnMount) {
      shouldAnimate = false;
    }
    isInitialRender = false;
    return shouldAnimate ? animate4(animations2) : Promise.resolve();
  }
  function setActive(type, isActive, options) {
    var _a;
    if (state[type].isActive === isActive)
      return Promise.resolve();
    (_a = visualElement2.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function(child) {
      var _a2;
      return (_a2 = child.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(type, isActive);
    });
    state[type].isActive = isActive;
    var animations2 = animateChanges(options, type);
    for (var key in state) {
      state[key].protectedKeys = {};
    }
    return animations2;
  }
  return {
    isAnimated,
    animateChanges,
    setActive,
    setAnimateFunction,
    getState: function() {
      return state;
    }
  };
}
function checkVariantsDidChange(prev, next) {
  if (typeof next === "string") {
    return next !== prev;
  } else if (isVariantLabels(next)) {
    return !shallowCompare(next, prev);
  }
  return false;
}
function createTypeState(isActive) {
  if (isActive === void 0) {
    isActive = false;
  }
  return {
    isActive,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {}
  };
}
function createState() {
  var _a;
  return _a = {}, _a[AnimationType.Animate] = createTypeState(true), _a[AnimationType.InView] = createTypeState(), _a[AnimationType.Hover] = createTypeState(), _a[AnimationType.Tap] = createTypeState(), _a[AnimationType.Drag] = createTypeState(), _a[AnimationType.Focus] = createTypeState(), _a[AnimationType.Exit] = createTypeState(), _a;
}

// node_modules/framer-motion/dist/es/motion/features/animations.mjs
var animations = {
  animation: makeRenderlessComponent(function(_a) {
    var visualElement2 = _a.visualElement, animate4 = _a.animate;
    visualElement2.animationState || (visualElement2.animationState = createAnimationState(visualElement2));
    if (isAnimationControls(animate4)) {
      (0, import_react28.useEffect)(function() {
        return animate4.subscribe(visualElement2);
      }, [animate4]);
    }
  }),
  exit: makeRenderlessComponent(function(props) {
    var custom = props.custom, visualElement2 = props.visualElement;
    var _a = __read(usePresence(), 2), isPresent2 = _a[0], safeToRemove = _a[1];
    var presenceContext = (0, import_react28.useContext)(PresenceContext);
    (0, import_react28.useEffect)(function() {
      var _a2, _b;
      visualElement2.isPresent = isPresent2;
      var animation = (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Exit, !isPresent2, { custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom });
      !isPresent2 && (animation === null || animation === void 0 ? void 0 : animation.then(safeToRemove));
    }, [isPresent2]);
  })
};

// node_modules/framer-motion/dist/es/gestures/drag/use-drag.mjs
var import_react29 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/gestures/PanSession.mjs
var PanSession = function() {
  function PanSession2(event, handlers2, _a) {
    var _this = this;
    var _b = _a === void 0 ? {} : _a, transformPagePoint = _b.transformPagePoint;
    this.startEvent = null;
    this.lastMoveEvent = null;
    this.lastMoveEventInfo = null;
    this.handlers = {};
    this.updatePoint = function() {
      if (!(_this.lastMoveEvent && _this.lastMoveEventInfo))
        return;
      var info2 = getPanInfo(_this.lastMoveEventInfo, _this.history);
      var isPanStarted = _this.startEvent !== null;
      var isDistancePastThreshold = distance(info2.offset, { x: 0, y: 0 }) >= 3;
      if (!isPanStarted && !isDistancePastThreshold)
        return;
      var point2 = info2.point;
      var timestamp2 = getFrameData2().timestamp;
      _this.history.push(__assign(__assign({}, point2), { timestamp: timestamp2 }));
      var _a2 = _this.handlers, onStart = _a2.onStart, onMove = _a2.onMove;
      if (!isPanStarted) {
        onStart && onStart(_this.lastMoveEvent, info2);
        _this.startEvent = _this.lastMoveEvent;
      }
      onMove && onMove(_this.lastMoveEvent, info2);
    };
    this.handlePointerMove = function(event2, info2) {
      _this.lastMoveEvent = event2;
      _this.lastMoveEventInfo = transformPoint(info2, _this.transformPagePoint);
      if (isMouseEvent(event2) && event2.buttons === 0) {
        _this.handlePointerUp(event2, info2);
        return;
      }
      es_default2.update(_this.updatePoint, true);
    };
    this.handlePointerUp = function(event2, info2) {
      _this.end();
      var _a2 = _this.handlers, onEnd = _a2.onEnd, onSessionEnd = _a2.onSessionEnd;
      var panInfo = getPanInfo(transformPoint(info2, _this.transformPagePoint), _this.history);
      if (_this.startEvent && onEnd) {
        onEnd(event2, panInfo);
      }
      onSessionEnd && onSessionEnd(event2, panInfo);
    };
    if (isTouchEvent(event) && event.touches.length > 1)
      return;
    this.handlers = handlers2;
    this.transformPagePoint = transformPagePoint;
    var info = extractEventInfo(event);
    var initialInfo = transformPoint(info, this.transformPagePoint);
    var point = initialInfo.point;
    var timestamp = getFrameData2().timestamp;
    this.history = [__assign(__assign({}, point), { timestamp })];
    var onSessionStart = handlers2.onSessionStart;
    onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
    this.removeListeners = pipe2(addPointerEvent(window, "pointermove", this.handlePointerMove), addPointerEvent(window, "pointerup", this.handlePointerUp), addPointerEvent(window, "pointercancel", this.handlePointerUp));
  }
  PanSession2.prototype.updateHandlers = function(handlers2) {
    this.handlers = handlers2;
  };
  PanSession2.prototype.end = function() {
    this.removeListeners && this.removeListeners();
    cancelSync2.update(this.updatePoint);
  };
  return PanSession2;
}();
function transformPoint(info, transformPagePoint) {
  return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
}
function subtractPoint(a2, b2) {
  return { x: a2.x - b2.x, y: a2.y - b2.y };
}
function getPanInfo(_a, history) {
  var point = _a.point;
  return {
    point,
    delta: subtractPoint(point, lastDevicePoint(history)),
    offset: subtractPoint(point, startDevicePoint(history)),
    velocity: getVelocity2(history, 0.1)
  };
}
function startDevicePoint(history) {
  return history[0];
}
function lastDevicePoint(history) {
  return history[history.length - 1];
}
function getVelocity2(history, timeDelta) {
  if (history.length < 2) {
    return { x: 0, y: 0 };
  }
  var i = history.length - 1;
  var timestampedPoint = null;
  var lastPoint = lastDevicePoint(history);
  while (i >= 0) {
    timestampedPoint = history[i];
    if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {
      break;
    }
    i--;
  }
  if (!timestampedPoint) {
    return { x: 0, y: 0 };
  }
  var time2 = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
  if (time2 === 0) {
    return { x: 0, y: 0 };
  }
  var currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time2,
    y: (lastPoint.y - timestampedPoint.y) / time2
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}

// node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs
function calcLength(axis) {
  return axis.max - axis.min;
}
function isNear(value, target, maxDistance) {
  if (target === void 0) {
    target = 0;
  }
  if (maxDistance === void 0) {
    maxDistance = 0.01;
  }
  return distance(value, target) < maxDistance;
}
function calcAxisDelta(delta, source, target, origin) {
  if (origin === void 0) {
    origin = 0.5;
  }
  delta.origin = origin;
  delta.originPoint = mix(source.min, source.max, delta.origin);
  delta.scale = calcLength(target) / calcLength(source);
  if (isNear(delta.scale, 1, 1e-4) || isNaN(delta.scale))
    delta.scale = 1;
  delta.translate = mix(target.min, target.max, delta.origin) - delta.originPoint;
  if (isNear(delta.translate) || isNaN(delta.translate))
    delta.translate = 0;
}
function calcBoxDelta(delta, source, target, origin) {
  calcAxisDelta(delta.x, source.x, target.x, origin === null || origin === void 0 ? void 0 : origin.originX);
  calcAxisDelta(delta.y, source.y, target.y, origin === null || origin === void 0 ? void 0 : origin.originY);
}
function calcRelativeAxis(target, relative, parent) {
  target.min = parent.min + relative.min;
  target.max = target.min + calcLength(relative);
}
function calcRelativeBox(target, relative, parent) {
  calcRelativeAxis(target.x, relative.x, parent.x);
  calcRelativeAxis(target.y, relative.y, parent.y);
}
function calcRelativeAxisPosition(target, layout2, parent) {
  target.min = layout2.min - parent.min;
  target.max = target.min + calcLength(layout2);
}
function calcRelativePosition(target, layout2, parent) {
  calcRelativeAxisPosition(target.x, layout2.x, parent.x);
  calcRelativeAxisPosition(target.y, layout2.y, parent.y);
}

// node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs
function applyConstraints(point, _a, elastic) {
  var min2 = _a.min, max2 = _a.max;
  if (min2 !== void 0 && point < min2) {
    point = elastic ? mix(min2, point, elastic.min) : Math.max(point, min2);
  } else if (max2 !== void 0 && point > max2) {
    point = elastic ? mix(max2, point, elastic.max) : Math.min(point, max2);
  }
  return point;
}
function calcRelativeAxisConstraints(axis, min2, max2) {
  return {
    min: min2 !== void 0 ? axis.min + min2 : void 0,
    max: max2 !== void 0 ? axis.max + max2 - (axis.max - axis.min) : void 0
  };
}
function calcRelativeConstraints(layoutBox, _a) {
  var top2 = _a.top, left2 = _a.left, bottom2 = _a.bottom, right2 = _a.right;
  return {
    x: calcRelativeAxisConstraints(layoutBox.x, left2, right2),
    y: calcRelativeAxisConstraints(layoutBox.y, top2, bottom2)
  };
}
function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
  var _a;
  var min2 = constraintsAxis.min - layoutAxis.min;
  var max2 = constraintsAxis.max - layoutAxis.max;
  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
    _a = __read([max2, min2], 2), min2 = _a[0], max2 = _a[1];
  }
  return { min: min2, max: max2 };
}
function calcViewportConstraints(layoutBox, constraintsBox) {
  return {
    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
  };
}
function calcOrigin2(source, target) {
  var origin = 0.5;
  var sourceLength = calcLength(source);
  var targetLength = calcLength(target);
  if (targetLength > sourceLength) {
    origin = progress(target.min, target.max - sourceLength, source.min);
  } else if (sourceLength > targetLength) {
    origin = progress(source.min, source.max - targetLength, target.min);
  }
  return clamp2(0, 1, origin);
}
function rebaseAxisConstraints(layout2, constraints) {
  var relativeConstraints = {};
  if (constraints.min !== void 0) {
    relativeConstraints.min = constraints.min - layout2.min;
  }
  if (constraints.max !== void 0) {
    relativeConstraints.max = constraints.max - layout2.min;
  }
  return relativeConstraints;
}
var defaultElastic = 0.35;
function resolveDragElastic(dragElastic) {
  if (dragElastic === void 0) {
    dragElastic = defaultElastic;
  }
  if (dragElastic === false) {
    dragElastic = 0;
  } else if (dragElastic === true) {
    dragElastic = defaultElastic;
  }
  return {
    x: resolveAxisElastic(dragElastic, "left", "right"),
    y: resolveAxisElastic(dragElastic, "top", "bottom")
  };
}
function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
  return {
    min: resolvePointElastic(dragElastic, minLabel),
    max: resolvePointElastic(dragElastic, maxLabel)
  };
}
function resolvePointElastic(dragElastic, label) {
  var _a;
  return typeof dragElastic === "number" ? dragElastic : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;
}

// node_modules/framer-motion/dist/es/projection/geometry/models.mjs
var createAxisDelta = function() {
  return {
    translate: 0,
    scale: 1,
    origin: 0,
    originPoint: 0
  };
};
var createDelta = function() {
  return {
    x: createAxisDelta(),
    y: createAxisDelta()
  };
};
var createAxis = function() {
  return { min: 0, max: 0 };
};
var createBox = function() {
  return {
    x: createAxis(),
    y: createAxis()
  };
};

// node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs
function eachAxis(callback) {
  return [callback("x"), callback("y")];
}

// node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs
function convertBoundingBoxToBox(_a) {
  var top2 = _a.top, left2 = _a.left, right2 = _a.right, bottom2 = _a.bottom;
  return {
    x: { min: left2, max: right2 },
    y: { min: top2, max: bottom2 }
  };
}
function convertBoxToBoundingBox(_a) {
  var x = _a.x, y = _a.y;
  return { top: y.min, right: x.max, bottom: y.max, left: x.min };
}
function transformBoxPoints(point, transformPoint2) {
  if (!transformPoint2)
    return point;
  var topLeft = transformPoint2({ x: point.left, y: point.top });
  var bottomRight = transformPoint2({ x: point.right, y: point.bottom });
  return {
    top: topLeft.y,
    left: topLeft.x,
    bottom: bottomRight.y,
    right: bottomRight.x
  };
}

// node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs
function isIdentityScale(scale3) {
  return scale3 === void 0 || scale3 === 1;
}
function hasScale(_a) {
  var scale3 = _a.scale, scaleX = _a.scaleX, scaleY = _a.scaleY;
  return !isIdentityScale(scale3) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
}
function hasTransform(values) {
  return hasScale(values) || hasTranslate(values.x) || hasTranslate(values.y) || values.z || values.rotate || values.rotateX || values.rotateY;
}
function hasTranslate(value) {
  return value && value !== "0%";
}

// node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs
function scalePoint(point, scale3, originPoint) {
  var distanceFromOrigin = point - originPoint;
  var scaled = scale3 * distanceFromOrigin;
  return originPoint + scaled;
}
function applyPointDelta(point, translate, scale3, originPoint, boxScale) {
  if (boxScale !== void 0) {
    point = scalePoint(point, boxScale, originPoint);
  }
  return scalePoint(point, scale3, originPoint) + translate;
}
function applyAxisDelta(axis, translate, scale3, originPoint, boxScale) {
  if (translate === void 0) {
    translate = 0;
  }
  if (scale3 === void 0) {
    scale3 = 1;
  }
  axis.min = applyPointDelta(axis.min, translate, scale3, originPoint, boxScale);
  axis.max = applyPointDelta(axis.max, translate, scale3, originPoint, boxScale);
}
function applyBoxDelta(box, _a) {
  var x = _a.x, y = _a.y;
  applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
  applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
}
function applyTreeDeltas(box, treeScale, treePath, isSharedTransition) {
  var _a, _b;
  if (isSharedTransition === void 0) {
    isSharedTransition = false;
  }
  var treeLength = treePath.length;
  if (!treeLength)
    return;
  treeScale.x = treeScale.y = 1;
  var node2;
  var delta;
  for (var i = 0; i < treeLength; i++) {
    node2 = treePath[i];
    delta = node2.projectionDelta;
    if (((_b = (_a = node2.instance) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.display) === "contents")
      continue;
    if (isSharedTransition && node2.options.layoutScroll && node2.scroll && node2 !== node2.root) {
      transformBox(box, { x: -node2.scroll.x, y: -node2.scroll.y });
    }
    if (delta) {
      treeScale.x *= delta.x.scale;
      treeScale.y *= delta.y.scale;
      applyBoxDelta(box, delta);
    }
    if (isSharedTransition && hasTransform(node2.latestValues)) {
      transformBox(box, node2.latestValues);
    }
  }
}
function translateAxis(axis, distance2) {
  axis.min = axis.min + distance2;
  axis.max = axis.max + distance2;
}
function transformAxis(axis, transforms3, _a) {
  var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
  var axisOrigin = transforms3[originKey] !== void 0 ? transforms3[originKey] : 0.5;
  var originPoint = mix(axis.min, axis.max, axisOrigin);
  applyAxisDelta(axis, transforms3[key], transforms3[scaleKey], originPoint, transforms3.scale);
}
var xKeys = ["x", "scaleX", "originX"];
var yKeys = ["y", "scaleY", "originY"];
function transformBox(box, transform3) {
  transformAxis(box.x, transform3, xKeys);
  transformAxis(box.y, transform3, yKeys);
}

// node_modules/framer-motion/dist/es/projection/utils/measure.mjs
function measureViewportBox(instance, transformPoint2) {
  return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint2));
}
function measurePageBox(element, rootProjectionNode2, transformPagePoint) {
  var viewportBox = measureViewportBox(element, transformPagePoint);
  var scroll3 = rootProjectionNode2.scroll;
  if (scroll3) {
    translateAxis(viewportBox.x, scroll3.x);
    translateAxis(viewportBox.y, scroll3.y);
  }
  return viewportBox;
}

// node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs
var elementDragControls = /* @__PURE__ */ new WeakMap();
var VisualElementDragControls = function() {
  function VisualElementDragControls2(visualElement2) {
    this.openGlobalLock = null;
    this.isDragging = false;
    this.currentDirection = null;
    this.originPoint = { x: 0, y: 0 };
    this.constraints = false;
    this.hasMutatedConstraints = false;
    this.elastic = createBox();
    this.visualElement = visualElement2;
  }
  VisualElementDragControls2.prototype.start = function(originEvent, _a) {
    var _this = this;
    var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c;
    if (this.visualElement.isPresent === false)
      return;
    var onSessionStart = function(event) {
      _this.stopAnimation();
      if (snapToCursor) {
        _this.snapToCursor(extractEventInfo(event, "page").point);
      }
    };
    var onStart = function(event, info) {
      var _a2;
      var _b2 = _this.getProps(), drag2 = _b2.drag, dragPropagation = _b2.dragPropagation, onDragStart = _b2.onDragStart;
      if (drag2 && !dragPropagation) {
        if (_this.openGlobalLock)
          _this.openGlobalLock();
        _this.openGlobalLock = getGlobalLock(drag2);
        if (!_this.openGlobalLock)
          return;
      }
      _this.isDragging = true;
      _this.currentDirection = null;
      _this.resolveConstraints();
      if (_this.visualElement.projection) {
        _this.visualElement.projection.isAnimationBlocked = true;
        _this.visualElement.projection.target = void 0;
      }
      eachAxis(function(axis) {
        var _a3, _b3;
        var current = _this.getAxisMotionValue(axis).get() || 0;
        if (percent.test(current)) {
          var measuredAxis = (_b3 = (_a3 = _this.visualElement.projection) === null || _a3 === void 0 ? void 0 : _a3.layout) === null || _b3 === void 0 ? void 0 : _b3.actual[axis];
          if (measuredAxis) {
            var length_1 = calcLength(measuredAxis);
            current = length_1 * (parseFloat(current) / 100);
          }
        }
        _this.originPoint[axis] = current;
      });
      onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);
      (_a2 = _this.visualElement.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Drag, true);
    };
    var onMove = function(event, info) {
      var _a2 = _this.getProps(), dragPropagation = _a2.dragPropagation, dragDirectionLock = _a2.dragDirectionLock, onDirectionLock = _a2.onDirectionLock, onDrag = _a2.onDrag;
      if (!dragPropagation && !_this.openGlobalLock)
        return;
      var offset2 = info.offset;
      if (dragDirectionLock && _this.currentDirection === null) {
        _this.currentDirection = getCurrentDirection(offset2);
        if (_this.currentDirection !== null) {
          onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(_this.currentDirection);
        }
        return;
      }
      _this.updateAxis("x", info.point, offset2);
      _this.updateAxis("y", info.point, offset2);
      _this.visualElement.syncRender();
      onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);
    };
    var onSessionEnd = function(event, info) {
      return _this.stop(event, info);
    };
    this.panSession = new PanSession(originEvent, {
      onSessionStart,
      onStart,
      onMove,
      onSessionEnd
    }, { transformPagePoint: this.visualElement.getTransformPagePoint() });
  };
  VisualElementDragControls2.prototype.stop = function(event, info) {
    var isDragging = this.isDragging;
    this.cancel();
    if (!isDragging)
      return;
    var velocity = info.velocity;
    this.startAnimation(velocity);
    var onDragEnd = this.getProps().onDragEnd;
    onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);
  };
  VisualElementDragControls2.prototype.cancel = function() {
    var _a, _b;
    this.isDragging = false;
    if (this.visualElement.projection) {
      this.visualElement.projection.isAnimationBlocked = false;
    }
    (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();
    this.panSession = void 0;
    var dragPropagation = this.getProps().dragPropagation;
    if (!dragPropagation && this.openGlobalLock) {
      this.openGlobalLock();
      this.openGlobalLock = null;
    }
    (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);
  };
  VisualElementDragControls2.prototype.updateAxis = function(axis, _point, offset2) {
    var drag2 = this.getProps().drag;
    if (!offset2 || !shouldDrag(axis, drag2, this.currentDirection))
      return;
    var axisValue = this.getAxisMotionValue(axis);
    var next = this.originPoint[axis] + offset2[axis];
    if (this.constraints && this.constraints[axis]) {
      next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);
    }
    axisValue.set(next);
  };
  VisualElementDragControls2.prototype.resolveConstraints = function() {
    var _this = this;
    var _a = this.getProps(), dragConstraints = _a.dragConstraints, dragElastic = _a.dragElastic;
    var layout2 = (this.visualElement.projection || {}).layout;
    var prevConstraints = this.constraints;
    if (dragConstraints && isRefObject(dragConstraints)) {
      if (!this.constraints) {
        this.constraints = this.resolveRefConstraints();
      }
    } else {
      if (dragConstraints && layout2) {
        this.constraints = calcRelativeConstraints(layout2.actual, dragConstraints);
      } else {
        this.constraints = false;
      }
    }
    this.elastic = resolveDragElastic(dragElastic);
    if (prevConstraints !== this.constraints && layout2 && this.constraints && !this.hasMutatedConstraints) {
      eachAxis(function(axis) {
        if (_this.getAxisMotionValue(axis)) {
          _this.constraints[axis] = rebaseAxisConstraints(layout2.actual[axis], _this.constraints[axis]);
        }
      });
    }
  };
  VisualElementDragControls2.prototype.resolveRefConstraints = function() {
    var _a = this.getProps(), constraints = _a.dragConstraints, onMeasureDragConstraints = _a.onMeasureDragConstraints;
    if (!constraints || !isRefObject(constraints))
      return false;
    var constraintsElement = constraints.current;
    invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
    var projection = this.visualElement.projection;
    if (!projection || !projection.layout)
      return false;
    var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
    var measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);
    if (onMeasureDragConstraints) {
      var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
      this.hasMutatedConstraints = !!userConstraints;
      if (userConstraints) {
        measuredConstraints = convertBoundingBoxToBox(userConstraints);
      }
    }
    return measuredConstraints;
  };
  VisualElementDragControls2.prototype.startAnimation = function(velocity) {
    var _this = this;
    var _a = this.getProps(), drag2 = _a.drag, dragMomentum = _a.dragMomentum, dragElastic = _a.dragElastic, dragTransition = _a.dragTransition, dragSnapToOrigin = _a.dragSnapToOrigin, onDragTransitionEnd = _a.onDragTransitionEnd;
    var constraints = this.constraints || {};
    var momentumAnimations = eachAxis(function(axis) {
      var _a2;
      if (!shouldDrag(axis, drag2, _this.currentDirection)) {
        return;
      }
      var transition3 = (_a2 = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a2 !== void 0 ? _a2 : {};
      if (dragSnapToOrigin)
        transition3 = { min: 0, max: 0 };
      var bounceStiffness = dragElastic ? 200 : 1e6;
      var bounceDamping = dragElastic ? 40 : 1e7;
      var inertia2 = __assign(__assign({ type: "inertia", velocity: dragMomentum ? velocity[axis] : 0, bounceStiffness, bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition3);
      return _this.startAxisValueAnimation(axis, inertia2);
    });
    return Promise.all(momentumAnimations).then(onDragTransitionEnd);
  };
  VisualElementDragControls2.prototype.startAxisValueAnimation = function(axis, transition3) {
    var axisValue = this.getAxisMotionValue(axis);
    return startAnimation(axis, axisValue, 0, transition3);
  };
  VisualElementDragControls2.prototype.stopAnimation = function() {
    var _this = this;
    eachAxis(function(axis) {
      return _this.getAxisMotionValue(axis).stop();
    });
  };
  VisualElementDragControls2.prototype.getAxisMotionValue = function(axis) {
    var _a, _b;
    var dragKey = "_drag" + axis.toUpperCase();
    var externalMotionValue = this.visualElement.getProps()[dragKey];
    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);
  };
  VisualElementDragControls2.prototype.snapToCursor = function(point) {
    var _this = this;
    eachAxis(function(axis) {
      var drag2 = _this.getProps().drag;
      if (!shouldDrag(axis, drag2, _this.currentDirection))
        return;
      var projection = _this.visualElement.projection;
      var axisValue = _this.getAxisMotionValue(axis);
      if (projection && projection.layout) {
        var _a = projection.layout.actual[axis], min2 = _a.min, max2 = _a.max;
        axisValue.set(point[axis] - mix(min2, max2, 0.5));
      }
    });
  };
  VisualElementDragControls2.prototype.scalePositionWithinConstraints = function() {
    var _this = this;
    var _a;
    var _b = this.getProps(), drag2 = _b.drag, dragConstraints = _b.dragConstraints;
    var projection = this.visualElement.projection;
    if (!isRefObject(dragConstraints) || !projection || !this.constraints)
      return;
    this.stopAnimation();
    var boxProgress = { x: 0, y: 0 };
    eachAxis(function(axis) {
      var axisValue = _this.getAxisMotionValue(axis);
      if (axisValue) {
        var latest = axisValue.get();
        boxProgress[axis] = calcOrigin2({ min: latest, max: latest }, _this.constraints[axis]);
      }
    });
    var transformTemplate = this.visualElement.getProps().transformTemplate;
    this.visualElement.getInstance().style.transform = transformTemplate ? transformTemplate({}, "") : "none";
    (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();
    projection.updateLayout();
    this.resolveConstraints();
    eachAxis(function(axis) {
      if (!shouldDrag(axis, drag2, null))
        return;
      var axisValue = _this.getAxisMotionValue(axis);
      var _a2 = _this.constraints[axis], min2 = _a2.min, max2 = _a2.max;
      axisValue.set(mix(min2, max2, boxProgress[axis]));
    });
  };
  VisualElementDragControls2.prototype.addListeners = function() {
    var _this = this;
    var _a;
    elementDragControls.set(this.visualElement, this);
    var element = this.visualElement.getInstance();
    var stopPointerListener = addPointerEvent(element, "pointerdown", function(event) {
      var _a2 = _this.getProps(), drag2 = _a2.drag, _b = _a2.dragListener, dragListener = _b === void 0 ? true : _b;
      drag2 && dragListener && _this.start(event);
    });
    var measureDragConstraints = function() {
      var dragConstraints = _this.getProps().dragConstraints;
      if (isRefObject(dragConstraints)) {
        _this.constraints = _this.resolveRefConstraints();
      }
    };
    var projection = this.visualElement.projection;
    var stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
    if (projection && !projection.layout) {
      (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();
      projection.updateLayout();
    }
    measureDragConstraints();
    var stopResizeListener = addDomEvent(window, "resize", function() {
      return _this.scalePositionWithinConstraints();
    });
    projection.addEventListener("didUpdate", function(_a2) {
      var delta = _a2.delta, hasLayoutChanged = _a2.hasLayoutChanged;
      if (_this.isDragging && hasLayoutChanged) {
        eachAxis(function(axis) {
          var motionValue2 = _this.getAxisMotionValue(axis);
          if (!motionValue2)
            return;
          _this.originPoint[axis] += delta[axis].translate;
          motionValue2.set(motionValue2.get() + delta[axis].translate);
        });
        _this.visualElement.syncRender();
      }
    });
    return function() {
      stopResizeListener();
      stopPointerListener();
      stopMeasureLayoutListener();
    };
  };
  VisualElementDragControls2.prototype.getProps = function() {
    var props = this.visualElement.getProps();
    var _a = props.drag, drag2 = _a === void 0 ? false : _a, _b = props.dragDirectionLock, dragDirectionLock = _b === void 0 ? false : _b, _c = props.dragPropagation, dragPropagation = _c === void 0 ? false : _c, _d = props.dragConstraints, dragConstraints = _d === void 0 ? false : _d, _e = props.dragElastic, dragElastic = _e === void 0 ? defaultElastic : _e, _f = props.dragMomentum, dragMomentum = _f === void 0 ? true : _f;
    return __assign(__assign({}, props), { drag: drag2, dragDirectionLock, dragPropagation, dragConstraints, dragElastic, dragMomentum });
  };
  return VisualElementDragControls2;
}();
function shouldDrag(direction2, drag2, currentDirection) {
  return (drag2 === true || drag2 === direction2) && (currentDirection === null || currentDirection === direction2);
}
function getCurrentDirection(offset2, lockThreshold) {
  if (lockThreshold === void 0) {
    lockThreshold = 10;
  }
  var direction2 = null;
  if (Math.abs(offset2.y) > lockThreshold) {
    direction2 = "y";
  } else if (Math.abs(offset2.x) > lockThreshold) {
    direction2 = "x";
  }
  return direction2;
}

// node_modules/framer-motion/dist/es/gestures/drag/use-drag.mjs
function useDrag(props) {
  var groupDragControls = props.dragControls, visualElement2 = props.visualElement;
  var dragControls = useConstant(function() {
    return new VisualElementDragControls(visualElement2);
  });
  (0, import_react29.useEffect)(function() {
    return groupDragControls && groupDragControls.subscribe(dragControls);
  }, [dragControls, groupDragControls]);
  (0, import_react29.useEffect)(function() {
    return dragControls.addListeners();
  }, [dragControls]);
}

// node_modules/framer-motion/dist/es/gestures/use-pan-gesture.mjs
var import_react30 = __toESM(require_react(), 1);
function usePanGesture2(_a) {
  var onPan = _a.onPan, onPanStart = _a.onPanStart, onPanEnd = _a.onPanEnd, onPanSessionStart = _a.onPanSessionStart, visualElement2 = _a.visualElement;
  var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;
  var panSession = (0, import_react30.useRef)(null);
  var transformPagePoint = (0, import_react30.useContext)(MotionConfigContext).transformPagePoint;
  var handlers2 = {
    onSessionStart: onPanSessionStart,
    onStart: onPanStart,
    onMove: onPan,
    onEnd: function(event, info) {
      panSession.current = null;
      onPanEnd && onPanEnd(event, info);
    }
  };
  (0, import_react30.useEffect)(function() {
    if (panSession.current !== null) {
      panSession.current.updateHandlers(handlers2);
    }
  });
  function onPointerDown(event) {
    panSession.current = new PanSession(event, handlers2, {
      transformPagePoint
    });
  }
  usePointerEvent2(visualElement2, "pointerdown", hasPanEvents && onPointerDown);
  useUnmountEffect2(function() {
    return panSession.current && panSession.current.end();
  });
}

// node_modules/framer-motion/dist/es/motion/features/drag.mjs
var drag = {
  pan: makeRenderlessComponent(usePanGesture2),
  drag: makeRenderlessComponent(useDrag)
};

// node_modules/framer-motion/dist/es/render/utils/lifecycles.mjs
var names2 = [
  "LayoutMeasure",
  "BeforeLayoutMeasure",
  "LayoutUpdate",
  "ViewportBoxUpdate",
  "Update",
  "Render",
  "AnimationComplete",
  "LayoutAnimationComplete",
  "AnimationStart",
  "LayoutAnimationStart",
  "SetAxisTarget",
  "Unmount"
];
function createLifecycles() {
  var managers = names2.map(function() {
    return new SubscriptionManager();
  });
  var propSubscriptions = {};
  var lifecycles = {
    clearAllListeners: function() {
      return managers.forEach(function(manager2) {
        return manager2.clear();
      });
    },
    updatePropListeners: function(props) {
      names2.forEach(function(name) {
        var _a;
        var on = "on" + name;
        var propListener = props[on];
        (_a = propSubscriptions[name]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions);
        if (propListener) {
          propSubscriptions[name] = lifecycles[on](propListener);
        }
      });
    }
  };
  managers.forEach(function(manager2, i) {
    lifecycles["on" + names2[i]] = function(handler) {
      return manager2.add(handler);
    };
    lifecycles["notify" + names2[i]] = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return manager2.notify.apply(manager2, __spreadArray([], __read(args), false));
    };
  });
  return lifecycles;
}

// node_modules/framer-motion/dist/es/render/utils/motion-values.mjs
function updateMotionValuesFromProps(element, next, prev) {
  var _a;
  for (var key in next) {
    var nextValue = next[key];
    var prevValue = prev[key];
    if (isMotionValue(nextValue)) {
      element.addValue(key, nextValue);
      if (true) {
        warnOnce(nextValue.version === "6.5.1", "Attempting to mix Framer Motion versions ".concat(nextValue.version, " with 6.5.1 may not work as expected."));
      }
    } else if (isMotionValue(prevValue)) {
      element.addValue(key, motionValue(nextValue));
    } else if (prevValue !== nextValue) {
      if (element.hasValue(key)) {
        var existingValue = element.getValue(key);
        !existingValue.hasAnimated && existingValue.set(nextValue);
      } else {
        element.addValue(key, motionValue((_a = element.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));
      }
    }
  }
  for (var key in prev) {
    if (next[key] === void 0)
      element.removeValue(key);
  }
  return next;
}

// node_modules/framer-motion/dist/es/render/index.mjs
var visualElement = function(_a) {
  var _b = _a.treeType, treeType = _b === void 0 ? "" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox2 = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps3 = _a.scrapeMotionValuesFromProps;
  return function(_a2, options) {
    var parent = _a2.parent, props = _a2.props, presenceId = _a2.presenceId, blockInitialAnimation = _a2.blockInitialAnimation, visualState = _a2.visualState, shouldReduceMotion = _a2.shouldReduceMotion;
    if (options === void 0) {
      options = {};
    }
    var isMounted = false;
    var latestValues = visualState.latestValues, renderState = visualState.renderState;
    var instance;
    var lifecycles = createLifecycles();
    var values = /* @__PURE__ */ new Map();
    var valueSubscriptions = /* @__PURE__ */ new Map();
    var prevMotionValues = {};
    var baseTarget = __assign({}, latestValues);
    var removeFromVariantTree;
    function render() {
      if (!instance || !isMounted)
        return;
      triggerBuild();
      renderInstance(instance, renderState, props.style, element.projection);
    }
    function triggerBuild() {
      build(element, renderState, latestValues, options, props);
    }
    function update() {
      lifecycles.notifyUpdate(latestValues);
    }
    function bindToMotionValue(key2, value2) {
      var removeOnChange = value2.onChange(function(latestValue) {
        latestValues[key2] = latestValue;
        props.onUpdate && es_default2.update(update, false, true);
      });
      var removeOnRenderRequest = value2.onRenderRequest(element.scheduleRender);
      valueSubscriptions.set(key2, function() {
        removeOnChange();
        removeOnRenderRequest();
      });
    }
    var initialMotionValues = scrapeMotionValuesFromProps3(props);
    for (var key in initialMotionValues) {
      var value = initialMotionValues[key];
      if (latestValues[key] !== void 0 && isMotionValue(value)) {
        value.set(latestValues[key], false);
      }
    }
    var isControllingVariants = checkIfControllingVariants(props);
    var isVariantNode = checkIfVariantNode(props);
    var element = __assign(__assign({
      treeType,
      current: null,
      depth: parent ? parent.depth + 1 : 0,
      parent,
      children: /* @__PURE__ */ new Set(),
      presenceId,
      shouldReduceMotion,
      variantChildren: isVariantNode ? /* @__PURE__ */ new Set() : void 0,
      isVisible: void 0,
      manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),
      blockInitialAnimation,
      isMounted: function() {
        return Boolean(instance);
      },
      mount: function(newInstance) {
        isMounted = true;
        instance = element.current = newInstance;
        if (element.projection) {
          element.projection.mount(newInstance);
        }
        if (isVariantNode && parent && !isControllingVariants) {
          removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);
        }
        values.forEach(function(value2, key2) {
          return bindToMotionValue(key2, value2);
        });
        parent === null || parent === void 0 ? void 0 : parent.children.add(element);
        element.setProps(props);
      },
      unmount: function() {
        var _a3;
        (_a3 = element.projection) === null || _a3 === void 0 ? void 0 : _a3.unmount();
        cancelSync2.update(update);
        cancelSync2.render(render);
        valueSubscriptions.forEach(function(remove2) {
          return remove2();
        });
        removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();
        parent === null || parent === void 0 ? void 0 : parent.children.delete(element);
        lifecycles.clearAllListeners();
        instance = void 0;
        isMounted = false;
      },
      addVariantChild: function(child) {
        var _a3;
        var closestVariantNode = element.getClosestVariantNode();
        if (closestVariantNode) {
          (_a3 = closestVariantNode.variantChildren) === null || _a3 === void 0 ? void 0 : _a3.add(child);
          return function() {
            return closestVariantNode.variantChildren.delete(child);
          };
        }
      },
      sortNodePosition: function(other) {
        if (!sortNodePosition || treeType !== other.treeType)
          return 0;
        return sortNodePosition(element.getInstance(), other.getInstance());
      },
      getClosestVariantNode: function() {
        return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();
      },
      getLayoutId: function() {
        return props.layoutId;
      },
      getInstance: function() {
        return instance;
      },
      getStaticValue: function(key2) {
        return latestValues[key2];
      },
      setStaticValue: function(key2, value2) {
        return latestValues[key2] = value2;
      },
      getLatestValues: function() {
        return latestValues;
      },
      setVisibility: function(visibility) {
        if (element.isVisible === visibility)
          return;
        element.isVisible = visibility;
        element.scheduleRender();
      },
      makeTargetAnimatable: function(target, canMutate) {
        if (canMutate === void 0) {
          canMutate = true;
        }
        return makeTargetAnimatable(element, target, props, canMutate);
      },
      measureViewportBox: function() {
        return measureViewportBox2(instance, props);
      },
      addValue: function(key2, value2) {
        if (element.hasValue(key2))
          element.removeValue(key2);
        values.set(key2, value2);
        latestValues[key2] = value2.get();
        bindToMotionValue(key2, value2);
      },
      removeValue: function(key2) {
        var _a3;
        values.delete(key2);
        (_a3 = valueSubscriptions.get(key2)) === null || _a3 === void 0 ? void 0 : _a3();
        valueSubscriptions.delete(key2);
        delete latestValues[key2];
        removeValueFromRenderState(key2, renderState);
      },
      hasValue: function(key2) {
        return values.has(key2);
      },
      getValue: function(key2, defaultValue) {
        var value2 = values.get(key2);
        if (value2 === void 0 && defaultValue !== void 0) {
          value2 = motionValue(defaultValue);
          element.addValue(key2, value2);
        }
        return value2;
      },
      forEachValue: function(callback) {
        return values.forEach(callback);
      },
      readValue: function(key2) {
        var _a3;
        return (_a3 = latestValues[key2]) !== null && _a3 !== void 0 ? _a3 : readValueFromInstance(instance, key2, options);
      },
      setBaseTarget: function(key2, value2) {
        baseTarget[key2] = value2;
      },
      getBaseTarget: function(key2) {
        if (getBaseTarget) {
          var target = getBaseTarget(props, key2);
          if (target !== void 0 && !isMotionValue(target))
            return target;
        }
        return baseTarget[key2];
      }
    }, lifecycles), {
      build: function() {
        triggerBuild();
        return renderState;
      },
      scheduleRender: function() {
        es_default2.render(render, false, true);
      },
      syncRender: render,
      setProps: function(newProps) {
        if (newProps.transformTemplate || props.transformTemplate) {
          element.scheduleRender();
        }
        props = newProps;
        lifecycles.updatePropListeners(newProps);
        prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps3(props), prevMotionValues);
      },
      getProps: function() {
        return props;
      },
      getVariant: function(name) {
        var _a3;
        return (_a3 = props.variants) === null || _a3 === void 0 ? void 0 : _a3[name];
      },
      getDefaultTransition: function() {
        return props.transition;
      },
      getTransformPagePoint: function() {
        return props.transformPagePoint;
      },
      getVariantContext: function(startAtParent) {
        if (startAtParent === void 0) {
          startAtParent = false;
        }
        if (startAtParent)
          return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();
        if (!isControllingVariants) {
          var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};
          if (props.initial !== void 0) {
            context_1.initial = props.initial;
          }
          return context_1;
        }
        var context = {};
        for (var i = 0; i < numVariantProps; i++) {
          var name_1 = variantProps[i];
          var prop = props[name_1];
          if (isVariantLabel(prop) || prop === false) {
            context[name_1] = prop;
          }
        }
        return context;
      }
    });
    return element;
  };
};
var variantProps = __spreadArray(["initial"], __read(variantPriorityOrder), false);
var numVariantProps = variantProps.length;

// node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs
function isCSSVariable2(value) {
  return typeof value === "string" && value.startsWith("var(--");
}
var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
function parseCSSVariable(current) {
  var match = cssVariableRegex.exec(current);
  if (!match)
    return [,];
  var _a = __read(match, 3), token = _a[1], fallback = _a[2];
  return [token, fallback];
}
var maxDepth = 4;
function getVariableValue(current, element, depth) {
  if (depth === void 0) {
    depth = 1;
  }
  invariant(depth <= maxDepth, 'Max CSS variable fallback depth detected in property "'.concat(current, '". This may indicate a circular fallback dependency.'));
  var _a = __read(parseCSSVariable(current), 2), token = _a[0], fallback = _a[1];
  if (!token)
    return;
  var resolved = window.getComputedStyle(element).getPropertyValue(token);
  if (resolved) {
    return resolved.trim();
  } else if (isCSSVariable2(fallback)) {
    return getVariableValue(fallback, element, depth + 1);
  } else {
    return fallback;
  }
}
function resolveCSSVariables(visualElement2, _a, transitionEnd) {
  var _b;
  var target = __rest(_a, []);
  var element = visualElement2.getInstance();
  if (!(element instanceof Element))
    return { target, transitionEnd };
  if (transitionEnd) {
    transitionEnd = __assign({}, transitionEnd);
  }
  visualElement2.forEachValue(function(value) {
    var current2 = value.get();
    if (!isCSSVariable2(current2))
      return;
    var resolved2 = getVariableValue(current2, element);
    if (resolved2)
      value.set(resolved2);
  });
  for (var key in target) {
    var current = target[key];
    if (!isCSSVariable2(current))
      continue;
    var resolved = getVariableValue(current, element);
    if (!resolved)
      continue;
    target[key] = resolved;
    if (transitionEnd)
      (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : transitionEnd[key] = current;
  }
  return { target, transitionEnd };
}

// node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs
var positionalKeys = /* @__PURE__ */ new Set([
  "width",
  "height",
  "top",
  "left",
  "right",
  "bottom",
  "x",
  "y"
]);
var isPositionalKey = function(key) {
  return positionalKeys.has(key);
};
var hasPositionalKey = function(target) {
  return Object.keys(target).some(isPositionalKey);
};
var setAndResetVelocity = function(value, to) {
  value.set(to, false);
  value.set(to);
};
var isNumOrPxType = function(v) {
  return v === number || v === px2;
};
var BoundingBoxDimension;
(function(BoundingBoxDimension2) {
  BoundingBoxDimension2["width"] = "width";
  BoundingBoxDimension2["height"] = "height";
  BoundingBoxDimension2["left"] = "left";
  BoundingBoxDimension2["right"] = "right";
  BoundingBoxDimension2["top"] = "top";
  BoundingBoxDimension2["bottom"] = "bottom";
})(BoundingBoxDimension || (BoundingBoxDimension = {}));
var getPosFromMatrix = function(matrix, pos) {
  return parseFloat(matrix.split(", ")[pos]);
};
var getTranslateFromMatrix = function(pos2, pos3) {
  return function(_bbox, _a) {
    var transform3 = _a.transform;
    if (transform3 === "none" || !transform3)
      return 0;
    var matrix3d = transform3.match(/^matrix3d\((.+)\)$/);
    if (matrix3d) {
      return getPosFromMatrix(matrix3d[1], pos3);
    } else {
      var matrix = transform3.match(/^matrix\((.+)\)$/);
      if (matrix) {
        return getPosFromMatrix(matrix[1], pos2);
      } else {
        return 0;
      }
    }
  };
};
var transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
var nonTranslationalTransformKeys = transformProps.filter(function(key) {
  return !transformKeys.has(key);
});
function removeNonTranslationalTransform(visualElement2) {
  var removedTransforms = [];
  nonTranslationalTransformKeys.forEach(function(key) {
    var value = visualElement2.getValue(key);
    if (value !== void 0) {
      removedTransforms.push([key, value.get()]);
      value.set(key.startsWith("scale") ? 1 : 0);
    }
  });
  if (removedTransforms.length)
    visualElement2.syncRender();
  return removedTransforms;
}
var positionalValues = {
  width: function(_a, _b) {
    var x = _a.x;
    var _c = _b.paddingLeft, paddingLeft = _c === void 0 ? "0" : _c, _d = _b.paddingRight, paddingRight = _d === void 0 ? "0" : _d;
    return x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight);
  },
  height: function(_a, _b) {
    var y = _a.y;
    var _c = _b.paddingTop, paddingTop = _c === void 0 ? "0" : _c, _d = _b.paddingBottom, paddingBottom = _d === void 0 ? "0" : _d;
    return y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom);
  },
  top: function(_bbox, _a) {
    var top2 = _a.top;
    return parseFloat(top2);
  },
  left: function(_bbox, _a) {
    var left2 = _a.left;
    return parseFloat(left2);
  },
  bottom: function(_a, _b) {
    var y = _a.y;
    var top2 = _b.top;
    return parseFloat(top2) + (y.max - y.min);
  },
  right: function(_a, _b) {
    var x = _a.x;
    var left2 = _b.left;
    return parseFloat(left2) + (x.max - x.min);
  },
  x: getTranslateFromMatrix(4, 13),
  y: getTranslateFromMatrix(5, 14)
};
var convertChangedValueTypes = function(target, visualElement2, changedKeys) {
  var originBbox = visualElement2.measureViewportBox();
  var element = visualElement2.getInstance();
  var elementComputedStyle = getComputedStyle(element);
  var display = elementComputedStyle.display;
  var origin = {};
  if (display === "none") {
    visualElement2.setStaticValue("display", target.display || "block");
  }
  changedKeys.forEach(function(key) {
    origin[key] = positionalValues[key](originBbox, elementComputedStyle);
  });
  visualElement2.syncRender();
  var targetBbox = visualElement2.measureViewportBox();
  changedKeys.forEach(function(key) {
    var value = visualElement2.getValue(key);
    setAndResetVelocity(value, origin[key]);
    target[key] = positionalValues[key](targetBbox, elementComputedStyle);
  });
  return target;
};
var checkAndConvertChangedValueTypes = function(visualElement2, target, origin, transitionEnd) {
  if (origin === void 0) {
    origin = {};
  }
  if (transitionEnd === void 0) {
    transitionEnd = {};
  }
  target = __assign({}, target);
  transitionEnd = __assign({}, transitionEnd);
  var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
  var removedTransformValues = [];
  var hasAttemptedToRemoveTransformValues = false;
  var changedValueTypeKeys = [];
  targetPositionalKeys.forEach(function(key) {
    var value = visualElement2.getValue(key);
    if (!visualElement2.hasValue(key))
      return;
    var from = origin[key];
    var fromType = findDimensionValueType(from);
    var to = target[key];
    var toType;
    if (isKeyframesTarget(to)) {
      var numKeyframes = to.length;
      var fromIndex = to[0] === null ? 1 : 0;
      from = to[fromIndex];
      fromType = findDimensionValueType(from);
      for (var i = fromIndex; i < numKeyframes; i++) {
        if (!toType) {
          toType = findDimensionValueType(to[i]);
          invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
        } else {
          invariant(findDimensionValueType(to[i]) === toType, "All keyframes must be of the same type");
        }
      }
    } else {
      toType = findDimensionValueType(to);
    }
    if (fromType !== toType) {
      if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
        var current = value.get();
        if (typeof current === "string") {
          value.set(parseFloat(current));
        }
        if (typeof to === "string") {
          target[key] = parseFloat(to);
        } else if (Array.isArray(to) && toType === px2) {
          target[key] = to.map(parseFloat);
        }
      } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from === 0 || to === 0)) {
        if (from === 0) {
          value.set(toType.transform(from));
        } else {
          target[key] = fromType.transform(to);
        }
      } else {
        if (!hasAttemptedToRemoveTransformValues) {
          removedTransformValues = removeNonTranslationalTransform(visualElement2);
          hasAttemptedToRemoveTransformValues = true;
        }
        changedValueTypeKeys.push(key);
        transitionEnd[key] = transitionEnd[key] !== void 0 ? transitionEnd[key] : target[key];
        setAndResetVelocity(value, to);
      }
    }
  });
  if (changedValueTypeKeys.length) {
    var scrollY_1 = changedValueTypeKeys.indexOf("height") >= 0 ? window.pageYOffset : null;
    var convertedTarget = convertChangedValueTypes(target, visualElement2, changedValueTypeKeys);
    if (removedTransformValues.length) {
      removedTransformValues.forEach(function(_a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        visualElement2.getValue(key).set(value);
      });
    }
    visualElement2.syncRender();
    if (scrollY_1 !== null)
      window.scrollTo({ top: scrollY_1 });
    return { target: convertedTarget, transitionEnd };
  } else {
    return { target, transitionEnd };
  }
};
function unitConversion(visualElement2, target, origin, transitionEnd) {
  return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement2, target, origin, transitionEnd) : { target, transitionEnd };
}

// node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs
var parseDomVariant = function(visualElement2, target, origin, transitionEnd) {
  var resolved = resolveCSSVariables(visualElement2, target, transitionEnd);
  target = resolved.target;
  transitionEnd = resolved.transitionEnd;
  return unitConversion(visualElement2, target, origin, transitionEnd);
};

// node_modules/framer-motion/dist/es/render/html/visual-element.mjs
function getComputedStyle3(element) {
  return window.getComputedStyle(element);
}
var htmlConfig = {
  treeType: "dom",
  readValueFromInstance: function(domElement, key) {
    if (isTransformProp(key)) {
      var defaultType = getDefaultValueType(key);
      return defaultType ? defaultType.default || 0 : 0;
    } else {
      var computedStyle = getComputedStyle3(domElement);
      return (isCSSVariable(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
    }
  },
  sortNodePosition: function(a2, b2) {
    return a2.compareDocumentPosition(b2) & 2 ? 1 : -1;
  },
  getBaseTarget: function(props, key) {
    var _a;
    return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];
  },
  measureViewportBox: function(element, _a) {
    var transformPagePoint = _a.transformPagePoint;
    return measureViewportBox(element, transformPagePoint);
  },
  resetTransform: function(element, domElement, props) {
    var transformTemplate = props.transformTemplate;
    domElement.style.transform = transformTemplate ? transformTemplate({}, "") : "none";
    element.scheduleRender();
  },
  restoreTransform: function(instance, mutableState) {
    instance.style.transform = mutableState.style.transform;
  },
  removeValueFromRenderState: function(key, _a) {
    var vars = _a.vars, style2 = _a.style;
    delete vars[key];
    delete style2[key];
  },
  makeTargetAnimatable: function(element, _a, _b, isMounted) {
    var transformValues = _b.transformValues;
    if (isMounted === void 0) {
      isMounted = true;
    }
    var transition3 = _a.transition, transitionEnd = _a.transitionEnd, target = __rest(_a, ["transition", "transitionEnd"]);
    var origin = getOrigin(target, transition3 || {}, element);
    if (transformValues) {
      if (transitionEnd)
        transitionEnd = transformValues(transitionEnd);
      if (target)
        target = transformValues(target);
      if (origin)
        origin = transformValues(origin);
    }
    if (isMounted) {
      checkTargetForNewValues(element, target, origin);
      var parsed = parseDomVariant(element, target, origin, transitionEnd);
      transitionEnd = parsed.transitionEnd;
      target = parsed.target;
    }
    return __assign({ transition: transition3, transitionEnd }, target);
  },
  scrapeMotionValuesFromProps,
  build: function(element, renderState, latestValues, options, props) {
    if (element.isVisible !== void 0) {
      renderState.style.visibility = element.isVisible ? "visible" : "hidden";
    }
    buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);
  },
  render: renderHTML
};
var htmlVisualElement = visualElement(htmlConfig);

// node_modules/framer-motion/dist/es/render/svg/visual-element.mjs
var svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), { getBaseTarget: function(props, key) {
  return props[key];
}, readValueFromInstance: function(domElement, key) {
  var _a;
  if (isTransformProp(key)) {
    return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;
  }
  key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
  return domElement.getAttribute(key);
}, scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2, build: function(_element, renderState, latestValues, options, props) {
  buildSVGAttrs(renderState, latestValues, options, props.transformTemplate);
}, render: renderSVG }));

// node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
var createDomVisualElement = function(Component, options) {
  return isSVGComponent(Component) ? svgVisualElement(options, { enableHardwareAcceleration: false }) : htmlVisualElement(options, { enableHardwareAcceleration: true });
};

// node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
var import_react31 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs
function pixelsToPercent(pixels, axis) {
  if (axis.max === axis.min)
    return 0;
  return pixels / (axis.max - axis.min) * 100;
}
var correctBorderRadius = {
  correct: function(latest, node2) {
    if (!node2.target)
      return latest;
    if (typeof latest === "string") {
      if (px2.test(latest)) {
        latest = parseFloat(latest);
      } else {
        return latest;
      }
    }
    var x = pixelsToPercent(latest, node2.target.x);
    var y = pixelsToPercent(latest, node2.target.y);
    return "".concat(x, "% ").concat(y, "%");
  }
};

// node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs
var varToken = "_$css";
var correctBoxShadow = {
  correct: function(latest, _a) {
    var treeScale = _a.treeScale, projectionDelta = _a.projectionDelta;
    var original = latest;
    var containsCSSVariables = latest.includes("var(");
    var cssVariables = [];
    if (containsCSSVariables) {
      latest = latest.replace(cssVariableRegex, function(match) {
        cssVariables.push(match);
        return varToken;
      });
    }
    var shadow = complex.parse(latest);
    if (shadow.length > 5)
      return original;
    var template = complex.createTransformer(latest);
    var offset2 = typeof shadow[0] !== "number" ? 1 : 0;
    var xScale = projectionDelta.x.scale * treeScale.x;
    var yScale = projectionDelta.y.scale * treeScale.y;
    shadow[0 + offset2] /= xScale;
    shadow[1 + offset2] /= yScale;
    var averageScale = mix(xScale, yScale, 0.5);
    if (typeof shadow[2 + offset2] === "number")
      shadow[2 + offset2] /= averageScale;
    if (typeof shadow[3 + offset2] === "number")
      shadow[3 + offset2] /= averageScale;
    var output = template(shadow);
    if (containsCSSVariables) {
      var i_1 = 0;
      output = output.replace(varToken, function() {
        var cssVariable = cssVariables[i_1];
        i_1++;
        return cssVariable;
      });
    }
    return output;
  }
};

// node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
var MeasureLayoutWithContext = function(_super) {
  __extends(MeasureLayoutWithContext2, _super);
  function MeasureLayoutWithContext2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  MeasureLayoutWithContext2.prototype.componentDidMount = function() {
    var _this = this;
    var _a = this.props, visualElement2 = _a.visualElement, layoutGroup = _a.layoutGroup, switchLayoutGroup = _a.switchLayoutGroup, layoutId = _a.layoutId;
    var projection = visualElement2.projection;
    addScaleCorrector(defaultScaleCorrectors);
    if (projection) {
      if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)
        layoutGroup.group.add(projection);
      if ((switchLayoutGroup === null || switchLayoutGroup === void 0 ? void 0 : switchLayoutGroup.register) && layoutId) {
        switchLayoutGroup.register(projection);
      }
      projection.root.didUpdate();
      projection.addEventListener("animationComplete", function() {
        _this.safeToRemove();
      });
      projection.setOptions(__assign(__assign({}, projection.options), { onExitComplete: function() {
        return _this.safeToRemove();
      } }));
    }
    globalProjectionState.hasEverUpdated = true;
  };
  MeasureLayoutWithContext2.prototype.getSnapshotBeforeUpdate = function(prevProps) {
    var _this = this;
    var _a = this.props, layoutDependency = _a.layoutDependency, visualElement2 = _a.visualElement, drag2 = _a.drag, isPresent2 = _a.isPresent;
    var projection = visualElement2.projection;
    if (!projection)
      return null;
    projection.isPresent = isPresent2;
    if (drag2 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0) {
      projection.willUpdate();
    } else {
      this.safeToRemove();
    }
    if (prevProps.isPresent !== isPresent2) {
      if (isPresent2) {
        projection.promote();
      } else if (!projection.relegate()) {
        es_default2.postRender(function() {
          var _a2;
          if (!((_a2 = projection.getStack()) === null || _a2 === void 0 ? void 0 : _a2.members.length)) {
            _this.safeToRemove();
          }
        });
      }
    }
    return null;
  };
  MeasureLayoutWithContext2.prototype.componentDidUpdate = function() {
    var projection = this.props.visualElement.projection;
    if (projection) {
      projection.root.didUpdate();
      if (!projection.currentAnimation && projection.isLead()) {
        this.safeToRemove();
      }
    }
  };
  MeasureLayoutWithContext2.prototype.componentWillUnmount = function() {
    var _a = this.props, visualElement2 = _a.visualElement, layoutGroup = _a.layoutGroup, promoteContext = _a.switchLayoutGroup;
    var projection = visualElement2.projection;
    if (projection) {
      projection.scheduleCheckAfterUnmount();
      if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)
        layoutGroup.group.remove(projection);
      if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister)
        promoteContext.deregister(projection);
    }
  };
  MeasureLayoutWithContext2.prototype.safeToRemove = function() {
    var safeToRemove = this.props.safeToRemove;
    safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();
  };
  MeasureLayoutWithContext2.prototype.render = function() {
    return null;
  };
  return MeasureLayoutWithContext2;
}(import_react31.default.Component);
function MeasureLayout(props) {
  var _a = __read(usePresence(), 2), isPresent2 = _a[0], safeToRemove = _a[1];
  var layoutGroup = (0, import_react31.useContext)(LayoutGroupContext);
  return import_react31.default.createElement(MeasureLayoutWithContext, __assign({}, props, { layoutGroup, switchLayoutGroup: (0, import_react31.useContext)(SwitchLayoutGroupContext), isPresent: isPresent2, safeToRemove }));
}
var defaultScaleCorrectors = {
  borderRadius: __assign(__assign({}, correctBorderRadius), { applyTo: [
    "borderTopLeftRadius",
    "borderTopRightRadius",
    "borderBottomLeftRadius",
    "borderBottomRightRadius"
  ] }),
  borderTopLeftRadius: correctBorderRadius,
  borderTopRightRadius: correctBorderRadius,
  borderBottomLeftRadius: correctBorderRadius,
  borderBottomRightRadius: correctBorderRadius,
  boxShadow: correctBoxShadow
};

// node_modules/framer-motion/dist/es/motion/features/layout/index.mjs
var layoutFeatures = {
  measureLayout: MeasureLayout
};

// node_modules/framer-motion/dist/es/animation/animate.mjs
function animate2(from, to, transition3) {
  if (transition3 === void 0) {
    transition3 = {};
  }
  var value = isMotionValue(from) ? from : motionValue(from);
  startAnimation("", value, to, transition3);
  return {
    stop: function() {
      return value.stop();
    },
    isAnimating: function() {
      return value.isAnimating();
    }
  };
}

// node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs
var borders2 = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
var numBorders = borders2.length;
var asNumber = function(value) {
  return typeof value === "string" ? parseFloat(value) : value;
};
var isPx = function(value) {
  return typeof value === "number" || px2.test(value);
};
function mixValues(target, follow, lead, progress4, shouldCrossfadeOpacity, isOnlyMember) {
  var _a, _b, _c, _d;
  if (shouldCrossfadeOpacity) {
    target.opacity = mix(0, (_a = lead.opacity) !== null && _a !== void 0 ? _a : 1, easeCrossfadeIn(progress4));
    target.opacityExit = mix((_b = follow.opacity) !== null && _b !== void 0 ? _b : 1, 0, easeCrossfadeOut(progress4));
  } else if (isOnlyMember) {
    target.opacity = mix((_c = follow.opacity) !== null && _c !== void 0 ? _c : 1, (_d = lead.opacity) !== null && _d !== void 0 ? _d : 1, progress4);
  }
  for (var i = 0; i < numBorders; i++) {
    var borderLabel = "border".concat(borders2[i], "Radius");
    var followRadius = getRadius(follow, borderLabel);
    var leadRadius = getRadius(lead, borderLabel);
    if (followRadius === void 0 && leadRadius === void 0)
      continue;
    followRadius || (followRadius = 0);
    leadRadius || (leadRadius = 0);
    var canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);
    if (canMix) {
      target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress4), 0);
      if (percent.test(leadRadius) || percent.test(followRadius)) {
        target[borderLabel] += "%";
      }
    } else {
      target[borderLabel] = leadRadius;
    }
  }
  if (follow.rotate || lead.rotate) {
    target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress4);
  }
}
function getRadius(values, radiusName) {
  var _a;
  return (_a = values[radiusName]) !== null && _a !== void 0 ? _a : values.borderRadius;
}
var easeCrossfadeIn = compress(0, 0.5, circOut);
var easeCrossfadeOut = compress(0.5, 0.95, linear);
function compress(min2, max2, easing) {
  return function(p) {
    if (p < min2)
      return 0;
    if (p > max2)
      return 1;
    return easing(progress(min2, max2, p));
  };
}

// node_modules/framer-motion/dist/es/projection/geometry/copy.mjs
function copyAxisInto(axis, originAxis) {
  axis.min = originAxis.min;
  axis.max = originAxis.max;
}
function copyBoxInto(box, originBox) {
  copyAxisInto(box.x, originBox.x);
  copyAxisInto(box.y, originBox.y);
}

// node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs
function removePointDelta(point, translate, scale3, originPoint, boxScale) {
  point -= translate;
  point = scalePoint(point, 1 / scale3, originPoint);
  if (boxScale !== void 0) {
    point = scalePoint(point, 1 / boxScale, originPoint);
  }
  return point;
}
function removeAxisDelta(axis, translate, scale3, origin, boxScale, originAxis, sourceAxis) {
  if (translate === void 0) {
    translate = 0;
  }
  if (scale3 === void 0) {
    scale3 = 1;
  }
  if (origin === void 0) {
    origin = 0.5;
  }
  if (originAxis === void 0) {
    originAxis = axis;
  }
  if (sourceAxis === void 0) {
    sourceAxis = axis;
  }
  if (percent.test(translate)) {
    translate = parseFloat(translate);
    var relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);
    translate = relativeProgress - sourceAxis.min;
  }
  if (typeof translate !== "number")
    return;
  var originPoint = mix(originAxis.min, originAxis.max, origin);
  if (axis === originAxis)
    originPoint -= translate;
  axis.min = removePointDelta(axis.min, translate, scale3, originPoint, boxScale);
  axis.max = removePointDelta(axis.max, translate, scale3, originPoint, boxScale);
}
function removeAxisTransforms(axis, transforms3, _a, origin, sourceAxis) {
  var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
  removeAxisDelta(axis, transforms3[key], transforms3[scaleKey], transforms3[originKey], transforms3.scale, origin, sourceAxis);
}
var xKeys2 = ["x", "scaleX", "originX"];
var yKeys2 = ["y", "scaleY", "originY"];
function removeBoxTransforms(box, transforms3, originBox, sourceBox) {
  removeAxisTransforms(box.x, transforms3, xKeys2, originBox === null || originBox === void 0 ? void 0 : originBox.x, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.x);
  removeAxisTransforms(box.y, transforms3, yKeys2, originBox === null || originBox === void 0 ? void 0 : originBox.y, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.y);
}

// node_modules/framer-motion/dist/es/projection/geometry/utils.mjs
function isAxisDeltaZero(delta) {
  return delta.translate === 0 && delta.scale === 1;
}
function isDeltaZero(delta) {
  return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
}
function boxEquals(a2, b2) {
  return a2.x.min === b2.x.min && a2.x.max === b2.x.max && a2.y.min === b2.y.min && a2.y.max === b2.y.max;
}

// node_modules/framer-motion/dist/es/projection/shared/stack.mjs
var NodeStack = function() {
  function NodeStack2() {
    this.members = [];
  }
  NodeStack2.prototype.add = function(node2) {
    addUniqueItem(this.members, node2);
    node2.scheduleRender();
  };
  NodeStack2.prototype.remove = function(node2) {
    removeItem2(this.members, node2);
    if (node2 === this.prevLead) {
      this.prevLead = void 0;
    }
    if (node2 === this.lead) {
      var prevLead = this.members[this.members.length - 1];
      if (prevLead) {
        this.promote(prevLead);
      }
    }
  };
  NodeStack2.prototype.relegate = function(node2) {
    var indexOfNode = this.members.findIndex(function(member2) {
      return node2 === member2;
    });
    if (indexOfNode === 0)
      return false;
    var prevLead;
    for (var i = indexOfNode; i >= 0; i--) {
      var member = this.members[i];
      if (member.isPresent !== false) {
        prevLead = member;
        break;
      }
    }
    if (prevLead) {
      this.promote(prevLead);
      return true;
    } else {
      return false;
    }
  };
  NodeStack2.prototype.promote = function(node2, preserveFollowOpacity) {
    var _a;
    var prevLead = this.lead;
    if (node2 === prevLead)
      return;
    this.prevLead = prevLead;
    this.lead = node2;
    node2.show();
    if (prevLead) {
      prevLead.instance && prevLead.scheduleRender();
      node2.scheduleRender();
      node2.resumeFrom = prevLead;
      if (preserveFollowOpacity) {
        node2.resumeFrom.preserveOpacity = true;
      }
      if (prevLead.snapshot) {
        node2.snapshot = prevLead.snapshot;
        node2.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
        node2.snapshot.isShared = true;
      }
      if ((_a = node2.root) === null || _a === void 0 ? void 0 : _a.isUpdating) {
        node2.isLayoutDirty = true;
      }
      var crossfade = node2.options.crossfade;
      if (crossfade === false) {
        prevLead.hide();
      }
    }
  };
  NodeStack2.prototype.exitAnimationComplete = function() {
    this.members.forEach(function(node2) {
      var _a, _b, _c, _d, _e;
      (_b = (_a = node2.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);
      (_e = (_c = node2.resumingFrom) === null || _c === void 0 ? void 0 : (_d = _c.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d);
    });
  };
  NodeStack2.prototype.scheduleRender = function() {
    this.members.forEach(function(node2) {
      node2.instance && node2.scheduleRender(false);
    });
  };
  NodeStack2.prototype.removeLeadSnapshot = function() {
    if (this.lead && this.lead.snapshot) {
      this.lead.snapshot = void 0;
    }
  };
  return NodeStack2;
}();

// node_modules/framer-motion/dist/es/projection/styles/transform.mjs
var identityProjection = "translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)";
function buildProjectionTransform(delta, treeScale, latestTransform) {
  var xTranslate = delta.x.translate / treeScale.x;
  var yTranslate = delta.y.translate / treeScale.y;
  var transform3 = "translate3d(".concat(xTranslate, "px, ").concat(yTranslate, "px, 0) ");
  transform3 += "scale(".concat(1 / treeScale.x, ", ").concat(1 / treeScale.y, ") ");
  if (latestTransform) {
    var rotate2 = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;
    if (rotate2)
      transform3 += "rotate(".concat(rotate2, "deg) ");
    if (rotateX)
      transform3 += "rotateX(".concat(rotateX, "deg) ");
    if (rotateY)
      transform3 += "rotateY(".concat(rotateY, "deg) ");
  }
  var elementScaleX = delta.x.scale * treeScale.x;
  var elementScaleY = delta.y.scale * treeScale.y;
  transform3 += "scale(".concat(elementScaleX, ", ").concat(elementScaleY, ")");
  return transform3 === identityProjection ? "none" : transform3;
}

// node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs
var compareByDepth = function(a2, b2) {
  return a2.depth - b2.depth;
};

// node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs
var FlatTree = function() {
  function FlatTree2() {
    this.children = [];
    this.isDirty = false;
  }
  FlatTree2.prototype.add = function(child) {
    addUniqueItem(this.children, child);
    this.isDirty = true;
  };
  FlatTree2.prototype.remove = function(child) {
    removeItem2(this.children, child);
    this.isDirty = true;
  };
  FlatTree2.prototype.forEach = function(callback) {
    this.isDirty && this.children.sort(compareByDepth);
    this.isDirty = false;
    this.children.forEach(callback);
  };
  return FlatTree2;
}();

// node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs
var animationTarget = 1e3;
function createProjectionNode(_a) {
  var attachResizeListener = _a.attachResizeListener, defaultParent = _a.defaultParent, measureScroll = _a.measureScroll, checkIsScrollRoot = _a.checkIsScrollRoot, resetTransform = _a.resetTransform;
  return function() {
    function ProjectionNode(id2, latestValues, parent) {
      var _this = this;
      if (latestValues === void 0) {
        latestValues = {};
      }
      if (parent === void 0) {
        parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();
      }
      this.children = /* @__PURE__ */ new Set();
      this.options = {};
      this.isTreeAnimating = false;
      this.isAnimationBlocked = false;
      this.isLayoutDirty = false;
      this.updateManuallyBlocked = false;
      this.updateBlockedByResize = false;
      this.isUpdating = false;
      this.isSVG = false;
      this.needsReset = false;
      this.shouldResetTransform = false;
      this.treeScale = { x: 1, y: 1 };
      this.eventHandlers = /* @__PURE__ */ new Map();
      this.potentialNodes = /* @__PURE__ */ new Map();
      this.checkUpdateFailed = function() {
        if (_this.isUpdating) {
          _this.isUpdating = false;
          _this.clearAllSnapshots();
        }
      };
      this.updateProjection = function() {
        _this.nodes.forEach(resolveTargetDelta);
        _this.nodes.forEach(calcProjection);
      };
      this.hasProjected = false;
      this.isVisible = true;
      this.animationProgress = 0;
      this.sharedNodes = /* @__PURE__ */ new Map();
      this.id = id2;
      this.latestValues = latestValues;
      this.root = parent ? parent.root || parent : this;
      this.path = parent ? __spreadArray(__spreadArray([], __read(parent.path), false), [parent], false) : [];
      this.parent = parent;
      this.depth = parent ? parent.depth + 1 : 0;
      id2 && this.root.registerPotentialNode(id2, this);
      for (var i = 0; i < this.path.length; i++) {
        this.path[i].shouldResetTransform = true;
      }
      if (this.root === this)
        this.nodes = new FlatTree();
    }
    ProjectionNode.prototype.addEventListener = function(name, handler) {
      if (!this.eventHandlers.has(name)) {
        this.eventHandlers.set(name, new SubscriptionManager());
      }
      return this.eventHandlers.get(name).add(handler);
    };
    ProjectionNode.prototype.notifyListeners = function(name) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }
      var subscriptionManager = this.eventHandlers.get(name);
      subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, __spreadArray([], __read(args), false));
    };
    ProjectionNode.prototype.hasListeners = function(name) {
      return this.eventHandlers.has(name);
    };
    ProjectionNode.prototype.registerPotentialNode = function(id2, node2) {
      this.potentialNodes.set(id2, node2);
    };
    ProjectionNode.prototype.mount = function(instance, isLayoutDirty) {
      var _this = this;
      var _a2;
      if (isLayoutDirty === void 0) {
        isLayoutDirty = false;
      }
      if (this.instance)
        return;
      this.isSVG = instance instanceof SVGElement && instance.tagName !== "svg";
      this.instance = instance;
      var _b = this.options, layoutId = _b.layoutId, layout2 = _b.layout, visualElement2 = _b.visualElement;
      if (visualElement2 && !visualElement2.getInstance()) {
        visualElement2.mount(instance);
      }
      this.root.nodes.add(this);
      (_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.children.add(this);
      this.id && this.root.potentialNodes.delete(this.id);
      if (isLayoutDirty && (layout2 || layoutId)) {
        this.isLayoutDirty = true;
      }
      if (attachResizeListener) {
        var unblockTimeout_1;
        var resizeUnblockUpdate_1 = function() {
          return _this.root.updateBlockedByResize = false;
        };
        attachResizeListener(instance, function() {
          _this.root.updateBlockedByResize = true;
          clearTimeout(unblockTimeout_1);
          unblockTimeout_1 = window.setTimeout(resizeUnblockUpdate_1, 250);
          if (globalProjectionState.hasAnimatedSinceResize) {
            globalProjectionState.hasAnimatedSinceResize = false;
            _this.nodes.forEach(finishAnimation);
          }
        });
      }
      if (layoutId) {
        this.root.registerSharedNode(layoutId, this);
      }
      if (this.options.animate !== false && visualElement2 && (layoutId || layout2)) {
        this.addEventListener("didUpdate", function(_a3) {
          var _b2, _c, _d, _e, _f;
          var delta = _a3.delta, hasLayoutChanged = _a3.hasLayoutChanged, hasRelativeTargetChanged = _a3.hasRelativeTargetChanged, newLayout = _a3.layout;
          if (_this.isTreeAnimationBlocked()) {
            _this.target = void 0;
            _this.relativeTarget = void 0;
            return;
          }
          var layoutTransition = (_c = (_b2 = _this.options.transition) !== null && _b2 !== void 0 ? _b2 : visualElement2.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;
          var _g = visualElement2.getProps(), onLayoutAnimationStart = _g.onLayoutAnimationStart, onLayoutAnimationComplete = _g.onLayoutAnimationComplete;
          var targetChanged = !_this.targetLayout || !boxEquals(_this.targetLayout, newLayout) || hasRelativeTargetChanged;
          var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
          if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this.currentAnimation)) {
            if (_this.resumeFrom) {
              _this.resumingFrom = _this.resumeFrom;
              _this.resumingFrom.resumingFrom = void 0;
            }
            _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
            var animationOptions = __assign(__assign({}, getValueTransition(layoutTransition, "layout")), { onPlay: onLayoutAnimationStart, onComplete: onLayoutAnimationComplete });
            if (visualElement2.shouldReduceMotion) {
              animationOptions.delay = 0;
              animationOptions.type = false;
            }
            _this.startAnimation(animationOptions);
          } else {
            if (!hasLayoutChanged && _this.animationProgress === 0) {
              _this.finishAnimation();
            }
            _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));
          }
          _this.targetLayout = newLayout;
        });
      }
    };
    ProjectionNode.prototype.unmount = function() {
      var _a2, _b;
      this.options.layoutId && this.willUpdate();
      this.root.nodes.remove(this);
      (_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.remove(this);
      (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);
      this.instance = void 0;
      cancelSync2.preRender(this.updateProjection);
    };
    ProjectionNode.prototype.blockUpdate = function() {
      this.updateManuallyBlocked = true;
    };
    ProjectionNode.prototype.unblockUpdate = function() {
      this.updateManuallyBlocked = false;
    };
    ProjectionNode.prototype.isUpdateBlocked = function() {
      return this.updateManuallyBlocked || this.updateBlockedByResize;
    };
    ProjectionNode.prototype.isTreeAnimationBlocked = function() {
      var _a2;
      return this.isAnimationBlocked || ((_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.isTreeAnimationBlocked()) || false;
    };
    ProjectionNode.prototype.startUpdate = function() {
      var _a2;
      if (this.isUpdateBlocked())
        return;
      this.isUpdating = true;
      (_a2 = this.nodes) === null || _a2 === void 0 ? void 0 : _a2.forEach(resetRotation);
    };
    ProjectionNode.prototype.willUpdate = function(shouldNotifyListeners) {
      var _a2, _b, _c;
      if (shouldNotifyListeners === void 0) {
        shouldNotifyListeners = true;
      }
      if (this.root.isUpdateBlocked()) {
        (_b = (_a2 = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a2);
        return;
      }
      !this.root.isUpdating && this.root.startUpdate();
      if (this.isLayoutDirty)
        return;
      this.isLayoutDirty = true;
      for (var i = 0; i < this.path.length; i++) {
        var node2 = this.path[i];
        node2.shouldResetTransform = true;
        node2.updateScroll();
      }
      var _d = this.options, layoutId = _d.layoutId, layout2 = _d.layout;
      if (layoutId === void 0 && !layout2)
        return;
      var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;
      this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, "");
      this.updateSnapshot();
      shouldNotifyListeners && this.notifyListeners("willUpdate");
    };
    ProjectionNode.prototype.didUpdate = function() {
      var updateWasBlocked = this.isUpdateBlocked();
      if (updateWasBlocked) {
        this.unblockUpdate();
        this.clearAllSnapshots();
        this.nodes.forEach(clearMeasurements);
        return;
      }
      if (!this.isUpdating)
        return;
      this.isUpdating = false;
      if (this.potentialNodes.size) {
        this.potentialNodes.forEach(mountNodeEarly);
        this.potentialNodes.clear();
      }
      this.nodes.forEach(resetTransformStyle);
      this.nodes.forEach(updateLayout);
      this.nodes.forEach(notifyLayoutUpdate);
      this.clearAllSnapshots();
      flushSync2.update();
      flushSync2.preRender();
      flushSync2.render();
    };
    ProjectionNode.prototype.clearAllSnapshots = function() {
      this.nodes.forEach(clearSnapshot);
      this.sharedNodes.forEach(removeLeadSnapshots);
    };
    ProjectionNode.prototype.scheduleUpdateProjection = function() {
      es_default2.preRender(this.updateProjection, false, true);
    };
    ProjectionNode.prototype.scheduleCheckAfterUnmount = function() {
      var _this = this;
      es_default2.postRender(function() {
        if (_this.isLayoutDirty) {
          _this.root.didUpdate();
        } else {
          _this.root.checkUpdateFailed();
        }
      });
    };
    ProjectionNode.prototype.updateSnapshot = function() {
      if (this.snapshot || !this.instance)
        return;
      var measured = this.measure();
      var layout2 = this.removeTransform(this.removeElementScroll(measured));
      roundBox(layout2);
      this.snapshot = {
        measured,
        layout: layout2,
        latestValues: {}
      };
    };
    ProjectionNode.prototype.updateLayout = function() {
      var _a2;
      if (!this.instance)
        return;
      this.updateScroll();
      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {
        return;
      }
      if (this.resumeFrom && !this.resumeFrom.instance) {
        for (var i = 0; i < this.path.length; i++) {
          var node2 = this.path[i];
          node2.updateScroll();
        }
      }
      var measured = this.measure();
      roundBox(measured);
      var prevLayout = this.layout;
      this.layout = {
        measured,
        actual: this.removeElementScroll(measured)
      };
      this.layoutCorrected = createBox();
      this.isLayoutDirty = false;
      this.projectionDelta = void 0;
      this.notifyListeners("measure", this.layout.actual);
      (_a2 = this.options.visualElement) === null || _a2 === void 0 ? void 0 : _a2.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);
    };
    ProjectionNode.prototype.updateScroll = function() {
      if (this.options.layoutScroll && this.instance) {
        this.isScrollRoot = checkIsScrollRoot(this.instance);
        this.scroll = measureScroll(this.instance);
      }
    };
    ProjectionNode.prototype.resetTransform = function() {
      var _a2;
      if (!resetTransform)
        return;
      var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;
      var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
      var transformTemplate = (_a2 = this.options.visualElement) === null || _a2 === void 0 ? void 0 : _a2.getProps().transformTemplate;
      var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, "");
      var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {
        resetTransform(this.instance, transformTemplateValue);
        this.shouldResetTransform = false;
        this.scheduleRender();
      }
    };
    ProjectionNode.prototype.measure = function() {
      var visualElement2 = this.options.visualElement;
      if (!visualElement2)
        return createBox();
      var box = visualElement2.measureViewportBox();
      var scroll3 = this.root.scroll;
      if (scroll3) {
        translateAxis(box.x, scroll3.x);
        translateAxis(box.y, scroll3.y);
      }
      return box;
    };
    ProjectionNode.prototype.removeElementScroll = function(box) {
      var boxWithoutScroll = createBox();
      copyBoxInto(boxWithoutScroll, box);
      for (var i = 0; i < this.path.length; i++) {
        var node2 = this.path[i];
        var scroll_1 = node2.scroll, options = node2.options, isScrollRoot = node2.isScrollRoot;
        if (node2 !== this.root && scroll_1 && options.layoutScroll) {
          if (isScrollRoot) {
            copyBoxInto(boxWithoutScroll, box);
            var rootScroll = this.root.scroll;
            if (rootScroll) {
              translateAxis(boxWithoutScroll.x, -rootScroll.x);
              translateAxis(boxWithoutScroll.y, -rootScroll.y);
            }
          }
          translateAxis(boxWithoutScroll.x, scroll_1.x);
          translateAxis(boxWithoutScroll.y, scroll_1.y);
        }
      }
      return boxWithoutScroll;
    };
    ProjectionNode.prototype.applyTransform = function(box, transformOnly) {
      if (transformOnly === void 0) {
        transformOnly = false;
      }
      var withTransforms = createBox();
      copyBoxInto(withTransforms, box);
      for (var i = 0; i < this.path.length; i++) {
        var node2 = this.path[i];
        if (!transformOnly && node2.options.layoutScroll && node2.scroll && node2 !== node2.root) {
          transformBox(withTransforms, {
            x: -node2.scroll.x,
            y: -node2.scroll.y
          });
        }
        if (!hasTransform(node2.latestValues))
          continue;
        transformBox(withTransforms, node2.latestValues);
      }
      if (hasTransform(this.latestValues)) {
        transformBox(withTransforms, this.latestValues);
      }
      return withTransforms;
    };
    ProjectionNode.prototype.removeTransform = function(box) {
      var _a2;
      var boxWithoutTransform = createBox();
      copyBoxInto(boxWithoutTransform, box);
      for (var i = 0; i < this.path.length; i++) {
        var node2 = this.path[i];
        if (!node2.instance)
          continue;
        if (!hasTransform(node2.latestValues))
          continue;
        hasScale(node2.latestValues) && node2.updateSnapshot();
        var sourceBox = createBox();
        var nodeBox = node2.measure();
        copyBoxInto(sourceBox, nodeBox);
        removeBoxTransforms(boxWithoutTransform, node2.latestValues, (_a2 = node2.snapshot) === null || _a2 === void 0 ? void 0 : _a2.layout, sourceBox);
      }
      if (hasTransform(this.latestValues)) {
        removeBoxTransforms(boxWithoutTransform, this.latestValues);
      }
      return boxWithoutTransform;
    };
    ProjectionNode.prototype.setTargetDelta = function(delta) {
      this.targetDelta = delta;
      this.root.scheduleUpdateProjection();
    };
    ProjectionNode.prototype.setOptions = function(options) {
      var _a2;
      this.options = __assign(__assign(__assign({}, this.options), options), { crossfade: (_a2 = options.crossfade) !== null && _a2 !== void 0 ? _a2 : true });
    };
    ProjectionNode.prototype.clearMeasurements = function() {
      this.scroll = void 0;
      this.layout = void 0;
      this.snapshot = void 0;
      this.prevTransformTemplateValue = void 0;
      this.targetDelta = void 0;
      this.target = void 0;
      this.isLayoutDirty = false;
    };
    ProjectionNode.prototype.resolveTargetDelta = function() {
      var _a2;
      var _b = this.options, layout2 = _b.layout, layoutId = _b.layoutId;
      if (!this.layout || !(layout2 || layoutId))
        return;
      if (!this.targetDelta && !this.relativeTarget) {
        this.relativeParent = this.getClosestProjectingParent();
        if (this.relativeParent && this.relativeParent.layout) {
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        }
      }
      if (!this.relativeTarget && !this.targetDelta)
        return;
      if (!this.target) {
        this.target = createBox();
        this.targetWithTransforms = createBox();
      }
      if (this.relativeTarget && this.relativeTargetOrigin && ((_a2 = this.relativeParent) === null || _a2 === void 0 ? void 0 : _a2.target)) {
        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
      } else if (this.targetDelta) {
        if (Boolean(this.resumingFrom)) {
          this.target = this.applyTransform(this.layout.actual);
        } else {
          copyBoxInto(this.target, this.layout.actual);
        }
        applyBoxDelta(this.target, this.targetDelta);
      } else {
        copyBoxInto(this.target, this.layout.actual);
      }
      if (this.attemptToResolveRelativeTarget) {
        this.attemptToResolveRelativeTarget = false;
        this.relativeParent = this.getClosestProjectingParent();
        if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        }
      }
    };
    ProjectionNode.prototype.getClosestProjectingParent = function() {
      if (!this.parent || hasTransform(this.parent.latestValues))
        return void 0;
      if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {
        return this.parent;
      } else {
        return this.parent.getClosestProjectingParent();
      }
    };
    ProjectionNode.prototype.calcProjection = function() {
      var _a2;
      var _b = this.options, layout2 = _b.layout, layoutId = _b.layoutId;
      this.isTreeAnimating = Boolean(((_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);
      if (!this.isTreeAnimating) {
        this.targetDelta = this.relativeTarget = void 0;
      }
      if (!this.layout || !(layout2 || layoutId))
        return;
      var lead = this.getLead();
      copyBoxInto(this.layoutCorrected, this.layout.actual);
      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);
      var target = lead.target;
      if (!target)
        return;
      if (!this.projectionDelta) {
        this.projectionDelta = createDelta();
        this.projectionDeltaWithTransform = createDelta();
      }
      var prevTreeScaleX = this.treeScale.x;
      var prevTreeScaleY = this.treeScale.y;
      var prevProjectionTransform = this.projectionTransform;
      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);
      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {
        this.hasProjected = true;
        this.scheduleRender();
        this.notifyListeners("projectionUpdate", target);
      }
    };
    ProjectionNode.prototype.hide = function() {
      this.isVisible = false;
    };
    ProjectionNode.prototype.show = function() {
      this.isVisible = true;
    };
    ProjectionNode.prototype.scheduleRender = function(notifyAll) {
      var _a2, _b, _c;
      if (notifyAll === void 0) {
        notifyAll = true;
      }
      (_b = (_a2 = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a2);
      notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());
      if (this.resumingFrom && !this.resumingFrom.instance) {
        this.resumingFrom = void 0;
      }
    };
    ProjectionNode.prototype.setAnimationOrigin = function(delta, hasOnlyRelativeTargetChanged) {
      var _this = this;
      var _a2;
      if (hasOnlyRelativeTargetChanged === void 0) {
        hasOnlyRelativeTargetChanged = false;
      }
      var snapshot = this.snapshot;
      var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};
      var mixedValues = __assign({}, this.latestValues);
      var targetDelta = createDelta();
      this.relativeTarget = this.relativeTargetOrigin = void 0;
      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
      var relativeLayout = createBox();
      var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;
      var isOnlyMember = (((_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.members.length) || 0) <= 1;
      var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));
      this.animationProgress = 0;
      this.mixTargetDelta = function(latest) {
        var _a3;
        var progress4 = latest / 1e3;
        mixAxisDelta(targetDelta.x, delta.x, progress4);
        mixAxisDelta(targetDelta.y, delta.y, progress4);
        _this.setTargetDelta(targetDelta);
        if (_this.relativeTarget && _this.relativeTargetOrigin && _this.layout && ((_a3 = _this.relativeParent) === null || _a3 === void 0 ? void 0 : _a3.layout)) {
          calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);
          mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress4);
        }
        if (isSharedLayoutAnimation) {
          _this.animationValues = mixedValues;
          mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress4, shouldCrossfadeOpacity, isOnlyMember);
        }
        _this.root.scheduleUpdateProjection();
        _this.scheduleRender();
        _this.animationProgress = progress4;
      };
      this.mixTargetDelta(0);
    };
    ProjectionNode.prototype.startAnimation = function(options) {
      var _this = this;
      var _a2, _b;
      this.notifyListeners("animationStart");
      (_a2 = this.currentAnimation) === null || _a2 === void 0 ? void 0 : _a2.stop();
      if (this.resumingFrom) {
        (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();
      }
      if (this.pendingAnimation) {
        cancelSync2.update(this.pendingAnimation);
        this.pendingAnimation = void 0;
      }
      this.pendingAnimation = es_default2.update(function() {
        globalProjectionState.hasAnimatedSinceResize = true;
        _this.currentAnimation = animate2(0, animationTarget, __assign(__assign({}, options), { onUpdate: function(latest) {
          var _a3;
          _this.mixTargetDelta(latest);
          (_a3 = options.onUpdate) === null || _a3 === void 0 ? void 0 : _a3.call(options, latest);
        }, onComplete: function() {
          var _a3;
          (_a3 = options.onComplete) === null || _a3 === void 0 ? void 0 : _a3.call(options);
          _this.completeAnimation();
        } }));
        if (_this.resumingFrom) {
          _this.resumingFrom.currentAnimation = _this.currentAnimation;
        }
        _this.pendingAnimation = void 0;
      });
    };
    ProjectionNode.prototype.completeAnimation = function() {
      var _a2;
      if (this.resumingFrom) {
        this.resumingFrom.currentAnimation = void 0;
        this.resumingFrom.preserveOpacity = void 0;
      }
      (_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.exitAnimationComplete();
      this.resumingFrom = this.currentAnimation = this.animationValues = void 0;
      this.notifyListeners("animationComplete");
    };
    ProjectionNode.prototype.finishAnimation = function() {
      var _a2;
      if (this.currentAnimation) {
        (_a2 = this.mixTargetDelta) === null || _a2 === void 0 ? void 0 : _a2.call(this, animationTarget);
        this.currentAnimation.stop();
      }
      this.completeAnimation();
    };
    ProjectionNode.prototype.applyTransformsToTarget = function() {
      var _a2 = this.getLead(), targetWithTransforms = _a2.targetWithTransforms, target = _a2.target, layout2 = _a2.layout, latestValues = _a2.latestValues;
      if (!targetWithTransforms || !target || !layout2)
        return;
      copyBoxInto(targetWithTransforms, target);
      transformBox(targetWithTransforms, latestValues);
      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
    };
    ProjectionNode.prototype.registerSharedNode = function(layoutId, node2) {
      var _a2, _b, _c;
      if (!this.sharedNodes.has(layoutId)) {
        this.sharedNodes.set(layoutId, new NodeStack());
      }
      var stack = this.sharedNodes.get(layoutId);
      stack.add(node2);
      node2.promote({
        transition: (_a2 = node2.options.initialPromotionConfig) === null || _a2 === void 0 ? void 0 : _a2.transition,
        preserveFollowOpacity: (_c = (_b = node2.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node2)
      });
    };
    ProjectionNode.prototype.isLead = function() {
      var stack = this.getStack();
      return stack ? stack.lead === this : true;
    };
    ProjectionNode.prototype.getLead = function() {
      var _a2;
      var layoutId = this.options.layoutId;
      return layoutId ? ((_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.lead) || this : this;
    };
    ProjectionNode.prototype.getPrevLead = function() {
      var _a2;
      var layoutId = this.options.layoutId;
      return layoutId ? (_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.prevLead : void 0;
    };
    ProjectionNode.prototype.getStack = function() {
      var layoutId = this.options.layoutId;
      if (layoutId)
        return this.root.sharedNodes.get(layoutId);
    };
    ProjectionNode.prototype.promote = function(_a2) {
      var _b = _a2 === void 0 ? {} : _a2, needsReset = _b.needsReset, transition3 = _b.transition, preserveFollowOpacity = _b.preserveFollowOpacity;
      var stack = this.getStack();
      if (stack)
        stack.promote(this, preserveFollowOpacity);
      if (needsReset) {
        this.projectionDelta = void 0;
        this.needsReset = true;
      }
      if (transition3)
        this.setOptions({ transition: transition3 });
    };
    ProjectionNode.prototype.relegate = function() {
      var stack = this.getStack();
      if (stack) {
        return stack.relegate(this);
      } else {
        return false;
      }
    };
    ProjectionNode.prototype.resetRotation = function() {
      var visualElement2 = this.options.visualElement;
      if (!visualElement2)
        return;
      var hasRotate = false;
      var resetValues = {};
      for (var i = 0; i < transformAxes.length; i++) {
        var axis = transformAxes[i];
        var key = "rotate" + axis;
        if (!visualElement2.getStaticValue(key)) {
          continue;
        }
        hasRotate = true;
        resetValues[key] = visualElement2.getStaticValue(key);
        visualElement2.setStaticValue(key, 0);
      }
      if (!hasRotate)
        return;
      visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.syncRender();
      for (var key in resetValues) {
        visualElement2.setStaticValue(key, resetValues[key]);
      }
      visualElement2.scheduleRender();
    };
    ProjectionNode.prototype.getProjectionStyles = function(styleProp) {
      var _a2, _b, _c, _d, _e, _f;
      if (styleProp === void 0) {
        styleProp = {};
      }
      var styles2 = {};
      if (!this.instance || this.isSVG)
        return styles2;
      if (!this.isVisible) {
        return { visibility: "hidden" };
      } else {
        styles2.visibility = "";
      }
      var transformTemplate = (_a2 = this.options.visualElement) === null || _a2 === void 0 ? void 0 : _a2.getProps().transformTemplate;
      if (this.needsReset) {
        this.needsReset = false;
        styles2.opacity = "";
        styles2.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
        styles2.transform = transformTemplate ? transformTemplate(this.latestValues, "") : "none";
        return styles2;
      }
      var lead = this.getLead();
      if (!this.projectionDelta || !this.layout || !lead.target) {
        var emptyStyles = {};
        if (this.options.layoutId) {
          emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;
          emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
        }
        if (this.hasProjected && !hasTransform(this.latestValues)) {
          emptyStyles.transform = transformTemplate ? transformTemplate({}, "") : "none";
          this.hasProjected = false;
        }
        return emptyStyles;
      }
      var valuesToRender = lead.animationValues || lead.latestValues;
      this.applyTransformsToTarget();
      styles2.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
      if (transformTemplate) {
        styles2.transform = transformTemplate(valuesToRender, styles2.transform);
      }
      var _g = this.projectionDelta, x = _g.x, y = _g.y;
      styles2.transformOrigin = "".concat(x.origin * 100, "% ").concat(y.origin * 100, "% 0");
      if (lead.animationValues) {
        styles2.opacity = lead === this ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;
      } else {
        styles2.opacity = lead === this ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : "" : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;
      }
      for (var key in scaleCorrectors) {
        if (valuesToRender[key] === void 0)
          continue;
        var _h = scaleCorrectors[key], correct = _h.correct, applyTo = _h.applyTo;
        var corrected = correct(valuesToRender[key], lead);
        if (applyTo) {
          var num = applyTo.length;
          for (var i = 0; i < num; i++) {
            styles2[applyTo[i]] = corrected;
          }
        } else {
          styles2[key] = corrected;
        }
      }
      if (this.options.layoutId) {
        styles2.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || "" : "none";
      }
      return styles2;
    };
    ProjectionNode.prototype.clearSnapshot = function() {
      this.resumeFrom = this.snapshot = void 0;
    };
    ProjectionNode.prototype.resetTree = function() {
      this.root.nodes.forEach(function(node2) {
        var _a2;
        return (_a2 = node2.currentAnimation) === null || _a2 === void 0 ? void 0 : _a2.stop();
      });
      this.root.nodes.forEach(clearMeasurements);
      this.root.sharedNodes.clear();
    };
    return ProjectionNode;
  }();
}
function updateLayout(node2) {
  node2.updateLayout();
}
function notifyLayoutUpdate(node2) {
  var _a, _b, _c, _d;
  var snapshot = (_b = (_a = node2.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node2.snapshot;
  if (node2.isLead() && node2.layout && snapshot && node2.hasListeners("didUpdate")) {
    var _e = node2.layout, layout_1 = _e.actual, measuredLayout = _e.measured;
    if (node2.options.animationType === "size") {
      eachAxis(function(axis) {
        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];
        var length2 = calcLength(axisSnapshot);
        axisSnapshot.min = layout_1[axis].min;
        axisSnapshot.max = axisSnapshot.min + length2;
      });
    } else if (node2.options.animationType === "position") {
      eachAxis(function(axis) {
        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];
        var length2 = calcLength(layout_1[axis]);
        axisSnapshot.max = axisSnapshot.min + length2;
      });
    }
    var layoutDelta = createDelta();
    calcBoxDelta(layoutDelta, layout_1, snapshot.layout);
    var visualDelta = createDelta();
    if (snapshot.isShared) {
      calcBoxDelta(visualDelta, node2.applyTransform(measuredLayout, true), snapshot.measured);
    } else {
      calcBoxDelta(visualDelta, layout_1, snapshot.layout);
    }
    var hasLayoutChanged = !isDeltaZero(layoutDelta);
    var hasRelativeTargetChanged = false;
    if (!node2.resumeFrom) {
      node2.relativeParent = node2.getClosestProjectingParent();
      if (node2.relativeParent && !node2.relativeParent.resumeFrom) {
        var _f = node2.relativeParent, parentSnapshot = _f.snapshot, parentLayout = _f.layout;
        if (parentSnapshot && parentLayout) {
          var relativeSnapshot = createBox();
          calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);
          var relativeLayout = createBox();
          calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);
          if (!boxEquals(relativeSnapshot, relativeLayout)) {
            hasRelativeTargetChanged = true;
          }
        }
      }
    }
    node2.notifyListeners("didUpdate", {
      layout: layout_1,
      snapshot,
      delta: visualDelta,
      layoutDelta,
      hasLayoutChanged,
      hasRelativeTargetChanged
    });
  } else if (node2.isLead()) {
    (_d = (_c = node2.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);
  }
  node2.options.transition = void 0;
}
function clearSnapshot(node2) {
  node2.clearSnapshot();
}
function clearMeasurements(node2) {
  node2.clearMeasurements();
}
function resetTransformStyle(node2) {
  var visualElement2 = node2.options.visualElement;
  if (visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.getProps().onBeforeLayoutMeasure) {
    visualElement2.notifyBeforeLayoutMeasure();
  }
  node2.resetTransform();
}
function finishAnimation(node2) {
  node2.finishAnimation();
  node2.targetDelta = node2.relativeTarget = node2.target = void 0;
}
function resolveTargetDelta(node2) {
  node2.resolveTargetDelta();
}
function calcProjection(node2) {
  node2.calcProjection();
}
function resetRotation(node2) {
  node2.resetRotation();
}
function removeLeadSnapshots(stack) {
  stack.removeLeadSnapshot();
}
function mixAxisDelta(output, delta, p) {
  output.translate = mix(delta.translate, 0, p);
  output.scale = mix(delta.scale, 1, p);
  output.origin = delta.origin;
  output.originPoint = delta.originPoint;
}
function mixAxis(output, from, to, p) {
  output.min = mix(from.min, to.min, p);
  output.max = mix(from.max, to.max, p);
}
function mixBox(output, from, to, p) {
  mixAxis(output.x, from.x, to.x, p);
  mixAxis(output.y, from.y, to.y, p);
}
function hasOpacityCrossfade(node2) {
  return node2.animationValues && node2.animationValues.opacityExit !== void 0;
}
var defaultLayoutTransition = {
  duration: 0.45,
  ease: [0.4, 0, 0.1, 1]
};
function mountNodeEarly(node2, id2) {
  var searchNode = node2.root;
  for (var i = node2.path.length - 1; i >= 0; i--) {
    if (Boolean(node2.path[i].instance)) {
      searchNode = node2.path[i];
      break;
    }
  }
  var searchElement = searchNode && searchNode !== node2.root ? searchNode.instance : document;
  var element = searchElement.querySelector('[data-projection-id="'.concat(id2, '"]'));
  if (element)
    node2.mount(element, true);
}
function roundAxis(axis) {
  axis.min = Math.round(axis.min);
  axis.max = Math.round(axis.max);
}
function roundBox(box) {
  roundAxis(box.x);
  roundAxis(box.y);
}

// node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs
var DocumentProjectionNode = createProjectionNode({
  attachResizeListener: function(ref, notify) {
    return addDomEvent(ref, "resize", notify);
  },
  measureScroll: function() {
    return {
      x: document.documentElement.scrollLeft || document.body.scrollLeft,
      y: document.documentElement.scrollTop || document.body.scrollTop
    };
  },
  checkIsScrollRoot: function() {
    return true;
  }
});

// node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs
var rootProjectionNode = {
  current: void 0
};
var HTMLProjectionNode = createProjectionNode({
  measureScroll: function(instance) {
    return {
      x: instance.scrollLeft,
      y: instance.scrollTop
    };
  },
  defaultParent: function() {
    if (!rootProjectionNode.current) {
      var documentNode = new DocumentProjectionNode(0, {});
      documentNode.mount(window);
      documentNode.setOptions({ layoutScroll: true });
      rootProjectionNode.current = documentNode;
    }
    return rootProjectionNode.current;
  },
  resetTransform: function(instance, value) {
    instance.style.transform = value !== null && value !== void 0 ? value : "none";
  },
  checkIsScrollRoot: function(instance) {
    return Boolean(window.getComputedStyle(instance).position === "fixed");
  }
});

// node_modules/framer-motion/dist/es/render/dom/motion.mjs
var featureBundle = __assign(__assign(__assign(__assign({}, animations), gestureAnimations), drag), layoutFeatures);
var motion = createMotionProxy(function(Component, config2) {
  return createDomMotionConfig(Component, config2, featureBundle, createDomVisualElement, HTMLProjectionNode);
});

// node_modules/framer-motion/dist/es/render/dom/motion-minimal.mjs
var m = createMotionProxy(createDomMotionConfig);

// node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
var React11 = __toESM(require_react(), 1);
var import_react35 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-force-update.mjs
var import_react33 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs
var import_react32 = __toESM(require_react(), 1);
function useIsMounted() {
  var isMounted = (0, import_react32.useRef)(false);
  useIsomorphicLayoutEffect(function() {
    isMounted.current = true;
    return function() {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
}

// node_modules/framer-motion/dist/es/utils/use-force-update.mjs
function useForceUpdate2() {
  var isMounted = useIsMounted();
  var _a = __read((0, import_react33.useState)(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];
  var forceRender = (0, import_react33.useCallback)(function() {
    isMounted.current && setForcedRenderCount(forcedRenderCount + 1);
  }, [forcedRenderCount]);
  var deferredForceRender = (0, import_react33.useCallback)(function() {
    return es_default2.postRender(forceRender);
  }, [forceRender]);
  return [deferredForceRender, forcedRenderCount];
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
var React10 = __toESM(require_react(), 1);
var import_react34 = __toESM(require_react(), 1);
var PresenceChild = function(_a) {
  var children = _a.children, initial3 = _a.initial, isPresent2 = _a.isPresent, onExitComplete = _a.onExitComplete, custom = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;
  var presenceChildren = useConstant(newChildrenMap);
  var id2 = useId2();
  var context = (0, import_react34.useMemo)(function() {
    return {
      id: id2,
      initial: initial3,
      isPresent: isPresent2,
      custom,
      onExitComplete: function(childId) {
        var e_1, _a2;
        presenceChildren.set(childId, true);
        try {
          for (var _b = __values(presenceChildren.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var isComplete = _c.value;
            if (!isComplete)
              return;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b.return))
              _a2.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete();
      },
      register: function(childId) {
        presenceChildren.set(childId, false);
        return function() {
          return presenceChildren.delete(childId);
        };
      }
    };
  }, presenceAffectsLayout ? void 0 : [isPresent2]);
  (0, import_react34.useMemo)(function() {
    presenceChildren.forEach(function(_, key) {
      return presenceChildren.set(key, false);
    });
  }, [isPresent2]);
  React10.useEffect(function() {
    !isPresent2 && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());
  }, [isPresent2]);
  return React10.createElement(PresenceContext.Provider, { value: context }, children);
};
function newChildrenMap() {
  return /* @__PURE__ */ new Map();
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
var getChildKey = function(child) {
  return child.key || "";
};
function updateChildLookup(children, allChildren) {
  children.forEach(function(child) {
    var key = getChildKey(child);
    allChildren.set(key, child);
  });
}
function onlyElements(children) {
  var filtered = [];
  import_react35.Children.forEach(children, function(child) {
    if ((0, import_react35.isValidElement)(child))
      filtered.push(child);
  });
  return filtered;
}
var AnimatePresence = function(_a) {
  var children = _a.children, custom = _a.custom, _b = _a.initial, initial3 = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;
  var _d = __read(useForceUpdate2(), 1), forceRender = _d[0];
  var forceRenderLayoutGroup = (0, import_react35.useContext)(LayoutGroupContext).forceRender;
  if (forceRenderLayoutGroup)
    forceRender = forceRenderLayoutGroup;
  var isMounted = useIsMounted();
  var filteredChildren = onlyElements(children);
  var childrenToRender = filteredChildren;
  var exiting = /* @__PURE__ */ new Set();
  var presentChildren = (0, import_react35.useRef)(childrenToRender);
  var allChildren = (0, import_react35.useRef)(/* @__PURE__ */ new Map()).current;
  var isInitialRender = (0, import_react35.useRef)(true);
  useIsomorphicLayoutEffect(function() {
    isInitialRender.current = false;
    updateChildLookup(filteredChildren, allChildren);
    presentChildren.current = childrenToRender;
  });
  useUnmountEffect2(function() {
    isInitialRender.current = true;
    allChildren.clear();
    exiting.clear();
  });
  if (isInitialRender.current) {
    return React11.createElement(React11.Fragment, null, childrenToRender.map(function(child) {
      return React11.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial3 ? void 0 : false, presenceAffectsLayout }, child);
    }));
  }
  childrenToRender = __spreadArray([], __read(childrenToRender), false);
  var presentKeys = presentChildren.current.map(getChildKey);
  var targetKeys = filteredChildren.map(getChildKey);
  var numPresent = presentKeys.length;
  for (var i = 0; i < numPresent; i++) {
    var key = presentKeys[i];
    if (targetKeys.indexOf(key) === -1) {
      exiting.add(key);
    }
  }
  if (exitBeforeEnter && exiting.size) {
    childrenToRender = [];
  }
  exiting.forEach(function(key2) {
    if (targetKeys.indexOf(key2) !== -1)
      return;
    var child = allChildren.get(key2);
    if (!child)
      return;
    var insertionIndex = presentKeys.indexOf(key2);
    var onExit = function() {
      allChildren.delete(key2);
      exiting.delete(key2);
      var removeIndex = presentChildren.current.findIndex(function(presentChild) {
        return presentChild.key === key2;
      });
      presentChildren.current.splice(removeIndex, 1);
      if (!exiting.size) {
        presentChildren.current = filteredChildren;
        if (isMounted.current === false)
          return;
        forceRender();
        onExitComplete && onExitComplete();
      }
    };
    childrenToRender.splice(insertionIndex, 0, React11.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom, presenceAffectsLayout }, child));
  });
  childrenToRender = childrenToRender.map(function(child) {
    var key2 = child.key;
    return exiting.has(key2) ? child : React11.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout }, child);
  });
  if (env !== "production" && exitBeforeEnter && childrenToRender.length > 1) {
    console.warn("You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.");
  }
  return React11.createElement(React11.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map(function(child) {
    return (0, import_react35.cloneElement)(child);
  }));
};

// node_modules/framer-motion/dist/es/components/AnimateSharedLayout.mjs
var React13 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/LayoutGroup/index.mjs
var React12 = __toESM(require_react(), 1);
var import_react37 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/DeprecatedLayoutGroupContext.mjs
var import_react36 = __toESM(require_react(), 1);
var DeprecatedLayoutGroupContext = (0, import_react36.createContext)(null);

// node_modules/framer-motion/dist/es/components/MotionConfig/index.mjs
var React14 = __toESM(require_react(), 1);
var import_react38 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/LazyMotion/index.mjs
var React15 = __toESM(require_react(), 1);
var import_react39 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/Reorder/Group.mjs
var React16 = __toESM(require_react(), 1);
var import_react41 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/ReorderContext.mjs
var import_react40 = __toESM(require_react(), 1);
var ReorderContext = (0, import_react40.createContext)(null);

// node_modules/framer-motion/dist/es/components/Reorder/utils/check-reorder.mjs
function checkReorder(order4, value, offset2, velocity) {
  if (!velocity)
    return order4;
  var index2 = order4.findIndex(function(item2) {
    return item2.value === value;
  });
  if (index2 === -1)
    return order4;
  var nextOffset = velocity > 0 ? 1 : -1;
  var nextItem = order4[index2 + nextOffset];
  if (!nextItem)
    return order4;
  var item = order4[index2];
  var nextLayout = nextItem.layout;
  var nextItemCenter = mix(nextLayout.min, nextLayout.max, 0.5);
  if (nextOffset === 1 && item.layout.max + offset2 > nextItemCenter || nextOffset === -1 && item.layout.min + offset2 < nextItemCenter) {
    return moveItem(order4, index2, index2 + nextOffset);
  }
  return order4;
}

// node_modules/framer-motion/dist/es/components/Reorder/Group.mjs
function ReorderGroup(_a, externalRef) {
  var children = _a.children, _b = _a.as, as = _b === void 0 ? "ul" : _b, _c = _a.axis, axis = _c === void 0 ? "y" : _c, onReorder = _a.onReorder, values = _a.values, props = __rest(_a, ["children", "as", "axis", "onReorder", "values"]);
  var Component = useConstant(function() {
    return motion(as);
  });
  var order4 = [];
  var isReordering = (0, import_react41.useRef)(false);
  invariant(Boolean(values), "Reorder.Group must be provided a values prop");
  var context = {
    axis,
    registerItem: function(value, layout2) {
      if (layout2 && order4.findIndex(function(entry) {
        return value === entry.value;
      }) === -1) {
        order4.push({ value, layout: layout2[axis] });
        order4.sort(compareMin);
      }
    },
    updateOrder: function(id2, offset2, velocity) {
      if (isReordering.current)
        return;
      var newOrder = checkReorder(order4, id2, offset2, velocity);
      if (order4 !== newOrder) {
        isReordering.current = true;
        onReorder(newOrder.map(getValue).filter(function(value) {
          return values.indexOf(value) !== -1;
        }));
      }
    }
  };
  (0, import_react41.useEffect)(function() {
    isReordering.current = false;
  });
  return React16.createElement(Component, __assign({}, props, { ref: externalRef }), React16.createElement(ReorderContext.Provider, { value: context }, children));
}
var Group = (0, import_react41.forwardRef)(ReorderGroup);
function getValue(item) {
  return item.value;
}
function compareMin(a2, b2) {
  return a2.layout.min - b2.layout.min;
}

// node_modules/framer-motion/dist/es/components/Reorder/Item.mjs
var React17 = __toESM(require_react(), 1);
var import_react43 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/value/use-motion-value.mjs
var import_react42 = __toESM(require_react(), 1);
function useMotionValue(initial3) {
  var value = useConstant(function() {
    return motionValue(initial3);
  });
  var isStatic = (0, import_react42.useContext)(MotionConfigContext).isStatic;
  if (isStatic) {
    var _a = __read((0, import_react42.useState)(initial3), 2), setLatest_1 = _a[1];
    (0, import_react42.useEffect)(function() {
      return value.onChange(setLatest_1);
    }, []);
  }
  return value;
}

// node_modules/framer-motion/dist/es/utils/transform.mjs
var isCustomValueType = function(v) {
  return typeof v === "object" && v.mix;
};
var getMixer2 = function(v) {
  return isCustomValueType(v) ? v.mix : void 0;
};
function transform2() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var useImmediate = !Array.isArray(args[0]);
  var argOffset = useImmediate ? 0 : -1;
  var inputValue = args[0 + argOffset];
  var inputRange = args[1 + argOffset];
  var outputRange = args[2 + argOffset];
  var options = args[3 + argOffset];
  var interpolator = interpolate(inputRange, outputRange, __assign({ mixer: getMixer2(outputRange[0]) }, options));
  return useImmediate ? interpolator(inputValue) : interpolator;
}

// node_modules/framer-motion/dist/es/value/use-on-change.mjs
function useMultiOnChange(values, handler) {
  useIsomorphicLayoutEffect(function() {
    var subscriptions = values.map(function(value) {
      return value.onChange(handler);
    });
    return function() {
      return subscriptions.forEach(function(unsubscribe) {
        return unsubscribe();
      });
    };
  });
}

// node_modules/framer-motion/dist/es/value/use-combine-values.mjs
function useCombineMotionValues(values, combineValues) {
  var value = useMotionValue(combineValues());
  var updateValue = function() {
    return value.set(combineValues());
  };
  updateValue();
  useMultiOnChange(values, function() {
    return es_default2.update(updateValue, false, true);
  });
  return value;
}

// node_modules/framer-motion/dist/es/value/use-transform.mjs
function useTransform(input, inputRangeOrTransformer, outputRange, options) {
  var transformer = typeof inputRangeOrTransformer === "function" ? inputRangeOrTransformer : transform2(inputRangeOrTransformer, outputRange, options);
  return Array.isArray(input) ? useListTransform(input, transformer) : useListTransform([input], function(_a) {
    var _b = __read(_a, 1), latest = _b[0];
    return transformer(latest);
  });
}
function useListTransform(values, transformer) {
  var latest = useConstant(function() {
    return [];
  });
  return useCombineMotionValues(values, function() {
    latest.length = 0;
    var numValues = values.length;
    for (var i = 0; i < numValues; i++) {
      latest[i] = values[i].get();
    }
    return transformer(latest);
  });
}

// node_modules/framer-motion/dist/es/components/Reorder/Item.mjs
function useDefaultMotionValue(value, defaultValue) {
  if (defaultValue === void 0) {
    defaultValue = 0;
  }
  return isMotionValue(value) ? value : useMotionValue(defaultValue);
}
function ReorderItem(_a, externalRef) {
  var children = _a.children, style2 = _a.style, value = _a.value, _b = _a.as, as = _b === void 0 ? "li" : _b, onDrag = _a.onDrag, _c = _a.layout, layout2 = _c === void 0 ? true : _c, props = __rest(_a, ["children", "style", "value", "as", "onDrag", "layout"]);
  var Component = useConstant(function() {
    return motion(as);
  });
  var context = (0, import_react43.useContext)(ReorderContext);
  var point = {
    x: useDefaultMotionValue(style2 === null || style2 === void 0 ? void 0 : style2.x),
    y: useDefaultMotionValue(style2 === null || style2 === void 0 ? void 0 : style2.y)
  };
  var zIndex = useTransform([point.x, point.y], function(_a2) {
    var _b2 = __read(_a2, 2), latestX = _b2[0], latestY = _b2[1];
    return latestX || latestY ? 1 : "unset";
  });
  var measuredLayout = (0, import_react43.useRef)(null);
  invariant(Boolean(context), "Reorder.Item must be a child of Reorder.Group");
  var _d = context, axis = _d.axis, registerItem = _d.registerItem, updateOrder = _d.updateOrder;
  (0, import_react43.useEffect)(function() {
    registerItem(value, measuredLayout.current);
  }, [context]);
  return React17.createElement(Component, __assign({ drag: axis }, props, { dragSnapToOrigin: true, style: __assign(__assign({}, style2), { x: point.x, y: point.y, zIndex }), layout: layout2, onDrag: function(event, gesturePoint) {
    var velocity = gesturePoint.velocity;
    velocity[axis] && updateOrder(value, point[axis].get(), velocity[axis]);
    onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, gesturePoint);
  }, onLayoutMeasure: function(measured) {
    measuredLayout.current = measured;
  }, ref: externalRef }), children);
}
var Item = (0, import_react43.forwardRef)(ReorderItem);

// node_modules/framer-motion/dist/es/render/dom/features-animation.mjs
var domAnimation = __assign(__assign({ renderer: createDomVisualElement }, animations), gestureAnimations);

// node_modules/framer-motion/dist/es/render/dom/features-max.mjs
var domMax = __assign(__assign(__assign(__assign({}, domAnimation), drag), layoutFeatures), { projectionNodeConstructor: HTMLProjectionNode });

// node_modules/framer-motion/dist/es/value/use-spring.mjs
var import_react44 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/value/use-velocity.mjs
var import_react45 = __toESM(require_react(), 1);

// node_modules/@motionone/utils/dist/noop.es.js
var noopReturn = (v) => v;

// node_modules/@motionone/utils/dist/time.es.js
var time = {
  ms: (seconds) => seconds * 1e3,
  s: (milliseconds) => milliseconds / 1e3
};

// node_modules/@motionone/utils/dist/velocity.es.js
function velocityPerSecond2(velocity, frameDuration) {
  return frameDuration ? velocity * (1e3 / frameDuration) : 0;
}

// node_modules/@motionone/dom/dist/animate/utils/transforms.es.js
var axes = ["", "X", "Y", "Z"];
var order2 = ["translate", "scale", "rotate", "skew"];
var rotation = {
  syntax: "<angle>",
  initialValue: "0deg",
  toDefaultUnit: (v) => v + "deg"
};
var baseTransformProperties = {
  translate: {
    syntax: "<length-percentage>",
    initialValue: "0px",
    toDefaultUnit: (v) => v + "px"
  },
  rotate: rotation,
  scale: {
    syntax: "<number>",
    initialValue: 1,
    toDefaultUnit: noopReturn
  },
  skew: rotation
};
var transformDefinitions = /* @__PURE__ */ new Map();
var asTransformCssVar = (name) => `--motion-${name}`;
var transforms = ["x", "y", "z"];
order2.forEach((name) => {
  axes.forEach((axis) => {
    transforms.push(name + axis);
    transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);
  });
});
var transformLookup = new Set(transforms);

// node_modules/@motionone/easing/dist/cubic-bezier.es.js
var calcBezier2 = (t, a1, a2) => (((1 - 3 * a2 + 3 * a1) * t + (3 * a2 - 6 * a1)) * t + 3 * a1) * t;
var subdivisionPrecision2 = 1e-7;
var subdivisionMaxIterations2 = 12;
function binarySubdivide2(x, lowerBound, upperBound, mX1, mX2) {
  let currentX;
  let currentT;
  let i = 0;
  do {
    currentT = lowerBound + (upperBound - lowerBound) / 2;
    currentX = calcBezier2(currentT, mX1, mX2) - x;
    if (currentX > 0) {
      upperBound = currentT;
    } else {
      lowerBound = currentT;
    }
  } while (Math.abs(currentX) > subdivisionPrecision2 && ++i < subdivisionMaxIterations2);
  return currentT;
}
function cubicBezier2(mX1, mY1, mX2, mY2) {
  if (mX1 === mY1 && mX2 === mY2)
    return noopReturn;
  const getTForX = (aX) => binarySubdivide2(aX, 0, 1, mX1, mX2);
  return (t) => t === 0 || t === 1 ? t : calcBezier2(getTForX(t), mY1, mY2);
}

// node_modules/@motionone/animation/dist/utils/easing.es.js
var namedEasings = {
  ease: cubicBezier2(0.25, 0.1, 0.25, 1),
  "ease-in": cubicBezier2(0.42, 0, 1, 1),
  "ease-in-out": cubicBezier2(0.42, 0, 0.58, 1),
  "ease-out": cubicBezier2(0, 0, 0.58, 1)
};

// node_modules/@motionone/dom/dist/animate/utils/feature-detection.es.js
var testAnimation = (keyframes4) => document.createElement("div").animate(keyframes4, { duration: 1e-3 });
var featureTests = {
  cssRegisterProperty: () => typeof CSS !== "undefined" && Object.hasOwnProperty.call(CSS, "registerProperty"),
  waapi: () => Object.hasOwnProperty.call(Element.prototype, "animate"),
  partialKeyframes: () => {
    try {
      testAnimation({ opacity: [1] });
    } catch (e) {
      return false;
    }
    return true;
  },
  finished: () => Boolean(testAnimation({ opacity: [0, 1] }).finished)
};
var results = {};
var supports = {};
for (const key in featureTests) {
  supports[key] = () => {
    if (results[key] === void 0)
      results[key] = featureTests[key]();
    return results[key];
  };
}

// node_modules/@motionone/dom/dist/utils/resolve-elements.es.js
function resolveElements(elements, selectorCache) {
  var _a;
  if (typeof elements === "string") {
    if (selectorCache) {
      (_a = selectorCache[elements]) !== null && _a !== void 0 ? _a : selectorCache[elements] = document.querySelectorAll(elements);
      elements = selectorCache[elements];
    } else {
      elements = document.querySelectorAll(elements);
    }
  } else if (elements instanceof Element) {
    elements = [elements];
  }
  return Array.from(elements || []);
}

// node_modules/@motionone/dom/node_modules/tslib/tslib.es6.js
function __rest3(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}

// node_modules/@motionone/generators/dist/utils/velocity.es.js
var sampleT = 5;
function calcGeneratorVelocity(resolveValue, t, current) {
  const prevT = Math.max(t - sampleT, 0);
  return velocityPerSecond2(current - resolveValue(prevT), t - prevT);
}

// node_modules/@motionone/generators/dist/spring/defaults.es.js
var defaults2 = {
  stiffness: 100,
  damping: 10,
  mass: 1
};

// node_modules/@motionone/generators/dist/spring/utils.es.js
var calcDampingRatio = (stiffness = defaults2.stiffness, damping = defaults2.damping, mass = defaults2.mass) => damping / (2 * Math.sqrt(stiffness * mass));

// node_modules/@motionone/generators/dist/utils/has-reached-target.es.js
function hasReachedTarget(origin, target, current) {
  return origin < target && current >= target || origin > target && current <= target;
}

// node_modules/@motionone/generators/dist/spring/index.es.js
var spring2 = ({ stiffness = defaults2.stiffness, damping = defaults2.damping, mass = defaults2.mass, from = 0, to = 1, velocity = 0, restSpeed = 2, restDistance = 0.5 } = {}) => {
  velocity = velocity ? time.s(velocity) : 0;
  const state = {
    done: false,
    hasReachedTarget: false,
    current: from,
    target: to
  };
  const initialDelta = to - from;
  const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1e3;
  const dampingRatio = calcDampingRatio(stiffness, damping, mass);
  let resolveSpring;
  if (dampingRatio < 1) {
    const angularFreq = undampedAngularFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
    resolveSpring = (t) => to - Math.exp(-dampingRatio * undampedAngularFreq * t) * ((-velocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));
  } else {
    resolveSpring = (t) => {
      return to - Math.exp(-undampedAngularFreq * t) * (initialDelta + (-velocity + undampedAngularFreq * initialDelta) * t);
    };
  }
  return (t) => {
    state.current = resolveSpring(t);
    const currentVelocity = t === 0 ? velocity : calcGeneratorVelocity(resolveSpring, t, state.current);
    const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
    const isBelowDisplacementThreshold = Math.abs(to - state.current) <= restDistance;
    state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
    state.hasReachedTarget = hasReachedTarget(from, to, state.current);
    return state;
  };
};

// node_modules/@motionone/generators/dist/glide/index.es.js
var glide = ({ from = 0, velocity = 0, power = 0.8, decay: decay2 = 0.325, bounceDamping, bounceStiffness, changeTarget, min: min2, max: max2, restDistance = 0.5, restSpeed }) => {
  decay2 = time.ms(decay2);
  const state = {
    hasReachedTarget: false,
    done: false,
    current: from,
    target: from
  };
  const isOutOfBounds = (v) => min2 !== void 0 && v < min2 || max2 !== void 0 && v > max2;
  const nearestBoundary = (v) => {
    if (min2 === void 0)
      return max2;
    if (max2 === void 0)
      return min2;
    return Math.abs(min2 - v) < Math.abs(max2 - v) ? min2 : max2;
  };
  let amplitude = power * velocity;
  const ideal = from + amplitude;
  const target = changeTarget === void 0 ? ideal : changeTarget(ideal);
  state.target = target;
  if (target !== ideal)
    amplitude = target - from;
  const calcDelta = (t) => -amplitude * Math.exp(-t / decay2);
  const calcLatest = (t) => target + calcDelta(t);
  const applyFriction = (t) => {
    const delta = calcDelta(t);
    const latest = calcLatest(t);
    state.done = Math.abs(delta) <= restDistance;
    state.current = state.done ? target : latest;
  };
  let timeReachedBoundary;
  let spring$1;
  const checkCatchBoundary = (t) => {
    if (!isOutOfBounds(state.current))
      return;
    timeReachedBoundary = t;
    spring$1 = spring2({
      from: state.current,
      to: nearestBoundary(state.current),
      velocity: calcGeneratorVelocity(calcLatest, t, state.current),
      damping: bounceDamping,
      stiffness: bounceStiffness,
      restDistance,
      restSpeed
    });
  };
  checkCatchBoundary(0);
  return (t) => {
    let hasUpdatedFrame = false;
    if (!spring$1 && timeReachedBoundary === void 0) {
      hasUpdatedFrame = true;
      applyFriction(t);
      checkCatchBoundary(t);
    }
    if (timeReachedBoundary !== void 0 && t > timeReachedBoundary) {
      state.hasReachedTarget = true;
      return spring$1(t - timeReachedBoundary);
    } else {
      state.hasReachedTarget = false;
      !hasUpdatedFrame && applyFriction(t);
      return state;
    }
  };
};

// node_modules/@motionone/generators/dist/utils/pregenerate-keyframes.es.js
var timeStep = 10;
var maxDuration2 = 1e4;
function pregenerateKeyframes(generator) {
  let overshootDuration = void 0;
  let timestamp = timeStep;
  let state = generator(0);
  const keyframes4 = [state.current];
  while (!state.done && timestamp < maxDuration2) {
    state = generator(timestamp);
    keyframes4.push(state.done ? state.target : state.current);
    if (overshootDuration === void 0 && state.hasReachedTarget) {
      overshootDuration = timestamp;
    }
    timestamp += timeStep;
  }
  const duration = timestamp - timeStep;
  if (keyframes4.length === 1)
    keyframes4.push(state.current);
  return {
    keyframes: keyframes4,
    duration: duration / 1e3,
    overshootDuration: (overshootDuration !== null && overshootDuration !== void 0 ? overshootDuration : duration) / 1e3
  };
}

// node_modules/@motionone/dom/dist/easing/create-generator-easing.es.js
function createGeneratorEasing(createGenerator) {
  const keyframesCache = /* @__PURE__ */ new WeakMap();
  return (options = {}) => {
    const generatorCache = /* @__PURE__ */ new Map();
    const getGenerator = (from = 0, to = 100, velocity = 0, isScale = false) => {
      const key = `${from}-${to}-${velocity}-${isScale}`;
      if (!generatorCache.has(key)) {
        generatorCache.set(key, createGenerator(Object.assign({
          from,
          to,
          velocity,
          restSpeed: isScale ? 0.05 : 2,
          restDistance: isScale ? 0.01 : 0.5
        }, options)));
      }
      return generatorCache.get(key);
    };
    const getKeyframes = (generator) => {
      if (!keyframesCache.has(generator)) {
        keyframesCache.set(generator, pregenerateKeyframes(generator));
      }
      return keyframesCache.get(generator);
    };
    return {
      createAnimation: (keyframes4, getOrigin2, canUseGenerator, name, motionValue2) => {
        var _a, _b;
        let settings;
        const numKeyframes = keyframes4.length;
        let shouldUseGenerator = canUseGenerator && numKeyframes <= 2 && keyframes4.every(isNumberOrNull);
        if (shouldUseGenerator) {
          const target = keyframes4[numKeyframes - 1];
          const unresolvedOrigin = numKeyframes === 1 ? null : keyframes4[0];
          let velocity = 0;
          let origin = 0;
          const prevGenerator = motionValue2 === null || motionValue2 === void 0 ? void 0 : motionValue2.generator;
          if (prevGenerator) {
            const { animation, generatorStartTime } = motionValue2;
            const startTime = (animation === null || animation === void 0 ? void 0 : animation.startTime) || generatorStartTime || 0;
            const currentTime = (animation === null || animation === void 0 ? void 0 : animation.currentTime) || performance.now() - startTime;
            const prevGeneratorCurrent = prevGenerator(currentTime).current;
            origin = (_a = unresolvedOrigin) !== null && _a !== void 0 ? _a : prevGeneratorCurrent;
            if (numKeyframes === 1 || numKeyframes === 2 && keyframes4[0] === null) {
              velocity = calcGeneratorVelocity((t) => prevGenerator(t).current, currentTime, prevGeneratorCurrent);
            }
          } else {
            origin = (_b = unresolvedOrigin) !== null && _b !== void 0 ? _b : parseFloat(getOrigin2());
          }
          const generator = getGenerator(origin, target, velocity, name === null || name === void 0 ? void 0 : name.includes("scale"));
          const keyframesMetadata = getKeyframes(generator);
          settings = Object.assign(Object.assign({}, keyframesMetadata), { easing: "linear" });
          if (motionValue2) {
            motionValue2.generator = generator;
            motionValue2.generatorStartTime = performance.now();
          }
        } else {
          const keyframesMetadata = getKeyframes(getGenerator(0, 100));
          settings = {
            easing: "ease",
            duration: keyframesMetadata.overshootDuration
          };
        }
        return settings;
      }
    };
  };
}
var isNumberOrNull = (value) => typeof value !== "string";

// node_modules/@motionone/dom/dist/easing/spring/index.es.js
var spring3 = createGeneratorEasing(spring2);

// node_modules/@motionone/dom/dist/easing/glide/index.es.js
var glide2 = createGeneratorEasing(glide);

// node_modules/@motionone/dom/dist/gestures/in-view.es.js
var thresholds = {
  any: 0,
  all: 1
};
function inView(elementOrSelector, onStart, { root, margin: rootMargin, amount = "any" } = {}) {
  if (typeof IntersectionObserver === "undefined") {
    return () => {
    };
  }
  const elements = resolveElements(elementOrSelector);
  const activeIntersections = /* @__PURE__ */ new WeakMap();
  const onIntersectionChange = (entries) => {
    entries.forEach((entry) => {
      const onEnd = activeIntersections.get(entry.target);
      if (entry.isIntersecting === Boolean(onEnd))
        return;
      if (entry.isIntersecting) {
        const newOnEnd = onStart(entry);
        if (typeof newOnEnd === "function") {
          activeIntersections.set(entry.target, newOnEnd);
        } else {
          observer.unobserve(entry.target);
        }
      } else if (onEnd) {
        onEnd(entry);
        activeIntersections.delete(entry.target);
      }
    });
  };
  const observer = new IntersectionObserver(onIntersectionChange, {
    root,
    rootMargin,
    threshold: typeof amount === "number" ? amount : thresholds[amount]
  });
  elements.forEach((element) => observer.observe(element));
  return () => observer.disconnect();
}

// node_modules/@motionone/dom/dist/state/utils/events.es.js
function dispatchPointerEvent(element, name, event) {
  element.dispatchEvent(new CustomEvent(name, { detail: { originalEvent: event } }));
}
function dispatchViewEvent(element, name, entry) {
  element.dispatchEvent(new CustomEvent(name, { detail: { originalEntry: entry } }));
}

// node_modules/@motionone/dom/dist/state/gestures/in-view.es.js
var inView2 = {
  isActive: (options) => Boolean(options.inView),
  subscribe: (element, { enable, disable }, { inViewOptions = {} }) => {
    const { once } = inViewOptions, viewOptions = __rest3(inViewOptions, ["once"]);
    return inView(element, (enterEntry) => {
      enable();
      dispatchViewEvent(element, "viewenter", enterEntry);
      if (!once) {
        return (leaveEntry) => {
          disable();
          dispatchViewEvent(element, "viewleave", leaveEntry);
        };
      }
    }, viewOptions);
  }
};

// node_modules/@motionone/dom/dist/state/gestures/hover.es.js
var mouseEvent = (element, name, action) => (event) => {
  if (event.pointerType && event.pointerType !== "mouse")
    return;
  action();
  dispatchPointerEvent(element, name, event);
};
var hover = {
  isActive: (options) => Boolean(options.hover),
  subscribe: (element, { enable, disable }) => {
    const onEnter = mouseEvent(element, "hoverstart", enable);
    const onLeave = mouseEvent(element, "hoverend", disable);
    element.addEventListener("pointerenter", onEnter);
    element.addEventListener("pointerleave", onLeave);
    return () => {
      element.removeEventListener("pointerenter", onEnter);
      element.removeEventListener("pointerleave", onLeave);
    };
  }
};

// node_modules/@motionone/dom/dist/state/gestures/press.es.js
var press = {
  isActive: (options) => Boolean(options.press),
  subscribe: (element, { enable, disable }) => {
    const onPointerUp = (event) => {
      disable();
      dispatchPointerEvent(element, "pressend", event);
      window.removeEventListener("pointerup", onPointerUp);
    };
    const onPointerDown = (event) => {
      enable();
      dispatchPointerEvent(element, "pressstart", event);
      window.addEventListener("pointerup", onPointerUp);
    };
    element.addEventListener("pointerdown", onPointerDown);
    return () => {
      element.removeEventListener("pointerdown", onPointerDown);
      window.removeEventListener("pointerup", onPointerUp);
    };
  }
};

// node_modules/@motionone/dom/dist/state/index.es.js
var gestures = { inView: inView2, hover, press };
var stateTypes = ["initial", "animate", ...Object.keys(gestures), "exit"];

// node_modules/framer-motion/dist/es/utils/use-animation-frame.mjs
var import_react46 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/animation/use-animation.mjs
var import_react47 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-cycle.mjs
var import_react48 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-in-view.mjs
var import_react49 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/gestures/drag/use-drag-controls.mjs
var DragControls = function() {
  function DragControls2() {
    this.componentControls = /* @__PURE__ */ new Set();
  }
  DragControls2.prototype.subscribe = function(controls) {
    var _this = this;
    this.componentControls.add(controls);
    return function() {
      return _this.componentControls.delete(controls);
    };
  };
  DragControls2.prototype.start = function(event, options) {
    this.componentControls.forEach(function(controls) {
      controls.start(event.nativeEvent || event, options);
    });
  };
  return DragControls2;
}();

// node_modules/framer-motion/dist/es/utils/use-instant-transition.mjs
var import_react50 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/projection/use-reset-projection.mjs
var React18 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/animation/use-animated-state.mjs
var import_react51 = __toESM(require_react(), 1);
var createObject = function() {
  return {};
};
var stateVisualElement = visualElement({
  build: function() {
  },
  measureViewportBox: createBox,
  resetTransform: function() {
  },
  restoreTransform: function() {
  },
  removeValueFromRenderState: function() {
  },
  render: function() {
  },
  scrapeMotionValuesFromProps: createObject,
  readValueFromInstance: function(_state, key, options) {
    return options.initialState[key] || 0;
  },
  makeTargetAnimatable: function(element, _a) {
    var transition3 = _a.transition, transitionEnd = _a.transitionEnd, target = __rest(_a, ["transition", "transitionEnd"]);
    var origin = getOrigin(target, transition3 || {}, element);
    checkTargetForNewValues(element, target, origin);
    return __assign({ transition: transition3, transitionEnd }, target);
  }
});
var useVisualState = makeUseVisualState({
  scrapeMotionValuesFromProps: createObject,
  createRenderState: createObject
});

// node_modules/@chakra-ui/toast/dist/chakra-ui-toast.esm.js
function _extends7() {
  _extends7 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends7.apply(this, arguments);
}
function getToastPlacement(position2, dir) {
  var _logical$dir;
  var computedPosition = position2 != null ? position2 : "bottom";
  var logicals2 = {
    "top-start": {
      ltr: "top-left",
      rtl: "top-right"
    },
    "top-end": {
      ltr: "top-right",
      rtl: "top-left"
    },
    "bottom-start": {
      ltr: "bottom-left",
      rtl: "bottom-right"
    },
    "bottom-end": {
      ltr: "bottom-right",
      rtl: "bottom-left"
    }
  };
  var logical = logicals2[computedPosition];
  return (_logical$dir = logical == null ? void 0 : logical[dir]) != null ? _logical$dir : computedPosition;
}
function findToast(toasts, id2) {
  var position2 = getToastPosition(toasts, id2);
  var index2 = position2 ? toasts[position2].findIndex(function(toast) {
    return toast.id === id2;
  }) : -1;
  return {
    position: position2,
    index: index2
  };
}
var getToastPosition = function getToastPosition2(toasts, id2) {
  var _Object$values$flat$f;
  return (_Object$values$flat$f = Object.values(toasts).flat().find(function(toast) {
    return toast.id === id2;
  })) == null ? void 0 : _Object$values$flat$f.position;
};
function getToastStyle(position2) {
  var isRighty = position2.includes("right");
  var isLefty = position2.includes("left");
  var alignItems = "center";
  if (isRighty)
    alignItems = "flex-end";
  if (isLefty)
    alignItems = "flex-start";
  return {
    display: "flex",
    flexDirection: "column",
    alignItems
  };
}
function getToastListStyle(position2) {
  var isTopOrBottom = position2 === "top" || position2 === "bottom";
  var margin = isTopOrBottom ? "0 auto" : void 0;
  var top2 = position2.includes("top") ? "env(safe-area-inset-top, 0px)" : void 0;
  var bottom2 = position2.includes("bottom") ? "env(safe-area-inset-bottom, 0px)" : void 0;
  var right2 = !position2.includes("left") ? "env(safe-area-inset-right, 0px)" : void 0;
  var left2 = !position2.includes("right") ? "env(safe-area-inset-left, 0px)" : void 0;
  return {
    position: "fixed",
    zIndex: 5500,
    pointerEvents: "none",
    display: "flex",
    flexDirection: "column",
    margin,
    top: top2,
    bottom: bottom2,
    right: right2,
    left: left2
  };
}
var initialState = {
  top: [],
  "top-left": [],
  "top-right": [],
  "bottom-left": [],
  bottom: [],
  "bottom-right": []
};
var toastStore = createStore(initialState);
function createStore(initialState2) {
  var state = initialState2;
  var listeners = /* @__PURE__ */ new Set();
  var setState = function setState2(setStateFn) {
    state = setStateFn(state);
    listeners.forEach(function(l) {
      return l();
    });
  };
  return {
    getState: function getState() {
      return state;
    },
    subscribe: function subscribe(listener) {
      listeners.add(listener);
      return function() {
        setState(function() {
          return initialState2;
        });
        listeners["delete"](listener);
      };
    },
    removeToast: function removeToast(id2, position2) {
      setState(function(prevState) {
        var _extends210;
        return _extends7({}, prevState, (_extends210 = {}, _extends210[position2] = prevState[position2].filter(function(toast) {
          return toast.id != id2;
        }), _extends210));
      });
    },
    notify: function notify(message, options) {
      var toast = createToast(message, options);
      var position2 = toast.position, id2 = toast.id;
      setState(function(prevToasts) {
        var _prevToasts$position, _prevToasts$position2, _extends310;
        var isTop = position2.includes("top");
        var toasts = isTop ? [toast].concat((_prevToasts$position = prevToasts[position2]) != null ? _prevToasts$position : []) : [].concat((_prevToasts$position2 = prevToasts[position2]) != null ? _prevToasts$position2 : [], [toast]);
        return _extends7({}, prevToasts, (_extends310 = {}, _extends310[position2] = toasts, _extends310));
      });
      return id2;
    },
    update: function update(id2, options) {
      if (!id2)
        return;
      setState(function(prevState) {
        var nextState = _extends7({}, prevState);
        var _findToast = findToast(nextState, id2), position2 = _findToast.position, index2 = _findToast.index;
        if (position2 && index2 !== -1) {
          nextState[position2][index2] = _extends7({}, nextState[position2][index2], options, {
            message: createRenderToast(options)
          });
        }
        return nextState;
      });
    },
    closeAll: function closeAll(_temp) {
      var _ref2 = _temp === void 0 ? {} : _temp, positions = _ref2.positions;
      setState(function(prev) {
        var allPositions = ["bottom", "bottom-right", "bottom-left", "top", "top-left", "top-right"];
        var positionsToClose = positions != null ? positions : allPositions;
        return positionsToClose.reduce(function(acc, position2) {
          acc[position2] = prev[position2].map(function(toast) {
            return _extends7({}, toast, {
              requestClose: true
            });
          });
          return acc;
        }, _extends7({}, prev));
      });
    },
    close: function close(id2) {
      setState(function(prevState) {
        var _extends42;
        var position2 = getToastPosition(prevState, id2);
        if (!position2)
          return prevState;
        return _extends7({}, prevState, (_extends42 = {}, _extends42[position2] = prevState[position2].map(function(toast) {
          if (toast.id == id2) {
            return _extends7({}, toast, {
              requestClose: true
            });
          }
          return toast;
        }), _extends42));
      });
    },
    isActive: function isActive(id2) {
      return Boolean(findToast(toastStore.getState(), id2).position);
    }
  };
}
var counter2 = 0;
function createToast(message, options) {
  var _options$id, _options$position;
  if (options === void 0) {
    options = {};
  }
  counter2 += 1;
  var id2 = (_options$id = options.id) != null ? _options$id : counter2;
  var position2 = (_options$position = options.position) != null ? _options$position : "bottom";
  return {
    id: id2,
    message,
    position: position2,
    duration: options.duration,
    onCloseComplete: options.onCloseComplete,
    onRequestRemove: function onRequestRemove() {
      return toastStore.removeToast(String(id2), position2);
    },
    status: options.status,
    requestClose: false,
    containerStyle: options.containerStyle
  };
}
var Toast = function Toast2(props) {
  var status = props.status, _props$variant = props.variant, variant = _props$variant === void 0 ? "solid" : _props$variant, id2 = props.id, title = props.title, isClosable = props.isClosable, onClose = props.onClose, description = props.description, icon = props.icon;
  var alertTitleId = typeof id2 !== "undefined" ? "toast-" + id2 + "-title" : void 0;
  return React19.createElement(Alert2, {
    status,
    variant,
    id: String(id2),
    alignItems: "start",
    borderRadius: "md",
    boxShadow: "lg",
    paddingEnd: 8,
    textAlign: "start",
    width: "auto",
    "aria-labelledby": alertTitleId
  }, React19.createElement(AlertIcon, null, icon), React19.createElement(chakra.div, {
    flex: "1",
    maxWidth: "100%"
  }, title && React19.createElement(AlertTitle, {
    id: alertTitleId
  }, title), description && React19.createElement(AlertDescription, {
    display: "block"
  }, description)), isClosable && React19.createElement(CloseButton2, {
    size: "sm",
    onClick: onClose,
    position: "absolute",
    insetEnd: 1,
    top: 1
  }));
};
function createRenderToast(options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, render = _options.render, _options$toastCompone = _options.toastComponent, ToastComponent2 = _options$toastCompone === void 0 ? Toast : _options$toastCompone;
  var renderToast = function renderToast2(props) {
    if (isFunction(render)) {
      return render(props);
    }
    return React19.createElement(ToastComponent2, _extends7({}, props, options));
  };
  return renderToast;
}
function createToastFn(dir, defaultOptions) {
  var normalizeToastOptions = function normalizeToastOptions2(options) {
    var _options$position;
    return _extends7({}, defaultOptions, options, {
      position: getToastPlacement((_options$position = options == null ? void 0 : options.position) != null ? _options$position : defaultOptions == null ? void 0 : defaultOptions.position, dir)
    });
  };
  var toast = function toast2(options) {
    var normalizedToastOptions = normalizeToastOptions(options);
    var Message = createRenderToast(normalizedToastOptions);
    return toastStore.notify(Message, normalizedToastOptions);
  };
  toast.update = function(id2, options) {
    toastStore.update(id2, normalizeToastOptions(options));
  };
  toast.promise = function(promise, options) {
    var id2 = toast(_extends7({}, options.loading, {
      status: "loading",
      duration: null
    }));
    promise.then(function(data) {
      return toast.update(id2, _extends7({
        status: "success",
        duration: 5e3
      }, runIfFn(options.success, data)));
    })["catch"](function(error) {
      return toast.update(id2, _extends7({
        status: "error",
        duration: 5e3
      }, runIfFn(options.error, error)));
    });
  };
  toast.closeAll = toastStore.closeAll;
  toast.close = toastStore.close;
  toast.isActive = toastStore.isActive;
  return toast;
}
function useToast(defaultOptions) {
  var _useChakra = useChakra(), theme2 = _useChakra.theme;
  return React19.useMemo(function() {
    return createToastFn(theme2.direction, defaultOptions);
  }, [defaultOptions, theme2.direction]);
}
var toastMotionVariants = {
  initial: function initial(props) {
    var _ref2;
    var position2 = props.position;
    var dir = ["top", "bottom"].includes(position2) ? "y" : "x";
    var factor = ["top-right", "bottom-right"].includes(position2) ? 1 : -1;
    if (position2 === "bottom")
      factor = 1;
    return _ref2 = {
      opacity: 0
    }, _ref2[dir] = factor * 24, _ref2;
  },
  animate: {
    opacity: 1,
    y: 0,
    x: 0,
    scale: 1,
    transition: {
      duration: 0.4,
      ease: [0.4, 0, 0.2, 1]
    }
  },
  exit: {
    opacity: 0,
    scale: 0.85,
    transition: {
      duration: 0.2,
      ease: [0.4, 0, 1, 1]
    }
  }
};
var ToastComponent = React19.memo(function(props) {
  var id2 = props.id, message = props.message, onCloseComplete = props.onCloseComplete, onRequestRemove = props.onRequestRemove, _props$requestClose = props.requestClose, requestClose = _props$requestClose === void 0 ? false : _props$requestClose, _props$position = props.position, position2 = _props$position === void 0 ? "bottom" : _props$position, _props$duration = props.duration, duration = _props$duration === void 0 ? 5e3 : _props$duration, containerStyle = props.containerStyle, _props$motionVariants = props.motionVariants, motionVariants2 = _props$motionVariants === void 0 ? toastMotionVariants : _props$motionVariants, _props$toastSpacing = props.toastSpacing, toastSpacing = _props$toastSpacing === void 0 ? "0.5rem" : _props$toastSpacing;
  var _React$useState = React19.useState(duration), delay = _React$useState[0], setDelay = _React$useState[1];
  var isPresent2 = useIsPresent();
  useUpdateEffect(function() {
    if (!isPresent2) {
      onCloseComplete == null ? void 0 : onCloseComplete();
    }
  }, [isPresent2]);
  useUpdateEffect(function() {
    setDelay(duration);
  }, [duration]);
  var onMouseEnter = function onMouseEnter2() {
    return setDelay(null);
  };
  var onMouseLeave = function onMouseLeave2() {
    return setDelay(duration);
  };
  var close = function close2() {
    if (isPresent2)
      onRequestRemove();
  };
  React19.useEffect(function() {
    if (isPresent2 && requestClose) {
      onRequestRemove();
    }
  }, [isPresent2, requestClose, onRequestRemove]);
  useTimeout(close, delay);
  var containerStyles = React19.useMemo(function() {
    return _extends7({
      pointerEvents: "auto",
      maxWidth: 560,
      minWidth: 300,
      margin: toastSpacing
    }, containerStyle);
  }, [containerStyle, toastSpacing]);
  var toastStyle = React19.useMemo(function() {
    return getToastStyle(position2);
  }, [position2]);
  return React19.createElement(motion.li, {
    layout: true,
    className: "chakra-toast",
    variants: motionVariants2,
    initial: "initial",
    animate: "animate",
    exit: "exit",
    onHoverStart: onMouseEnter,
    onHoverEnd: onMouseLeave,
    custom: {
      position: position2
    },
    style: toastStyle
  }, React19.createElement(chakra.div, {
    role: "status",
    "aria-atomic": "true",
    className: "chakra-toast__inner",
    __css: containerStyles
  }, runIfFn(message, {
    id: id2,
    onClose: close
  })));
});
if (__DEV__) {
  ToastComponent.displayName = "ToastComponent";
}
var ToastProvider = function ToastProvider2(props) {
  var state = React19.useSyncExternalStore(toastStore.subscribe, toastStore.getState, toastStore.getState);
  var children = props.children, motionVariants2 = props.motionVariants, _props$component = props.component, Component = _props$component === void 0 ? ToastComponent : _props$component, portalProps = props.portalProps;
  var toastList = objectKeys(state).map(function(position2) {
    var toasts = state[position2];
    return React19.createElement("ul", {
      role: "region",
      "aria-live": "polite",
      key: position2,
      id: "chakra-toast-manager-" + position2,
      style: getToastListStyle(position2)
    }, React19.createElement(AnimatePresence, {
      initial: false
    }, toasts.map(function(toast) {
      return React19.createElement(Component, _extends7({
        key: toast.id,
        motionVariants: motionVariants2
      }, toast));
    })));
  });
  return React19.createElement(React19.Fragment, null, children, React19.createElement(Portal, portalProps, toastList));
};
var defaults3 = {
  duration: 5e3,
  variant: "solid"
};
var defaultStandaloneParam = {
  theme,
  colorMode: "light",
  toggleColorMode: noop,
  setColorMode: noop,
  defaultOptions: defaults3
};
function createStandaloneToast(_temp) {
  var _ref2 = _temp === void 0 ? defaultStandaloneParam : _temp, _ref$theme = _ref2.theme, theme2 = _ref$theme === void 0 ? defaultStandaloneParam.theme : _ref$theme, _ref$colorMode = _ref2.colorMode, colorMode = _ref$colorMode === void 0 ? defaultStandaloneParam.colorMode : _ref$colorMode, _ref$toggleColorMode = _ref2.toggleColorMode, toggleColorMode = _ref$toggleColorMode === void 0 ? defaultStandaloneParam.toggleColorMode : _ref$toggleColorMode, _ref$setColorMode = _ref2.setColorMode, setColorMode = _ref$setColorMode === void 0 ? defaultStandaloneParam.setColorMode : _ref$setColorMode, _ref$defaultOptions = _ref2.defaultOptions, defaultOptions = _ref$defaultOptions === void 0 ? defaultStandaloneParam.defaultOptions : _ref$defaultOptions, motionVariants2 = _ref2.motionVariants, toastSpacing = _ref2.toastSpacing, component = _ref2.component;
  var colorModeContextValue = {
    colorMode,
    setColorMode,
    toggleColorMode
  };
  var ToastContainer = function ToastContainer2() {
    return React19.createElement(ThemeProvider, {
      theme: theme2
    }, React19.createElement(ColorModeContext.Provider, {
      value: colorModeContextValue
    }, React19.createElement(ToastProvider, {
      defaultOptions,
      motionVariants: motionVariants2,
      toastSpacing,
      component
    })));
  };
  return {
    ToastContainer,
    toast: createToastFn(theme2.direction, defaultOptions)
  };
}

// node_modules/@chakra-ui/transition/dist/chakra-ui-transition.esm.js
var React20 = __toESM(require_react());
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends8() {
  _extends8 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends8.apply(this, arguments);
}
var TransitionEasings = {
  ease: [0.25, 0.1, 0.25, 1],
  easeIn: [0.4, 0, 1, 1],
  easeOut: [0, 0, 0.2, 1],
  easeInOut: [0.4, 0, 0.2, 1]
};
var TransitionVariants = {
  scale: {
    enter: {
      scale: 1
    },
    exit: {
      scale: 0.95
    }
  },
  fade: {
    enter: {
      opacity: 1
    },
    exit: {
      opacity: 0
    }
  },
  pushLeft: {
    enter: {
      x: "100%"
    },
    exit: {
      x: "-30%"
    }
  },
  pushRight: {
    enter: {
      x: "-100%"
    },
    exit: {
      x: "30%"
    }
  },
  pushUp: {
    enter: {
      y: "100%"
    },
    exit: {
      y: "-30%"
    }
  },
  pushDown: {
    enter: {
      y: "-100%"
    },
    exit: {
      y: "30%"
    }
  },
  slideLeft: {
    position: {
      left: 0,
      top: 0,
      bottom: 0,
      width: "100%"
    },
    enter: {
      x: 0,
      y: 0
    },
    exit: {
      x: "-100%",
      y: 0
    }
  },
  slideRight: {
    position: {
      right: 0,
      top: 0,
      bottom: 0,
      width: "100%"
    },
    enter: {
      x: 0,
      y: 0
    },
    exit: {
      x: "100%",
      y: 0
    }
  },
  slideUp: {
    position: {
      top: 0,
      left: 0,
      right: 0,
      maxWidth: "100vw"
    },
    enter: {
      x: 0,
      y: 0
    },
    exit: {
      x: 0,
      y: "-100%"
    }
  },
  slideDown: {
    position: {
      bottom: 0,
      left: 0,
      right: 0,
      maxWidth: "100vw"
    },
    enter: {
      x: 0,
      y: 0
    },
    exit: {
      x: 0,
      y: "100%"
    }
  }
};
function slideTransition(options) {
  var _options$direction;
  var side = (_options$direction = options == null ? void 0 : options.direction) != null ? _options$direction : "right";
  switch (side) {
    case "right":
      return TransitionVariants.slideRight;
    case "left":
      return TransitionVariants.slideLeft;
    case "bottom":
      return TransitionVariants.slideDown;
    case "top":
      return TransitionVariants.slideUp;
    default:
      return TransitionVariants.slideRight;
  }
}
var TransitionDefaults = {
  enter: {
    duration: 0.2,
    ease: TransitionEasings.easeOut
  },
  exit: {
    duration: 0.1,
    ease: TransitionEasings.easeIn
  }
};
var withDelay = {
  enter: function enter(transition3, delay) {
    return _extends8({}, transition3, {
      delay: isNumber(delay) ? delay : delay == null ? void 0 : delay["enter"]
    });
  },
  exit: function exit(transition3, delay) {
    return _extends8({}, transition3, {
      delay: isNumber(delay) ? delay : delay == null ? void 0 : delay["exit"]
    });
  }
};
var _excluded$4 = ["in", "unmountOnExit", "animateOpacity", "startingHeight", "endingHeight", "style", "className", "transition", "transitionEnd"];
var isNumeric = function isNumeric2(value) {
  return value != null && parseInt(value.toString(), 10) > 0;
};
var defaultTransitions2 = {
  exit: {
    height: {
      duration: 0.2,
      ease: TransitionEasings.ease
    },
    opacity: {
      duration: 0.3,
      ease: TransitionEasings.ease
    }
  },
  enter: {
    height: {
      duration: 0.3,
      ease: TransitionEasings.ease
    },
    opacity: {
      duration: 0.4,
      ease: TransitionEasings.ease
    }
  }
};
var variants$42 = {
  exit: function exit2(_ref2) {
    var _transition$exit;
    var animateOpacity = _ref2.animateOpacity, startingHeight = _ref2.startingHeight, transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
    return _extends8({}, animateOpacity && {
      opacity: isNumeric(startingHeight) ? 1 : 0
    }, {
      height: startingHeight,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit,
      transition: (_transition$exit = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit : withDelay.exit(defaultTransitions2.exit, delay)
    });
  },
  enter: function enter2(_ref2) {
    var _transition$enter;
    var animateOpacity = _ref2.animateOpacity, endingHeight = _ref2.endingHeight, transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
    return _extends8({}, animateOpacity && {
      opacity: 1
    }, {
      height: endingHeight,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter,
      transition: (_transition$enter = transition3 == null ? void 0 : transition3.enter) != null ? _transition$enter : withDelay.enter(defaultTransitions2.enter, delay)
    });
  }
};
var Collapse = React20.forwardRef(function(props, ref) {
  var isOpen = props["in"], unmountOnExit = props.unmountOnExit, _props$animateOpacity = props.animateOpacity, animateOpacity = _props$animateOpacity === void 0 ? true : _props$animateOpacity, _props$startingHeight = props.startingHeight, startingHeight = _props$startingHeight === void 0 ? 0 : _props$startingHeight, _props$endingHeight = props.endingHeight, endingHeight = _props$endingHeight === void 0 ? "auto" : _props$endingHeight, style2 = props.style, className = props.className, transition3 = props.transition, transitionEnd = props.transitionEnd, rest = _objectWithoutPropertiesLoose5(props, _excluded$4);
  var _React$useState = React20.useState(false), mounted = _React$useState[0], setMounted = _React$useState[1];
  React20.useEffect(function() {
    var timeout = setTimeout(function() {
      setMounted(true);
    });
    return function() {
      return clearTimeout(timeout);
    };
  }, []);
  warn({
    condition: Boolean(startingHeight > 0 && unmountOnExit),
    message: "startingHeight and unmountOnExit are mutually exclusive. You can't use them together"
  });
  var hasStartingHeight = parseFloat(startingHeight.toString()) > 0;
  var custom = {
    startingHeight,
    endingHeight,
    animateOpacity,
    transition: !mounted ? {
      enter: {
        duration: 0
      }
    } : transition3,
    transitionEnd: (0, import_lodash.default)(transitionEnd, {
      exit: unmountOnExit ? void 0 : {
        display: hasStartingHeight ? "block" : "none"
      }
    })
  };
  var show = unmountOnExit ? isOpen : true;
  var animate4 = isOpen || unmountOnExit ? "enter" : "exit";
  return React20.createElement(AnimatePresence, {
    initial: false,
    custom
  }, show && React20.createElement(motion.div, _extends8({
    ref
  }, rest, {
    className: cx("chakra-collapse", className),
    style: _extends8({
      overflow: "hidden",
      display: "block"
    }, style2),
    custom,
    variants: variants$42,
    initial: unmountOnExit ? "exit" : false,
    animate: animate4,
    exit: "exit"
  })));
});
if (__DEV__) {
  Collapse.displayName = "Collapse";
}
var _excluded$3 = ["unmountOnExit", "in", "className", "transition", "transitionEnd", "delay"];
var variants$32 = {
  enter: function enter3(_temp) {
    var _transition$enter;
    var _ref2 = _temp === void 0 ? {} : _temp, transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
    return {
      opacity: 1,
      transition: (_transition$enter = transition3 == null ? void 0 : transition3.enter) != null ? _transition$enter : withDelay.enter(TransitionDefaults.enter, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: function exit3(_temp2) {
    var _transition$exit;
    var _ref2 = _temp2 === void 0 ? {} : _temp2, transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
    return {
      opacity: 0,
      transition: (_transition$exit = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit : withDelay.exit(TransitionDefaults.exit, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  }
};
var fadeConfig = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants$32
};
var Fade = React20.forwardRef(function(props, ref) {
  var unmountOnExit = props.unmountOnExit, isOpen = props["in"], className = props.className, transition3 = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose5(props, _excluded$3);
  var animate4 = isOpen || unmountOnExit ? "enter" : "exit";
  var show = unmountOnExit ? isOpen && unmountOnExit : true;
  var custom = {
    transition: transition3,
    transitionEnd,
    delay
  };
  return React20.createElement(AnimatePresence, {
    custom
  }, show && React20.createElement(motion.div, _extends8({
    ref,
    className: cx("chakra-fade", className),
    custom
  }, fadeConfig, {
    animate: animate4
  }, rest)));
});
if (__DEV__) {
  Fade.displayName = "Fade";
}
var _excluded$2 = ["unmountOnExit", "in", "reverse", "initialScale", "className", "transition", "transitionEnd", "delay"];
var variants$22 = {
  exit: function exit4(_ref2) {
    var _transition$exit;
    var reverse = _ref2.reverse, initialScale = _ref2.initialScale, transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
    return _extends8({
      opacity: 0
    }, reverse ? {
      scale: initialScale,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    } : {
      transitionEnd: _extends8({
        scale: initialScale
      }, transitionEnd == null ? void 0 : transitionEnd.exit)
    }, {
      transition: (_transition$exit = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit : withDelay.exit(TransitionDefaults.exit, delay)
    });
  },
  enter: function enter4(_ref2) {
    var _transition$enter;
    var transitionEnd = _ref2.transitionEnd, transition3 = _ref2.transition, delay = _ref2.delay;
    return {
      opacity: 1,
      scale: 1,
      transition: (_transition$enter = transition3 == null ? void 0 : transition3.enter) != null ? _transition$enter : withDelay.enter(TransitionDefaults.enter, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  }
};
var scaleFadeConfig = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants$22
};
var ScaleFade = React20.forwardRef(function(props, ref) {
  var unmountOnExit = props.unmountOnExit, isOpen = props["in"], _props$reverse = props.reverse, reverse = _props$reverse === void 0 ? true : _props$reverse, _props$initialScale = props.initialScale, initialScale = _props$initialScale === void 0 ? 0.95 : _props$initialScale, className = props.className, transition3 = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose5(props, _excluded$2);
  var show = unmountOnExit ? isOpen && unmountOnExit : true;
  var animate4 = isOpen || unmountOnExit ? "enter" : "exit";
  var custom = {
    initialScale,
    reverse,
    transition: transition3,
    transitionEnd,
    delay
  };
  return React20.createElement(AnimatePresence, {
    custom
  }, show && React20.createElement(motion.div, _extends8({
    ref,
    className: cx("chakra-offset-slide", className)
  }, scaleFadeConfig, {
    animate: animate4,
    custom
  }, rest)));
});
if (__DEV__) {
  ScaleFade.displayName = "ScaleFade";
}
var _excluded$1 = ["direction", "style", "unmountOnExit", "in", "className", "transition", "transitionEnd", "delay"];
var defaultTransition = {
  exit: {
    duration: 0.15,
    ease: TransitionEasings.easeInOut
  },
  enter: {
    type: "spring",
    damping: 25,
    stiffness: 180
  }
};
var variants$12 = {
  exit: function exit5(_ref2) {
    var _transition$exit;
    var direction2 = _ref2.direction, transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
    var _slideTransition = slideTransition({
      direction: direction2
    }), exitStyles = _slideTransition.exit;
    return _extends8({}, exitStyles, {
      transition: (_transition$exit = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit : withDelay.exit(defaultTransition.exit, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    });
  },
  enter: function enter5(_ref2) {
    var _transition$enter;
    var direction2 = _ref2.direction, transitionEnd = _ref2.transitionEnd, transition3 = _ref2.transition, delay = _ref2.delay;
    var _slideTransition2 = slideTransition({
      direction: direction2
    }), enterStyles = _slideTransition2.enter;
    return _extends8({}, enterStyles, {
      transition: (_transition$enter = transition3 == null ? void 0 : transition3.enter) != null ? _transition$enter : withDelay.enter(defaultTransition.enter, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    });
  }
};
var Slide = React20.forwardRef(function(props, ref) {
  var _props$direction = props.direction, direction2 = _props$direction === void 0 ? "right" : _props$direction, style2 = props.style, unmountOnExit = props.unmountOnExit, isOpen = props["in"], className = props.className, transition3 = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose5(props, _excluded$1);
  var transitionStyles = slideTransition({
    direction: direction2
  });
  var computedStyle = Object.assign({
    position: "fixed"
  }, transitionStyles.position, style2);
  var show = unmountOnExit ? isOpen && unmountOnExit : true;
  var animate4 = isOpen || unmountOnExit ? "enter" : "exit";
  var custom = {
    transitionEnd,
    transition: transition3,
    direction: direction2,
    delay
  };
  return React20.createElement(AnimatePresence, {
    custom
  }, show && React20.createElement(motion.div, _extends8({}, rest, {
    ref,
    initial: "exit",
    className: cx("chakra-slide", className),
    animate: animate4,
    exit: "exit",
    custom,
    variants: variants$12,
    style: computedStyle
  })));
});
if (__DEV__) {
  Slide.displayName = "Slide";
}
var _excluded5 = ["unmountOnExit", "in", "reverse", "className", "offsetX", "offsetY", "transition", "transitionEnd", "delay"];
var variants2 = {
  initial: function initial2(_ref2) {
    var _transition$exit;
    var offsetX = _ref2.offsetX, offsetY = _ref2.offsetY, transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
    return {
      opacity: 0,
      x: offsetX,
      y: offsetY,
      transition: (_transition$exit = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit : withDelay.exit(TransitionDefaults.exit, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  },
  enter: function enter6(_ref2) {
    var _transition$enter;
    var transition3 = _ref2.transition, transitionEnd = _ref2.transitionEnd, delay = _ref2.delay;
    return {
      opacity: 1,
      x: 0,
      y: 0,
      transition: (_transition$enter = transition3 == null ? void 0 : transition3.enter) != null ? _transition$enter : withDelay.enter(TransitionDefaults.enter, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: function exit6(_ref3) {
    var _transition$exit2;
    var offsetY = _ref3.offsetY, offsetX = _ref3.offsetX, transition3 = _ref3.transition, transitionEnd = _ref3.transitionEnd, reverse = _ref3.reverse, delay = _ref3.delay;
    var offset2 = {
      x: offsetX,
      y: offsetY
    };
    return _extends8({
      opacity: 0,
      transition: (_transition$exit2 = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit2 : withDelay.exit(TransitionDefaults.exit, delay)
    }, reverse ? _extends8({}, offset2, {
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    }) : {
      transitionEnd: _extends8({}, offset2, transitionEnd == null ? void 0 : transitionEnd.exit)
    });
  }
};
var slideFadeConfig = {
  initial: "initial",
  animate: "enter",
  exit: "exit",
  variants: variants2
};
var SlideFade = React20.forwardRef(function(props, ref) {
  var unmountOnExit = props.unmountOnExit, isOpen = props["in"], _props$reverse = props.reverse, reverse = _props$reverse === void 0 ? true : _props$reverse, className = props.className, _props$offsetX = props.offsetX, offsetX = _props$offsetX === void 0 ? 0 : _props$offsetX, _props$offsetY = props.offsetY, offsetY = _props$offsetY === void 0 ? 8 : _props$offsetY, transition3 = props.transition, transitionEnd = props.transitionEnd, delay = props.delay, rest = _objectWithoutPropertiesLoose5(props, _excluded5);
  var show = unmountOnExit ? isOpen && unmountOnExit : true;
  var animate4 = isOpen || unmountOnExit ? "enter" : "exit";
  var custom = {
    offsetX,
    offsetY,
    reverse,
    transition: transition3,
    transitionEnd,
    delay
  };
  return React20.createElement(AnimatePresence, {
    custom
  }, show && React20.createElement(motion.div, _extends8({
    ref,
    className: cx("chakra-offset-slide", className),
    custom
  }, slideFadeConfig, {
    animate: animate4
  }, rest)));
});
if (__DEV__) {
  SlideFade.displayName = "SlideFade";
}

// node_modules/@chakra-ui/accordion/dist/chakra-ui-accordion.esm.js
var React21 = __toESM(require_react());
var import_react53 = __toESM(require_react());

// node_modules/@chakra-ui/descendant/dist/chakra-ui-descendant.esm.js
var import_react52 = __toESM(require_react());
function _extends9() {
  _extends9 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends9.apply(this, arguments);
}
function sortNodes(nodes) {
  return nodes.sort(function(a2, b2) {
    var compare = a2.compareDocumentPosition(b2);
    if (compare & Node.DOCUMENT_POSITION_FOLLOWING || compare & Node.DOCUMENT_POSITION_CONTAINED_BY) {
      return -1;
    }
    if (compare & Node.DOCUMENT_POSITION_PRECEDING || compare & Node.DOCUMENT_POSITION_CONTAINS) {
      return 1;
    }
    if (compare & Node.DOCUMENT_POSITION_DISCONNECTED || compare & Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC) {
      throw Error("Cannot sort the given nodes.");
    } else {
      return 0;
    }
  });
}
var isElement = function isElement2(el) {
  return typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
};
function getNextIndex(current, max2, loop) {
  var next = current + 1;
  if (loop && next >= max2)
    next = 0;
  return next;
}
function getPrevIndex(current, max2, loop) {
  var next = current - 1;
  if (loop && next < 0)
    next = max2;
  return next;
}
var useSafeLayoutEffect2 = typeof window !== "undefined" ? import_react52.useLayoutEffect : import_react52.useEffect;
var cast = function cast2(value) {
  return value;
};
var DescendantsManager = function DescendantsManager2() {
  var _this = this;
  this.descendants = /* @__PURE__ */ new Map();
  this.register = function(nodeOrOptions) {
    if (nodeOrOptions == null)
      return;
    if (isElement(nodeOrOptions)) {
      return _this.registerNode(nodeOrOptions);
    }
    return function(node2) {
      _this.registerNode(node2, nodeOrOptions);
    };
  };
  this.unregister = function(node2) {
    _this.descendants["delete"](node2);
    var sorted = sortNodes(Array.from(_this.descendants.keys()));
    _this.assignIndex(sorted);
  };
  this.destroy = function() {
    _this.descendants.clear();
  };
  this.assignIndex = function(descendants) {
    _this.descendants.forEach(function(descendant) {
      var index2 = descendants.indexOf(descendant.node);
      descendant.index = index2;
      descendant.node.dataset["index"] = descendant.index.toString();
    });
  };
  this.count = function() {
    return _this.descendants.size;
  };
  this.enabledCount = function() {
    return _this.enabledValues().length;
  };
  this.values = function() {
    var values = Array.from(_this.descendants.values());
    return values.sort(function(a2, b2) {
      return a2.index - b2.index;
    });
  };
  this.enabledValues = function() {
    return _this.values().filter(function(descendant) {
      return !descendant.disabled;
    });
  };
  this.item = function(index2) {
    if (_this.count() === 0)
      return void 0;
    return _this.values()[index2];
  };
  this.enabledItem = function(index2) {
    if (_this.enabledCount() === 0)
      return void 0;
    return _this.enabledValues()[index2];
  };
  this.first = function() {
    return _this.item(0);
  };
  this.firstEnabled = function() {
    return _this.enabledItem(0);
  };
  this.last = function() {
    return _this.item(_this.descendants.size - 1);
  };
  this.lastEnabled = function() {
    var lastIndex = _this.enabledValues().length - 1;
    return _this.enabledItem(lastIndex);
  };
  this.indexOf = function(node2) {
    var _this$descendants$get, _this$descendants$get2;
    if (!node2)
      return -1;
    return (_this$descendants$get = (_this$descendants$get2 = _this.descendants.get(node2)) == null ? void 0 : _this$descendants$get2.index) != null ? _this$descendants$get : -1;
  };
  this.enabledIndexOf = function(node2) {
    if (node2 == null)
      return -1;
    return _this.enabledValues().findIndex(function(i) {
      return i.node.isSameNode(node2);
    });
  };
  this.next = function(index2, loop) {
    if (loop === void 0) {
      loop = true;
    }
    var next = getNextIndex(index2, _this.count(), loop);
    return _this.item(next);
  };
  this.nextEnabled = function(index2, loop) {
    if (loop === void 0) {
      loop = true;
    }
    var item = _this.item(index2);
    if (!item)
      return;
    var enabledIndex = _this.enabledIndexOf(item.node);
    var nextEnabledIndex = getNextIndex(enabledIndex, _this.enabledCount(), loop);
    return _this.enabledItem(nextEnabledIndex);
  };
  this.prev = function(index2, loop) {
    if (loop === void 0) {
      loop = true;
    }
    var prev = getPrevIndex(index2, _this.count() - 1, loop);
    return _this.item(prev);
  };
  this.prevEnabled = function(index2, loop) {
    if (loop === void 0) {
      loop = true;
    }
    var item = _this.item(index2);
    if (!item)
      return;
    var enabledIndex = _this.enabledIndexOf(item.node);
    var prevEnabledIndex = getPrevIndex(enabledIndex, _this.enabledCount() - 1, loop);
    return _this.enabledItem(prevEnabledIndex);
  };
  this.registerNode = function(node2, options) {
    if (!node2 || _this.descendants.has(node2))
      return;
    var keys = Array.from(_this.descendants.keys()).concat(node2);
    var sorted = sortNodes(keys);
    if (options != null && options.disabled) {
      options.disabled = !!options.disabled;
    }
    var descendant = _extends9({
      node: node2,
      index: -1
    }, options);
    _this.descendants.set(node2, descendant);
    _this.assignIndex(sorted);
  };
};
function useDescendants() {
  var descendants = (0, import_react52.useRef)(new DescendantsManager());
  useSafeLayoutEffect2(function() {
    return function() {
      return descendants.current.destroy();
    };
  });
  return descendants.current;
}
var _createContext3 = createContext({
  name: "DescendantsProvider",
  errorMessage: "useDescendantsContext must be used within DescendantsProvider"
});
var DescendantsContextProvider = _createContext3[0];
var useDescendantsContext = _createContext3[1];
function useDescendant(options) {
  var descendants = useDescendantsContext();
  var _useState = (0, import_react52.useState)(-1), index2 = _useState[0], setIndex = _useState[1];
  var ref = (0, import_react52.useRef)(null);
  useSafeLayoutEffect2(function() {
    return function() {
      if (!ref.current)
        return;
      descendants.unregister(ref.current);
    };
  }, []);
  useSafeLayoutEffect2(function() {
    if (!ref.current)
      return;
    var dataIndex = Number(ref.current.dataset["index"]);
    if (index2 != dataIndex && !Number.isNaN(dataIndex)) {
      setIndex(dataIndex);
    }
  });
  var refCallback = options ? cast(descendants.register(options)) : cast(descendants.register);
  return {
    descendants,
    index: index2,
    enabledIndex: descendants.enabledIndexOf(ref.current),
    register: mergeRefs(refCallback, ref)
  };
}
function createDescendantContext() {
  var ContextProvider = cast(DescendantsContextProvider);
  var _useDescendantsContext = function _useDescendantsContext2() {
    return cast(useDescendantsContext());
  };
  var _useDescendant = function _useDescendant2(options) {
    return useDescendant(options);
  };
  var _useDescendants = function _useDescendants2() {
    return useDescendants();
  };
  return [
    ContextProvider,
    _useDescendantsContext,
    _useDescendants,
    _useDescendant
  ];
}

// node_modules/@chakra-ui/accordion/dist/chakra-ui-accordion.esm.js
function _extends10() {
  _extends10 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends10.apply(this, arguments);
}
function _objectWithoutPropertiesLoose6(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$12 = ["onChange", "defaultIndex", "index", "allowMultiple", "allowToggle"];
var _excluded2$1 = ["isDisabled", "isFocusable", "id"];
var _createDescendantCont = createDescendantContext();
var AccordionDescendantsProvider = _createDescendantCont[0];
var useAccordionDescendantsContext = _createDescendantCont[1];
var useAccordionDescendants = _createDescendantCont[2];
var useAccordionDescendant = _createDescendantCont[3];
function useAccordion(props) {
  var onChange = props.onChange, defaultIndex = props.defaultIndex, indexProp = props.index, allowMultiple = props.allowMultiple, allowToggle = props.allowToggle, htmlProps = _objectWithoutPropertiesLoose6(props, _excluded$12);
  allowMultipleWarning(props);
  allowMultipleAndAllowToggleWarning(props);
  var descendants = useAccordionDescendants();
  var _useState = (0, import_react53.useState)(-1), focusedIndex = _useState[0], setFocusedIndex = _useState[1];
  useUnmountEffect(function() {
    setFocusedIndex(-1);
  });
  var _useControllableState = useControllableState({
    value: indexProp,
    defaultValue: function defaultValue() {
      if (allowMultiple)
        return defaultIndex != null ? defaultIndex : [];
      return defaultIndex != null ? defaultIndex : -1;
    },
    onChange
  }), index2 = _useControllableState[0], setIndex = _useControllableState[1];
  var getAccordionItemProps = function getAccordionItemProps2(idx) {
    var isOpen = false;
    if (idx !== null) {
      isOpen = isArray(index2) ? index2.includes(idx) : index2 === idx;
    }
    var onChange2 = function onChange3(isOpen2) {
      if (idx === null)
        return;
      if (allowMultiple && isArray(index2)) {
        var nextState = isOpen2 ? addItem(index2, idx) : removeItem(index2, idx);
        setIndex(nextState);
      } else if (isOpen2) {
        setIndex(idx);
      } else if (allowToggle) {
        setIndex(-1);
      }
    };
    return {
      isOpen,
      onChange: onChange2
    };
  };
  return {
    index: index2,
    setIndex,
    htmlProps,
    getAccordionItemProps,
    focusedIndex,
    setFocusedIndex,
    descendants
  };
}
var _createContext$12 = createContext({
  name: "AccordionContext",
  errorMessage: "useAccordionContext: `context` is undefined. Seems you forgot to wrap the accordion components in `<Accordion />`"
});
var AccordionProvider = _createContext$12[0];
var useAccordionContext = _createContext$12[1];
function useAccordionItem(props) {
  var isDisabled = props.isDisabled, isFocusable = props.isFocusable, id2 = props.id, htmlProps = _objectWithoutPropertiesLoose6(props, _excluded2$1);
  var _useAccordionContext = useAccordionContext(), getAccordionItemProps = _useAccordionContext.getAccordionItemProps, setFocusedIndex = _useAccordionContext.setFocusedIndex;
  var buttonRef = (0, import_react53.useRef)(null);
  var _useIds = useIds(id2, "accordion-button", "accordion-panel"), buttonId = _useIds[0], panelId = _useIds[1];
  focusableNotDisabledWarning(props);
  var _useAccordionDescenda = useAccordionDescendant({
    disabled: isDisabled && !isFocusable
  }), register = _useAccordionDescenda.register, index2 = _useAccordionDescenda.index, descendants = _useAccordionDescenda.descendants;
  var _getAccordionItemProp = getAccordionItemProps(index2 === -1 ? null : index2), isOpen = _getAccordionItemProp.isOpen, onChange = _getAccordionItemProp.onChange;
  warnIfOpenAndDisabled({
    isOpen,
    isDisabled
  });
  var onOpen = function onOpen2() {
    onChange == null ? void 0 : onChange(true);
  };
  var onClose = function onClose2() {
    onChange == null ? void 0 : onChange(false);
  };
  var onClick = (0, import_react53.useCallback)(function() {
    onChange == null ? void 0 : onChange(!isOpen);
    setFocusedIndex(index2);
  }, [index2, setFocusedIndex, isOpen, onChange]);
  var onKeyDown = (0, import_react53.useCallback)(function(event) {
    var eventKey = normalizeEventKey(event);
    var keyMap = {
      ArrowDown: function ArrowDown() {
        var next = descendants.nextEnabled(index2);
        if (next)
          focus(next.node);
      },
      ArrowUp: function ArrowUp() {
        var prev = descendants.prevEnabled(index2);
        if (prev)
          focus(prev.node);
      },
      Home: function Home() {
        var first = descendants.firstEnabled();
        if (first)
          focus(first.node);
      },
      End: function End() {
        var last = descendants.lastEnabled();
        if (last)
          focus(last.node);
      }
    };
    var action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      action(event);
    }
  }, [descendants, index2]);
  var onFocus3 = (0, import_react53.useCallback)(function() {
    setFocusedIndex(index2);
  }, [setFocusedIndex, index2]);
  var getButtonProps = (0, import_react53.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends10({}, props2, {
      type: "button",
      ref: mergeRefs(register, buttonRef, ref),
      id: buttonId,
      disabled: !!isDisabled,
      "aria-expanded": !!isOpen,
      "aria-controls": panelId,
      onClick: callAllHandlers(props2.onClick, onClick),
      onFocus: callAllHandlers(props2.onFocus, onFocus3),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown)
    });
  }, [buttonId, isDisabled, isOpen, onClick, onFocus3, onKeyDown, panelId, register]);
  var getPanelProps = (0, import_react53.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends10({}, props2, {
      ref,
      role: "region",
      id: panelId,
      "aria-labelledby": buttonId,
      hidden: !isOpen
    });
  }, [buttonId, isOpen, panelId]);
  return {
    isOpen,
    isDisabled,
    isFocusable,
    onOpen,
    onClose,
    getButtonProps,
    getPanelProps,
    htmlProps
  };
}
function allowMultipleWarning(props) {
  var index2 = props.index || props.defaultIndex;
  var condition = !isUndefined(index2) && !isArray(index2) && props.allowMultiple;
  warn({
    condition: !!condition,
    message: "If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: " + typeof index2 + ","
  });
}
function allowMultipleAndAllowToggleWarning(props) {
  warn({
    condition: !!(props.allowMultiple && props.allowToggle),
    message: "If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not"
  });
}
function focusableNotDisabledWarning(props) {
  warn({
    condition: !!(props.isFocusable && !props.isDisabled),
    message: "Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.\n    "
  });
}
function warnIfOpenAndDisabled(props) {
  warn({
    condition: props.isOpen && !!props.isDisabled,
    message: "Cannot open a disabled accordion item"
  });
}
var _excluded6 = ["children", "reduceMotion"];
var _excluded22 = ["htmlProps", "descendants"];
var _excluded32 = ["htmlProps"];
var _createStylesContext2 = createStylesContext("Accordion");
var StylesProvider3 = _createStylesContext2[0];
var useStyles3 = _createStylesContext2[1];
var useAccordionStyles = useStyles3;
var Accordion2 = forwardRef(function(_ref2, ref) {
  var children = _ref2.children, reduceMotion = _ref2.reduceMotion, props = _objectWithoutPropertiesLoose6(_ref2, _excluded6);
  var styles2 = useMultiStyleConfig("Accordion", props);
  var ownProps = omitThemingProps(props);
  var _useAccordion = useAccordion(ownProps), htmlProps = _useAccordion.htmlProps, descendants = _useAccordion.descendants, context = _objectWithoutPropertiesLoose6(_useAccordion, _excluded22);
  var ctx = React21.useMemo(function() {
    return _extends10({}, context, {
      reduceMotion: !!reduceMotion
    });
  }, [context, reduceMotion]);
  return React21.createElement(AccordionDescendantsProvider, {
    value: descendants
  }, React21.createElement(AccordionProvider, {
    value: ctx
  }, React21.createElement(StylesProvider3, {
    value: styles2
  }, React21.createElement(chakra.div, _extends10({
    ref
  }, htmlProps, {
    className: cx("chakra-accordion", props.className),
    __css: styles2.root
  }), children))));
});
if (__DEV__) {
  Accordion2.displayName = "Accordion";
}
var _createContext4 = createContext({
  name: "AccordionItemContext",
  errorMessage: "useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` "
});
var AccordionItemProvider = _createContext4[0];
var useAccordionItemContext = _createContext4[1];
var AccordionItem = forwardRef(function(props, ref) {
  var children = props.children, className = props.className;
  var _useAccordionItem = useAccordionItem(props), htmlProps = _useAccordionItem.htmlProps, context = _objectWithoutPropertiesLoose6(_useAccordionItem, _excluded32);
  var styles2 = useStyles3();
  var containerStyles = _extends10({}, styles2.container, {
    overflowAnchor: "none"
  });
  var ctx = React21.useMemo(function() {
    return context;
  }, [context]);
  return React21.createElement(AccordionItemProvider, {
    value: ctx
  }, React21.createElement(chakra.div, _extends10({
    ref
  }, htmlProps, {
    className: cx("chakra-accordion__item", className),
    __css: containerStyles
  }), runIfFn(children, {
    isExpanded: !!context.isOpen,
    isDisabled: !!context.isDisabled
  })));
});
if (__DEV__) {
  AccordionItem.displayName = "AccordionItem";
}
function useAccordionItemState() {
  var _useAccordionItemCont = useAccordionItemContext(), isOpen = _useAccordionItemCont.isOpen, isDisabled = _useAccordionItemCont.isDisabled, onClose = _useAccordionItemCont.onClose, onOpen = _useAccordionItemCont.onOpen;
  return {
    isOpen,
    onClose,
    isDisabled,
    onOpen
  };
}
var AccordionButton = forwardRef(function(props, ref) {
  var _useAccordionItemCont2 = useAccordionItemContext(), getButtonProps = _useAccordionItemCont2.getButtonProps;
  var buttonProps = getButtonProps(props, ref);
  var styles2 = useStyles3();
  var buttonStyles = _extends10({
    display: "flex",
    alignItems: "center",
    width: "100%",
    outline: 0
  }, styles2.button);
  return React21.createElement(chakra.button, _extends10({}, buttonProps, {
    className: cx("chakra-accordion__button", props.className),
    __css: buttonStyles
  }));
});
if (__DEV__) {
  AccordionButton.displayName = "AccordionButton";
}
var AccordionPanel = forwardRef(function(props, ref) {
  var _useAccordionContext = useAccordionContext(), reduceMotion = _useAccordionContext.reduceMotion;
  var _useAccordionItemCont3 = useAccordionItemContext(), getPanelProps = _useAccordionItemCont3.getPanelProps, isOpen = _useAccordionItemCont3.isOpen;
  var panelProps = getPanelProps(props, ref);
  var _className = cx("chakra-accordion__panel", props.className);
  var styles2 = useStyles3();
  if (!reduceMotion) {
    delete panelProps.hidden;
  }
  var child = React21.createElement(chakra.div, _extends10({}, panelProps, {
    __css: styles2.panel,
    className: _className
  }));
  if (!reduceMotion) {
    return React21.createElement(Collapse, {
      "in": isOpen
    }, child);
  }
  return child;
});
if (__DEV__) {
  AccordionPanel.displayName = "AccordionPanel";
}
var AccordionIcon = function AccordionIcon2(props) {
  var _useAccordionItemCont4 = useAccordionItemContext(), isOpen = _useAccordionItemCont4.isOpen, isDisabled = _useAccordionItemCont4.isDisabled;
  var _useAccordionContext2 = useAccordionContext(), reduceMotion = _useAccordionContext2.reduceMotion;
  var _className = cx("chakra-accordion__icon", props.className);
  var styles2 = useStyles3();
  var iconStyles = _extends10({
    opacity: isDisabled ? 0.4 : 1,
    transform: isOpen ? "rotate(-180deg)" : void 0,
    transition: reduceMotion ? void 0 : "transform 0.2s",
    transformOrigin: "center"
  }, styles2.icon);
  return React21.createElement(Icon, _extends10({
    viewBox: "0 0 24 24",
    "aria-hidden": true,
    className: _className,
    __css: iconStyles
  }, props), React21.createElement("path", {
    fill: "currentColor",
    d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
  }));
};
if (__DEV__) {
  AccordionIcon.displayName = "AccordionIcon";
}

// node_modules/@chakra-ui/image/dist/chakra-ui-image.esm.js
var React22 = __toESM(require_react());
var import_react54 = __toESM(require_react());
function _extends11() {
  _extends11 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends11.apply(this, arguments);
}
function _objectWithoutPropertiesLoose7(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useImage(props) {
  var loading = props.loading, src = props.src, srcSet = props.srcSet, onLoad = props.onLoad, onError = props.onError, crossOrigin = props.crossOrigin, sizes3 = props.sizes, ignoreFallback = props.ignoreFallback;
  var _useState = (0, import_react54.useState)("pending"), status = _useState[0], setStatus = _useState[1];
  (0, import_react54.useEffect)(function() {
    setStatus(src ? "loading" : "pending");
  }, [src]);
  var imageRef = (0, import_react54.useRef)();
  var load = (0, import_react54.useCallback)(function() {
    if (!src)
      return;
    flush();
    var img = new Image();
    img.src = src;
    if (crossOrigin)
      img.crossOrigin = crossOrigin;
    if (srcSet)
      img.srcset = srcSet;
    if (sizes3)
      img.sizes = sizes3;
    if (loading)
      img.loading = loading;
    img.onload = function(event) {
      flush();
      setStatus("loaded");
      onLoad == null ? void 0 : onLoad(event);
    };
    img.onerror = function(error) {
      flush();
      setStatus("failed");
      onError == null ? void 0 : onError(error);
    };
    imageRef.current = img;
  }, [src, crossOrigin, srcSet, sizes3, onLoad, onError, loading]);
  var flush = function flush2() {
    if (imageRef.current) {
      imageRef.current.onload = null;
      imageRef.current.onerror = null;
      imageRef.current = null;
    }
  };
  useSafeLayoutEffect(function() {
    if (ignoreFallback)
      return void 0;
    if (status === "loading") {
      load();
    }
    return function() {
      flush();
    };
  }, [status, load, ignoreFallback]);
  return ignoreFallback ? "loaded" : status;
}
var shouldShowFallbackImage = function shouldShowFallbackImage2(status, fallbackStrategy) {
  return status !== "loaded" && fallbackStrategy === "beforeLoadOrError" || status === "failed" && fallbackStrategy === "onError";
};
var _excluded7 = ["htmlWidth", "htmlHeight", "alt"];
var _excluded23 = ["fallbackSrc", "fallback", "src", "srcSet", "align", "fit", "loading", "ignoreFallback", "crossOrigin", "fallbackStrategy", "referrerPolicy"];
var NativeImage = React22.forwardRef(function(props, ref) {
  var htmlWidth = props.htmlWidth, htmlHeight = props.htmlHeight, alt = props.alt, rest = _objectWithoutPropertiesLoose7(props, _excluded7);
  return React22.createElement("img", _extends11({
    width: htmlWidth,
    height: htmlHeight,
    ref,
    alt
  }, rest));
});
if (__DEV__) {
  NativeImage.displayName = "NativeImage";
}
var Image$1 = forwardRef(function(props, ref) {
  var fallbackSrc = props.fallbackSrc, fallback = props.fallback, src = props.src, srcSet = props.srcSet, align = props.align, fit = props.fit, loading = props.loading, ignoreFallback = props.ignoreFallback, crossOrigin = props.crossOrigin, _props$fallbackStrate = props.fallbackStrategy, fallbackStrategy = _props$fallbackStrate === void 0 ? "beforeLoadOrError" : _props$fallbackStrate, referrerPolicy = props.referrerPolicy, rest = _objectWithoutPropertiesLoose7(props, _excluded23);
  var providedFallback = fallbackSrc !== void 0 || fallback !== void 0;
  var shouldIgnoreFallbackImage = loading != null || ignoreFallback || !providedFallback;
  var status = useImage(_extends11({}, props, {
    ignoreFallback: shouldIgnoreFallbackImage
  }));
  var showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);
  var shared = _extends11({
    ref,
    objectFit: fit,
    objectPosition: align
  }, shouldIgnoreFallbackImage ? rest : omit(rest, ["onError", "onLoad"]));
  if (showFallbackImage) {
    if (fallback)
      return fallback;
    return React22.createElement(chakra.img, _extends11({
      as: NativeImage,
      className: "chakra-image__placeholder",
      src: fallbackSrc
    }, shared));
  }
  return React22.createElement(chakra.img, _extends11({
    as: NativeImage,
    src,
    srcSet,
    crossOrigin,
    loading,
    referrerPolicy,
    className: "chakra-image"
  }, shared));
});
var Img = forwardRef(function(props, ref) {
  return React22.createElement(chakra.img, _extends11({
    ref,
    as: NativeImage,
    className: "chakra-image"
  }, props));
});
if (__DEV__) {
  Image$1.displayName = "Image";
}

// node_modules/@chakra-ui/avatar/dist/chakra-ui-avatar.esm.js
var React23 = __toESM(require_react());
function _objectWithoutPropertiesLoose8(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends12() {
  _extends12 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends12.apply(this, arguments);
}
var _excluded$13 = ["name", "getInitials"];
var _excluded24 = ["src", "srcSet", "name", "showBorder", "borderRadius", "onError", "getInitials", "icon", "iconLabel", "loading", "children", "borderColor", "ignoreFallback"];
var _createStylesContext3 = createStylesContext("Avatar");
var StylesProvider4 = _createStylesContext3[0];
var useStyles4 = _createStylesContext3[1];
var useAvatarStyles = useStyles4;
var AvatarBadge = forwardRef(function(props, ref) {
  var styles2 = useStyles4();
  var badgeStyles = _extends12({
    position: "absolute",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    insetEnd: "0",
    bottom: "0"
  }, styles2.badge);
  return React23.createElement(chakra.div, _extends12({
    ref
  }, props, {
    className: cx("chakra-avatar__badge", props.className),
    __css: badgeStyles
  }));
});
if (__DEV__) {
  AvatarBadge.displayName = "AvatarBadge";
}
function initials(name) {
  var _name$split = name.split(" "), firstName = _name$split[0], lastName = _name$split[1];
  return firstName && lastName ? "" + firstName.charAt(0) + lastName.charAt(0) : firstName.charAt(0);
}
var AvatarName = function AvatarName2(props) {
  var name = props.name, getInitials = props.getInitials, rest = _objectWithoutPropertiesLoose8(props, _excluded$13);
  var styles2 = useStyles4();
  return React23.createElement(chakra.div, _extends12({
    role: "img",
    "aria-label": name
  }, rest, {
    __css: styles2.label
  }), name ? getInitials == null ? void 0 : getInitials(name) : null);
};
var DefaultIcon = function DefaultIcon2(props) {
  return React23.createElement(chakra.svg, _extends12({
    viewBox: "0 0 128 128",
    color: "#fff",
    width: "100%",
    height: "100%",
    className: "chakra-avatar__svg"
  }, props), React23.createElement("path", {
    fill: "currentColor",
    d: "M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z"
  }), React23.createElement("path", {
    fill: "currentColor",
    d: "M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24"
  }));
};
var baseStyle22 = {
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  textAlign: "center",
  textTransform: "uppercase",
  fontWeight: "medium",
  position: "relative",
  flexShrink: 0
};
var Avatar2 = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("Avatar", props);
  var _omitThemingProps = omitThemingProps(props), src = _omitThemingProps.src, srcSet = _omitThemingProps.srcSet, name = _omitThemingProps.name, showBorder = _omitThemingProps.showBorder, _omitThemingProps$bor = _omitThemingProps.borderRadius, borderRadius = _omitThemingProps$bor === void 0 ? "full" : _omitThemingProps$bor, onError = _omitThemingProps.onError, _omitThemingProps$get = _omitThemingProps.getInitials, getInitials = _omitThemingProps$get === void 0 ? initials : _omitThemingProps$get, _omitThemingProps$ico = _omitThemingProps.icon, icon = _omitThemingProps$ico === void 0 ? React23.createElement(DefaultIcon, null) : _omitThemingProps$ico, _omitThemingProps$ico2 = _omitThemingProps.iconLabel, iconLabel = _omitThemingProps$ico2 === void 0 ? " avatar" : _omitThemingProps$ico2, loading = _omitThemingProps.loading, children = _omitThemingProps.children, borderColor = _omitThemingProps.borderColor, ignoreFallback = _omitThemingProps.ignoreFallback, rest = _objectWithoutPropertiesLoose8(_omitThemingProps, _excluded24);
  var avatarStyles = _extends12({
    borderRadius,
    borderWidth: showBorder ? "2px" : void 0
  }, baseStyle22, styles2.container);
  if (borderColor) {
    avatarStyles.borderColor = borderColor;
  }
  return React23.createElement(chakra.span, _extends12({
    ref
  }, rest, {
    className: cx("chakra-avatar", props.className),
    __css: avatarStyles
  }), React23.createElement(StylesProvider4, {
    value: styles2
  }, React23.createElement(AvatarImage, {
    src,
    srcSet,
    loading,
    onError,
    getInitials,
    name,
    borderRadius,
    icon,
    iconLabel,
    ignoreFallback
  }), children));
});
if (__DEV__) {
  Avatar2.displayName = "Avatar";
}
var AvatarImage = function AvatarImage2(props) {
  var src = props.src, srcSet = props.srcSet, onError = props.onError, getInitials = props.getInitials, name = props.name, borderRadius = props.borderRadius, loading = props.loading, iconLabel = props.iconLabel, _props$icon = props.icon, icon = _props$icon === void 0 ? React23.createElement(DefaultIcon, null) : _props$icon, ignoreFallback = props.ignoreFallback, referrerPolicy = props.referrerPolicy;
  var status = useImage({
    src,
    onError,
    ignoreFallback
  });
  var hasLoaded = status === "loaded";
  var showFallback = !src || !hasLoaded;
  if (showFallback) {
    return name ? React23.createElement(AvatarName, {
      className: "chakra-avatar__initials",
      getInitials,
      name
    }) : React23.cloneElement(icon, {
      role: "img",
      "aria-label": iconLabel
    });
  }
  return React23.createElement(chakra.img, {
    src,
    srcSet,
    alt: name,
    referrerPolicy,
    className: "chakra-avatar__img",
    loading,
    __css: {
      width: "100%",
      height: "100%",
      objectFit: "cover",
      borderRadius
    }
  });
};
if (__DEV__) {
  AvatarImage.displayName = "AvatarImage";
}
var _excluded8 = ["children", "borderColor", "max", "spacing", "borderRadius"];
var AvatarGroup = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("Avatar", props);
  var _omitThemingProps = omitThemingProps(props), children = _omitThemingProps.children, borderColor = _omitThemingProps.borderColor, max2 = _omitThemingProps.max, _omitThemingProps$spa = _omitThemingProps.spacing, spacing2 = _omitThemingProps$spa === void 0 ? "-0.75rem" : _omitThemingProps$spa, _omitThemingProps$bor = _omitThemingProps.borderRadius, borderRadius = _omitThemingProps$bor === void 0 ? "full" : _omitThemingProps$bor, rest = _objectWithoutPropertiesLoose8(_omitThemingProps, _excluded8);
  var validChildren = getValidChildren(children);
  var childrenWithinMax = max2 ? validChildren.slice(0, max2) : validChildren;
  var excess = max2 != null && validChildren.length - max2;
  var reversedChildren = childrenWithinMax.reverse();
  var clones = reversedChildren.map(function(child, index2) {
    var _child$props$borderCo;
    var isFirstAvatar = index2 === 0;
    var childProps = {
      marginEnd: isFirstAvatar ? 0 : spacing2,
      size: props.size,
      borderColor: (_child$props$borderCo = child.props.borderColor) != null ? _child$props$borderCo : borderColor,
      showBorder: true
    };
    return React23.cloneElement(child, filterUndefined(childProps));
  });
  var groupStyles = {
    display: "flex",
    alignItems: "center",
    justifyContent: "flex-end",
    flexDirection: "row-reverse"
  };
  var excessStyles = _extends12({
    borderRadius,
    marginStart: spacing2
  }, baseStyle22, styles2.excessLabel);
  return React23.createElement(chakra.div, _extends12({
    ref,
    role: "group",
    __css: groupStyles
  }, rest, {
    className: cx("chakra-avatar__group", props.className)
  }), excess > 0 && React23.createElement(chakra.span, {
    className: "chakra-avatar__excess",
    __css: excessStyles
  }, "+" + excess), clones);
});
if (__DEV__) {
  AvatarGroup.displayName = "AvatarGroup";
}

// node_modules/@chakra-ui/breadcrumb/dist/chakra-ui-breadcrumb.esm.js
var React24 = __toESM(require_react());
function _extends13() {
  _extends13 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends13.apply(this, arguments);
}
function _objectWithoutPropertiesLoose9(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded9 = ["spacing"];
var _excluded25 = ["isCurrentPage", "as", "className", "href"];
var _excluded33 = ["isCurrentPage", "separator", "isLastChild", "spacing", "children", "className"];
var _excluded42 = ["children", "spacing", "separator", "className"];
var _createStylesContext4 = createStylesContext("Breadcrumb");
var StylesProvider5 = _createStylesContext4[0];
var useStyles5 = _createStylesContext4[1];
var useBreadcrumbStyles = useStyles5;
var BreadcrumbSeparator = forwardRef(function(props, ref) {
  var spacing2 = props.spacing, rest = _objectWithoutPropertiesLoose9(props, _excluded9);
  var styles2 = useStyles5();
  var separatorStyles = _extends13({
    mx: spacing2
  }, styles2.separator);
  return React24.createElement(chakra.span, _extends13({
    ref,
    role: "presentation"
  }, rest, {
    __css: separatorStyles
  }));
});
if (__DEV__) {
  BreadcrumbSeparator.displayName = "BreadcrumbSeparator";
}
var BreadcrumbLink = forwardRef(function(props, ref) {
  var isCurrentPage = props.isCurrentPage, as = props.as, className = props.className, href = props.href, rest = _objectWithoutPropertiesLoose9(props, _excluded25);
  var styles2 = useStyles5();
  var sharedProps = _extends13({
    ref,
    as,
    className: cx("chakra-breadcrumb__link", className)
  }, rest);
  if (isCurrentPage) {
    return React24.createElement(chakra.span, _extends13({
      "aria-current": "page",
      __css: styles2.link
    }, sharedProps));
  }
  return React24.createElement(chakra.a, _extends13({
    __css: styles2.link,
    href
  }, sharedProps));
});
if (__DEV__) {
  BreadcrumbLink.displayName = "BreadcrumbLink";
}
var BreadcrumbItem = forwardRef(function(props, ref) {
  var isCurrentPage = props.isCurrentPage, separator = props.separator, isLastChild = props.isLastChild, spacing2 = props.spacing, children = props.children, className = props.className, rest = _objectWithoutPropertiesLoose9(props, _excluded33);
  var validChildren = getValidChildren(children);
  var clones = validChildren.map(function(child) {
    if (child.type === BreadcrumbLink) {
      return React24.cloneElement(child, {
        isCurrentPage
      });
    }
    if (child.type === BreadcrumbSeparator) {
      return React24.cloneElement(child, {
        spacing: spacing2,
        children: child.props.children || separator
      });
    }
    return child;
  });
  var styles2 = useStyles5();
  var itemStyles = _extends13({
    display: "inline-flex",
    alignItems: "center"
  }, styles2.item);
  var _className = cx("chakra-breadcrumb__list-item", className);
  return React24.createElement(chakra.li, _extends13({
    ref,
    className: _className
  }, rest, {
    __css: itemStyles
  }), clones, !isLastChild && React24.createElement(BreadcrumbSeparator, {
    spacing: spacing2
  }, separator));
});
if (__DEV__) {
  BreadcrumbItem.displayName = "BreadcrumbItem";
}
var Breadcrumb2 = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("Breadcrumb", props);
  var ownProps = omitThemingProps(props);
  var children = ownProps.children, _ownProps$spacing = ownProps.spacing, spacing2 = _ownProps$spacing === void 0 ? "0.5rem" : _ownProps$spacing, _ownProps$separator = ownProps.separator, separator = _ownProps$separator === void 0 ? "/" : _ownProps$separator, className = ownProps.className, rest = _objectWithoutPropertiesLoose9(ownProps, _excluded42);
  var validChildren = getValidChildren(children);
  var count = validChildren.length;
  var clones = validChildren.map(function(child, index2) {
    return React24.cloneElement(child, {
      separator,
      spacing: spacing2,
      isLastChild: count === index2 + 1
    });
  });
  var _className = cx("chakra-breadcrumb", className);
  return React24.createElement(chakra.nav, _extends13({
    ref,
    "aria-label": "breadcrumb",
    className: _className,
    __css: styles2.container
  }, rest), React24.createElement(StylesProvider5, {
    value: styles2
  }, React24.createElement(chakra.ol, {
    className: "chakra-breadcrumb__list"
  }, clones)));
});
if (__DEV__) {
  Breadcrumb2.displayName = "Breadcrumb";
}

// node_modules/@chakra-ui/button/dist/chakra-ui-button.esm.js
var React25 = __toESM(require_react());
function _objectWithoutPropertiesLoose10(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends14() {
  _extends14 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends14.apply(this, arguments);
}
var _excluded$42 = ["size", "colorScheme", "variant", "className", "spacing", "isAttached", "isDisabled"];
var _createContext5 = createContext({
  strict: false,
  name: "ButtonGroupContext"
});
var ButtonGroupProvider = _createContext5[0];
var useButtonGroup = _createContext5[1];
var ButtonGroup = forwardRef(function(props, ref) {
  var size2 = props.size, colorScheme = props.colorScheme, variant = props.variant, className = props.className, _props$spacing = props.spacing, spacing2 = _props$spacing === void 0 ? "0.5rem" : _props$spacing, isAttached = props.isAttached, isDisabled = props.isDisabled, rest = _objectWithoutPropertiesLoose10(props, _excluded$42);
  var _className = cx("chakra-button__group", className);
  var context = React25.useMemo(function() {
    return {
      size: size2,
      colorScheme,
      variant,
      isDisabled
    };
  }, [size2, colorScheme, variant, isDisabled]);
  var groupStyles = {
    display: "inline-flex"
  };
  if (isAttached) {
    groupStyles = _extends14({}, groupStyles, {
      "> *:first-of-type:not(:last-of-type)": {
        borderEndRadius: 0
      },
      "> *:not(:first-of-type):not(:last-of-type)": {
        borderRadius: 0
      },
      "> *:not(:first-of-type):last-of-type": {
        borderStartRadius: 0
      }
    });
  } else {
    groupStyles = _extends14({}, groupStyles, {
      "& > *:not(style) ~ *:not(style)": {
        marginStart: spacing2
      }
    });
  }
  return React25.createElement(ButtonGroupProvider, {
    value: context
  }, React25.createElement(chakra.div, _extends14({
    ref,
    role: "group",
    __css: groupStyles,
    className: _className,
    "data-attached": isAttached ? "" : void 0
  }, rest)));
});
if (__DEV__) {
  ButtonGroup.displayName = "ButtonGroup";
}
var _excluded$32 = ["label", "placement", "spacing", "children", "className", "__css"];
var ButtonSpinner = function ButtonSpinner2(props) {
  var label = props.label, placement = props.placement, _props$spacing = props.spacing, spacing2 = _props$spacing === void 0 ? "0.5rem" : _props$spacing, _props$children = props.children, children = _props$children === void 0 ? React25.createElement(Spinner2, {
    color: "currentColor",
    width: "1em",
    height: "1em"
  }) : _props$children, className = props.className, __css = props.__css, rest = _objectWithoutPropertiesLoose10(props, _excluded$32);
  var _className = cx("chakra-button__spinner", className);
  var marginProp = placement === "start" ? "marginEnd" : "marginStart";
  var spinnerStyles = React25.useMemo(function() {
    var _extends210;
    return _extends14((_extends210 = {
      display: "flex",
      alignItems: "center",
      position: label ? "relative" : "absolute"
    }, _extends210[marginProp] = label ? spacing2 : 0, _extends210.fontSize = "1em", _extends210.lineHeight = "normal", _extends210), __css);
  }, [__css, label, marginProp, spacing2]);
  return React25.createElement(chakra.div, _extends14({
    className: _className
  }, rest, {
    __css: spinnerStyles
  }), children);
};
if (__DEV__) {
  ButtonSpinner.displayName = "ButtonSpinner";
}
var _excluded$22 = ["children", "className"];
var ButtonIcon = function ButtonIcon2(props) {
  var children = props.children, className = props.className, rest = _objectWithoutPropertiesLoose10(props, _excluded$22);
  var _children = React25.isValidElement(children) ? React25.cloneElement(children, {
    "aria-hidden": true,
    focusable: false
  }) : children;
  var _className = cx("chakra-button__icon", className);
  return React25.createElement(chakra.span, _extends14({
    display: "inline-flex",
    alignSelf: "center",
    flexShrink: 0
  }, rest, {
    className: _className
  }), _children);
};
if (__DEV__) {
  ButtonIcon.displayName = "ButtonIcon";
}
function useButtonType(value) {
  var _React$useState = React25.useState(!value), isButton = _React$useState[0], setIsButton = _React$useState[1];
  var refCallback = React25.useCallback(function(node2) {
    if (!node2)
      return;
    setIsButton(node2.tagName === "BUTTON");
  }, []);
  var type = isButton ? "button" : void 0;
  return {
    ref: refCallback,
    type
  };
}
var _excluded$14 = ["isDisabled", "isLoading", "isActive", "children", "leftIcon", "rightIcon", "loadingText", "iconSpacing", "type", "spinner", "spinnerPlacement", "className", "as"];
var Button2 = forwardRef(function(props, ref) {
  var group = useButtonGroup();
  var styles2 = useStyleConfig("Button", _extends14({}, group, props));
  var _omitThemingProps = omitThemingProps(props), _omitThemingProps$isD = _omitThemingProps.isDisabled, isDisabled = _omitThemingProps$isD === void 0 ? group == null ? void 0 : group.isDisabled : _omitThemingProps$isD, isLoading = _omitThemingProps.isLoading, isActive = _omitThemingProps.isActive, children = _omitThemingProps.children, leftIcon = _omitThemingProps.leftIcon, rightIcon = _omitThemingProps.rightIcon, loadingText = _omitThemingProps.loadingText, _omitThemingProps$ico = _omitThemingProps.iconSpacing, iconSpacing2 = _omitThemingProps$ico === void 0 ? "0.5rem" : _omitThemingProps$ico, type = _omitThemingProps.type, spinner = _omitThemingProps.spinner, _omitThemingProps$spi = _omitThemingProps.spinnerPlacement, spinnerPlacement = _omitThemingProps$spi === void 0 ? "start" : _omitThemingProps$spi, className = _omitThemingProps.className, as = _omitThemingProps.as, rest = _objectWithoutPropertiesLoose10(_omitThemingProps, _excluded$14);
  var buttonStyles = React25.useMemo(function() {
    var _styles$_focus;
    var _focus = (0, import_lodash.default)({}, (_styles$_focus = styles2 == null ? void 0 : styles2["_focus"]) != null ? _styles$_focus : {}, {
      zIndex: 1
    });
    return _extends14({
      display: "inline-flex",
      appearance: "none",
      alignItems: "center",
      justifyContent: "center",
      userSelect: "none",
      position: "relative",
      whiteSpace: "nowrap",
      verticalAlign: "middle",
      outline: "none"
    }, styles2, !!group && {
      _focus
    });
  }, [styles2, group]);
  var _useButtonType = useButtonType(as), _ref2 = _useButtonType.ref, defaultType = _useButtonType.type;
  var contentProps = {
    rightIcon,
    leftIcon,
    iconSpacing: iconSpacing2,
    children
  };
  return React25.createElement(chakra.button, _extends14({
    disabled: isDisabled || isLoading,
    ref: useMergeRefs(ref, _ref2),
    as,
    type: type != null ? type : defaultType,
    "data-active": dataAttr(isActive),
    "data-loading": dataAttr(isLoading),
    __css: buttonStyles,
    className: cx("chakra-button", className)
  }, rest), isLoading && spinnerPlacement === "start" && React25.createElement(ButtonSpinner, {
    className: "chakra-button__spinner--start",
    label: loadingText,
    placement: "start",
    spacing: iconSpacing2
  }, spinner), isLoading ? loadingText || React25.createElement(chakra.span, {
    opacity: 0
  }, React25.createElement(ButtonContent, contentProps)) : React25.createElement(ButtonContent, contentProps), isLoading && spinnerPlacement === "end" && React25.createElement(ButtonSpinner, {
    className: "chakra-button__spinner--end",
    label: loadingText,
    placement: "end",
    spacing: iconSpacing2
  }, spinner));
});
if (__DEV__) {
  Button2.displayName = "Button";
}
function ButtonContent(props) {
  var leftIcon = props.leftIcon, rightIcon = props.rightIcon, children = props.children, iconSpacing2 = props.iconSpacing;
  return React25.createElement(React25.Fragment, null, leftIcon && React25.createElement(ButtonIcon, {
    marginEnd: iconSpacing2
  }, leftIcon), children, rightIcon && React25.createElement(ButtonIcon, {
    marginStart: iconSpacing2
  }, rightIcon));
}
var _excluded10 = ["icon", "children", "isRound", "aria-label"];
var IconButton = forwardRef(function(props, ref) {
  var icon = props.icon, children = props.children, isRound = props.isRound, ariaLabel = props["aria-label"], rest = _objectWithoutPropertiesLoose10(props, _excluded10);
  var element = icon || children;
  var _children = React25.isValidElement(element) ? React25.cloneElement(element, {
    "aria-hidden": true,
    focusable: false
  }) : null;
  return React25.createElement(Button2, _extends14({
    padding: "0",
    borderRadius: isRound ? "full" : void 0,
    ref,
    "aria-label": ariaLabel
  }, rest), _children);
});
if (__DEV__) {
  IconButton.displayName = "IconButton";
}

// node_modules/@chakra-ui/checkbox/dist/chakra-ui-checkbox.esm.js
var React27 = __toESM(require_react());
var import_react55 = __toESM(require_react());

// node_modules/@chakra-ui/form-control/dist/chakra-ui-form-control.esm.js
var React26 = __toESM(require_react());
function _extends15() {
  _extends15 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends15.apply(this, arguments);
}
function _objectWithoutPropertiesLoose11(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$23 = ["id", "isRequired", "isInvalid", "isDisabled", "isReadOnly"];
var _excluded2$12 = ["getRootProps", "htmlProps"];
var _createStylesContext$1 = createStylesContext("FormControl");
var StylesProvider$1 = _createStylesContext$1[0];
var useStyles$1 = _createStylesContext$1[1];
var useFormControlStyles = useStyles$1;
var _createContext6 = createContext({
  strict: false,
  name: "FormControlContext"
});
var FormControlProvider = _createContext6[0];
var useFormControlContext = _createContext6[1];
function useFormControlProvider(props) {
  var idProp = props.id, isRequired = props.isRequired, isInvalid = props.isInvalid, isDisabled = props.isDisabled, isReadOnly = props.isReadOnly, htmlProps = _objectWithoutPropertiesLoose11(props, _excluded$23);
  var uuid = useId();
  var id2 = idProp || "field-" + uuid;
  var labelId = id2 + "-label";
  var feedbackId = id2 + "-feedback";
  var helpTextId = id2 + "-helptext";
  var _React$useState = React26.useState(false), hasFeedbackText = _React$useState[0], setHasFeedbackText = _React$useState[1];
  var _React$useState2 = React26.useState(false), hasHelpText = _React$useState2[0], setHasHelpText = _React$useState2[1];
  var _useBoolean = useBoolean(), isFocused = _useBoolean[0], setFocus2 = _useBoolean[1];
  var getHelpTextProps = React26.useCallback(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends15({
      id: helpTextId
    }, props2, {
      ref: mergeRefs(forwardedRef, function(node2) {
        if (!node2)
          return;
        setHasHelpText(true);
      })
    });
  }, [helpTextId]);
  var getLabelProps = React26.useCallback(function(props2, forwardedRef) {
    var _props$id, _props$htmlFor;
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends15({}, props2, {
      ref: forwardedRef,
      "data-focus": dataAttr(isFocused),
      "data-disabled": dataAttr(isDisabled),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly),
      id: (_props$id = props2.id) != null ? _props$id : labelId,
      htmlFor: (_props$htmlFor = props2.htmlFor) != null ? _props$htmlFor : id2
    });
  }, [id2, isDisabled, isFocused, isInvalid, isReadOnly, labelId]);
  var getErrorMessageProps = React26.useCallback(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends15({
      id: feedbackId
    }, props2, {
      ref: mergeRefs(forwardedRef, function(node2) {
        if (!node2)
          return;
        setHasFeedbackText(true);
      }),
      "aria-live": "polite"
    });
  }, [feedbackId]);
  var getRootProps = React26.useCallback(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends15({}, props2, htmlProps, {
      ref: forwardedRef,
      role: "group"
    });
  }, [htmlProps]);
  var getRequiredIndicatorProps = React26.useCallback(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends15({}, props2, {
      ref: forwardedRef,
      role: "presentation",
      "aria-hidden": true,
      children: props2.children || "*"
    });
  }, []);
  return {
    isRequired: !!isRequired,
    isInvalid: !!isInvalid,
    isReadOnly: !!isReadOnly,
    isDisabled: !!isDisabled,
    isFocused: !!isFocused,
    onFocus: setFocus2.on,
    onBlur: setFocus2.off,
    hasFeedbackText,
    setHasFeedbackText,
    hasHelpText,
    setHasHelpText,
    id: id2,
    labelId,
    feedbackId,
    helpTextId,
    htmlProps,
    getHelpTextProps,
    getErrorMessageProps,
    getRootProps,
    getLabelProps,
    getRequiredIndicatorProps
  };
}
var FormControl = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("Form", props);
  var ownProps = omitThemingProps(props);
  var _useFormControlProvid = useFormControlProvider(ownProps), getRootProps = _useFormControlProvid.getRootProps;
  _useFormControlProvid.htmlProps;
  var context = _objectWithoutPropertiesLoose11(_useFormControlProvid, _excluded2$12);
  var className = cx("chakra-form-control", props.className);
  return React26.createElement(FormControlProvider, {
    value: context
  }, React26.createElement(StylesProvider$1, {
    value: styles2
  }, React26.createElement(chakra.div, _extends15({}, getRootProps({}, ref), {
    className,
    __css: styles2["container"]
  }))));
});
if (__DEV__) {
  FormControl.displayName = "FormControl";
}
var FormHelperText = forwardRef(function(props, ref) {
  var field = useFormControlContext();
  var styles2 = useStyles$1();
  var className = cx("chakra-form__helper-text", props.className);
  return React26.createElement(chakra.div, _extends15({}, field == null ? void 0 : field.getHelpTextProps(props, ref), {
    __css: styles2.helperText,
    className
  }));
});
if (__DEV__) {
  FormHelperText.displayName = "FormHelperText";
}
var _excluded$15 = ["isDisabled", "isInvalid", "isReadOnly", "isRequired"];
var _excluded26 = ["id", "disabled", "readOnly", "required", "isRequired", "isInvalid", "isReadOnly", "isDisabled", "onFocus", "onBlur"];
function useFormControl(props) {
  var _useFormControlProps = useFormControlProps(props), isDisabled = _useFormControlProps.isDisabled, isInvalid = _useFormControlProps.isInvalid, isReadOnly = _useFormControlProps.isReadOnly, isRequired = _useFormControlProps.isRequired, rest = _objectWithoutPropertiesLoose11(_useFormControlProps, _excluded$15);
  return _extends15({}, rest, {
    disabled: isDisabled,
    readOnly: isReadOnly,
    required: isRequired,
    "aria-invalid": ariaAttr(isInvalid),
    "aria-required": ariaAttr(isRequired),
    "aria-readonly": ariaAttr(isReadOnly)
  });
}
function useFormControlProps(props) {
  var _ref2, _ref22, _ref3;
  var field = useFormControlContext();
  var id2 = props.id, disabled = props.disabled, readOnly = props.readOnly, required = props.required, isRequired = props.isRequired, isInvalid = props.isInvalid, isReadOnly = props.isReadOnly, isDisabled = props.isDisabled, onFocus3 = props.onFocus, onBlur3 = props.onBlur, rest = _objectWithoutPropertiesLoose11(props, _excluded26);
  var labelIds = props["aria-describedby"] ? [props["aria-describedby"]] : [];
  if (field != null && field.hasFeedbackText && field != null && field.isInvalid) {
    labelIds.push(field.feedbackId);
  }
  if (field != null && field.hasHelpText) {
    labelIds.push(field.helpTextId);
  }
  return _extends15({}, rest, {
    "aria-describedby": labelIds.join(" ") || void 0,
    id: id2 != null ? id2 : field == null ? void 0 : field.id,
    isDisabled: (_ref2 = disabled != null ? disabled : isDisabled) != null ? _ref2 : field == null ? void 0 : field.isDisabled,
    isReadOnly: (_ref22 = readOnly != null ? readOnly : isReadOnly) != null ? _ref22 : field == null ? void 0 : field.isReadOnly,
    isRequired: (_ref3 = required != null ? required : isRequired) != null ? _ref3 : field == null ? void 0 : field.isRequired,
    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,
    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus3),
    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur3)
  });
}
var _createStylesContext5 = createStylesContext("FormError");
var StylesProvider6 = _createStylesContext5[0];
var useStyles6 = _createStylesContext5[1];
var useFormErrorStyles = useStyles6;
var FormErrorMessage = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("FormError", props);
  var ownProps = omitThemingProps(props);
  var field = useFormControlContext();
  if (!(field != null && field.isInvalid))
    return null;
  return React26.createElement(StylesProvider6, {
    value: styles2
  }, React26.createElement(chakra.div, _extends15({}, field == null ? void 0 : field.getErrorMessageProps(ownProps, ref), {
    className: cx("chakra-form__error-message", props.className),
    __css: _extends15({
      display: "flex",
      alignItems: "center"
    }, styles2.text)
  })));
});
if (__DEV__) {
  FormErrorMessage.displayName = "FormErrorMessage";
}
var FormErrorIcon = forwardRef(function(props, ref) {
  var styles2 = useStyles6();
  var field = useFormControlContext();
  if (!(field != null && field.isInvalid))
    return null;
  var _className = cx("chakra-form__error-icon", props.className);
  return React26.createElement(Icon$1, _extends15({
    ref,
    "aria-hidden": true
  }, props, {
    __css: styles2.icon,
    className: _className
  }), React26.createElement("path", {
    fill: "currentColor",
    d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
  }));
});
if (__DEV__) {
  FormErrorIcon.displayName = "FormErrorIcon";
}
var _excluded11 = ["className", "children", "requiredIndicator", "optionalIndicator"];
var FormLabel2 = forwardRef(function(passedProps, ref) {
  var _field$getLabelProps;
  var styles2 = useStyleConfig("FormLabel", passedProps);
  var props = omitThemingProps(passedProps);
  props.className;
  var children = props.children, _props$requiredIndica = props.requiredIndicator, requiredIndicator = _props$requiredIndica === void 0 ? React26.createElement(RequiredIndicator, null) : _props$requiredIndica, _props$optionalIndica = props.optionalIndicator, optionalIndicator = _props$optionalIndica === void 0 ? null : _props$optionalIndica, rest = _objectWithoutPropertiesLoose11(props, _excluded11);
  var field = useFormControlContext();
  var ownProps = (_field$getLabelProps = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _field$getLabelProps : _extends15({
    ref
  }, rest);
  return React26.createElement(chakra.label, _extends15({}, ownProps, {
    className: cx("chakra-form__label", props.className),
    __css: _extends15({
      display: "block",
      textAlign: "start"
    }, styles2)
  }), children, field != null && field.isRequired ? requiredIndicator : optionalIndicator);
});
if (__DEV__) {
  FormLabel2.displayName = "FormLabel";
}
var RequiredIndicator = forwardRef(function(props, ref) {
  var field = useFormControlContext();
  var styles2 = useFormControlStyles();
  if (!(field != null && field.isRequired))
    return null;
  var className = cx("chakra-form__required-indicator", props.className);
  return React26.createElement(chakra.span, _extends15({}, field == null ? void 0 : field.getRequiredIndicatorProps(props, ref), {
    __css: styles2.requiredIndicator,
    className
  }));
});
if (__DEV__) {
  RequiredIndicator.displayName = "RequiredIndicator";
}

// node_modules/@zag-js/focus-visible/dist/index.mjs
var hasSetup = false;
var modality = null;
var hasEventBeforeFocus = false;
var handlers = /* @__PURE__ */ new Set();
var isMac = typeof window !== "undefined" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false;
function isValidKey(event) {
  return !(event.metaKey || !isMac && event.altKey || event.ctrlKey);
}
function trigger(modality2, event) {
  handlers.forEach((handler) => handler(modality2, event));
}
function onKeyboardEvent(event) {
  hasEventBeforeFocus = true;
  if (isValidKey(event)) {
    modality = "keyboard";
    trigger("keyboard", event);
  }
}
function onPointerEvent(event) {
  modality = "pointer";
  if (event.type === "mousedown" || event.type === "pointerdown") {
    hasEventBeforeFocus = true;
    trigger("pointer", event);
  }
}
function onWindowFocus(event) {
  if (event.target === window || event.target === document) {
    return;
  }
  if (!hasEventBeforeFocus) {
    modality = "keyboard";
    trigger("keyboard", event);
  }
  hasEventBeforeFocus = false;
}
function onWindowBlur() {
  hasEventBeforeFocus = false;
}
function isFocusVisible() {
  return modality !== "pointer";
}
function setupGlobalFocusEvents() {
  if (typeof window === "undefined" || hasSetup) {
    return;
  }
  const { focus: focus2 } = HTMLElement.prototype;
  HTMLElement.prototype.focus = function focusElement(...args) {
    hasEventBeforeFocus = true;
    focus2.apply(this, args);
  };
  document.addEventListener("keydown", onKeyboardEvent, true);
  document.addEventListener("keyup", onKeyboardEvent, true);
  window.addEventListener("focus", onWindowFocus, true);
  window.addEventListener("blur", onWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    document.addEventListener("pointerdown", onPointerEvent, true);
    document.addEventListener("pointermove", onPointerEvent, true);
    document.addEventListener("pointerup", onPointerEvent, true);
  } else {
    document.addEventListener("mousedown", onPointerEvent, true);
    document.addEventListener("mousemove", onPointerEvent, true);
    document.addEventListener("mouseup", onPointerEvent, true);
  }
  hasSetup = true;
}
function trackFocusVisible(fn6) {
  setupGlobalFocusEvents();
  fn6(isFocusVisible());
  const handler = () => fn6(isFocusVisible());
  handlers.add(handler);
  return () => {
    handlers.delete(handler);
  };
}

// node_modules/@chakra-ui/checkbox/dist/chakra-ui-checkbox.esm.js
function _extends16() {
  _extends16 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends16.apply(this, arguments);
}
function useCheckboxGroup(props) {
  if (props === void 0) {
    props = {};
  }
  var _props = props, defaultValue = _props.defaultValue, valueProp = _props.value, onChange = _props.onChange, isDisabled = _props.isDisabled, isNative = _props.isNative;
  var onChangeProp = useCallbackRef(onChange);
  var _useControllableState = useControllableState({
    value: valueProp,
    defaultValue: defaultValue || [],
    onChange: onChangeProp
  }), value = _useControllableState[0], setValue = _useControllableState[1];
  var handleChange = (0, import_react55.useCallback)(function(eventOrValue) {
    if (!value)
      return;
    var isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);
    var selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;
    var nextValue = isChecked ? addItem(value, selectedValue) : value.filter(function(v) {
      return String(v) !== String(selectedValue);
    });
    setValue(nextValue);
  }, [setValue, value]);
  var getCheckboxProps = (0, import_react55.useCallback)(function(props2) {
    var _extends210;
    if (props2 === void 0) {
      props2 = {};
    }
    var checkedKey = isNative ? "checked" : "isChecked";
    return _extends16({}, props2, (_extends210 = {}, _extends210[checkedKey] = value.some(function(val) {
      return String(props2.value) === String(val);
    }), _extends210.onChange = handleChange, _extends210));
  }, [handleChange, isNative, value]);
  return {
    value,
    isDisabled,
    onChange: handleChange,
    setValue,
    getCheckboxProps
  };
}
var _createContext7 = createContext({
  name: "CheckboxGroupContext",
  strict: false
});
var CheckboxGroupProvider = _createContext7[0];
var useCheckboxGroupContext = _createContext7[1];
var CheckboxGroup = function CheckboxGroup2(props) {
  var colorScheme = props.colorScheme, size2 = props.size, variant = props.variant, children = props.children, isDisabled = props.isDisabled;
  var _useCheckboxGroup = useCheckboxGroup(props), value = _useCheckboxGroup.value, onChange = _useCheckboxGroup.onChange;
  var group = React27.useMemo(function() {
    return {
      size: size2,
      onChange,
      colorScheme,
      value,
      variant,
      isDisabled
    };
  }, [size2, onChange, colorScheme, value, variant, isDisabled]);
  return React27.createElement(CheckboxGroupProvider, {
    value: group
  }, children);
};
if (__DEV__) {
  CheckboxGroup.displayName = "CheckboxGroup";
}
function _objectWithoutPropertiesLoose12(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$24 = ["isIndeterminate", "isChecked"];
function __motion(el) {
  var m2 = motion;
  if ("custom" in m2 && typeof m2.custom === "function") {
    return m2.custom(el);
  }
  return m2(el);
}
var MotionSvg = __motion(chakra.svg);
var CheckIcon3 = function CheckIcon4(props) {
  return React27.createElement(MotionSvg, _extends16({
    width: "1.2em",
    viewBox: "0 0 12 10",
    variants: {
      unchecked: {
        opacity: 0,
        strokeDashoffset: 16
      },
      checked: {
        opacity: 1,
        strokeDashoffset: 0,
        transition: {
          duration: 0.2
        }
      }
    },
    style: {
      fill: "none",
      strokeWidth: 2,
      stroke: "currentColor",
      strokeDasharray: 16
    }
  }, props), React27.createElement("polyline", {
    points: "1.5 6 4.5 9 10.5 1"
  }));
};
var IndeterminateIcon = function IndeterminateIcon2(props) {
  return React27.createElement(MotionSvg, _extends16({
    width: "1.2em",
    viewBox: "0 0 24 24",
    variants: {
      unchecked: {
        scaleX: 0.65,
        opacity: 0
      },
      checked: {
        scaleX: 1,
        opacity: 1,
        transition: {
          scaleX: {
            duration: 0
          },
          opacity: {
            duration: 0.02
          }
        }
      }
    },
    style: {
      stroke: "currentColor",
      strokeWidth: 4
    }
  }, props), React27.createElement("line", {
    x1: "21",
    x2: "3",
    y1: "12",
    y2: "12"
  }));
};
var CheckboxTransition = function CheckboxTransition2(_ref2) {
  var open = _ref2.open, children = _ref2.children;
  return React27.createElement(AnimatePresence, {
    initial: false
  }, open && React27.createElement(motion.div, {
    variants: {
      unchecked: {
        scale: 0.5
      },
      checked: {
        scale: 1
      }
    },
    initial: "unchecked",
    animate: "checked",
    exit: "unchecked",
    style: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      height: "100%"
    }
  }, children));
};
var CheckboxIcon = function CheckboxIcon2(props) {
  var isIndeterminate = props.isIndeterminate, isChecked = props.isChecked, rest = _objectWithoutPropertiesLoose12(props, _excluded$24);
  var IconEl = isIndeterminate ? IndeterminateIcon : CheckIcon3;
  return React27.createElement(CheckboxTransition, {
    open: isChecked || isIndeterminate
  }, React27.createElement(IconEl, rest));
};
var _excluded$16 = ["defaultChecked", "isChecked", "isFocusable", "onChange", "isIndeterminate", "name", "value", "tabIndex", "aria-label", "aria-labelledby", "aria-invalid"];
function useCheckbox(props) {
  if (props === void 0) {
    props = {};
  }
  var formControlProps = useFormControlProps(props);
  var isDisabled = formControlProps.isDisabled, isReadOnly = formControlProps.isReadOnly, isRequired = formControlProps.isRequired, isInvalid = formControlProps.isInvalid, id2 = formControlProps.id, onBlur3 = formControlProps.onBlur, onFocus3 = formControlProps.onFocus, ariaDescribedBy = formControlProps["aria-describedby"];
  var _props = props, defaultChecked = _props.defaultChecked, checkedProp = _props.isChecked, isFocusable = _props.isFocusable, onChange = _props.onChange, isIndeterminate = _props.isIndeterminate, name = _props.name, value = _props.value, _props$tabIndex = _props.tabIndex, tabIndex = _props$tabIndex === void 0 ? void 0 : _props$tabIndex, ariaLabel = _props["aria-label"], ariaLabelledBy = _props["aria-labelledby"], ariaInvalid = _props["aria-invalid"], rest = _objectWithoutPropertiesLoose12(_props, _excluded$16);
  var htmlProps = omit(rest, ["isDisabled", "isReadOnly", "isRequired", "isInvalid", "id", "onBlur", "onFocus", "aria-describedby"]);
  var onChangeProp = useCallbackRef(onChange);
  var onBlurProp = useCallbackRef(onBlur3);
  var onFocusProp = useCallbackRef(onFocus3);
  var _useState = (0, import_react55.useState)(false), isFocusVisible2 = _useState[0], setIsFocusVisible = _useState[1];
  var _useBoolean = useBoolean(), isFocused = _useBoolean[0], setFocused = _useBoolean[1];
  var _useBoolean2 = useBoolean(), isHovered = _useBoolean2[0], setHovered = _useBoolean2[1];
  var _useBoolean3 = useBoolean(), isActive = _useBoolean3[0], setActive = _useBoolean3[1];
  (0, import_react55.useEffect)(function() {
    return trackFocusVisible(setIsFocusVisible);
  }, []);
  var inputRef = (0, import_react55.useRef)(null);
  var _useState2 = (0, import_react55.useState)(true), rootIsLabelElement = _useState2[0], setRootIsLabelElement = _useState2[1];
  var _useState3 = (0, import_react55.useState)(!!defaultChecked), checkedState = _useState3[0], setCheckedState = _useState3[1];
  var _useControllableProp = useControllableProp(checkedProp, checkedState), isControlled = _useControllableProp[0], isChecked = _useControllableProp[1];
  var handleChange = (0, import_react55.useCallback)(function(event) {
    if (isReadOnly || isDisabled) {
      event.preventDefault();
      return;
    }
    if (!isControlled) {
      if (isChecked) {
        setCheckedState(event.target.checked);
      } else {
        setCheckedState(isIndeterminate ? true : event.target.checked);
      }
    }
    onChangeProp == null ? void 0 : onChangeProp(event);
  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChangeProp]);
  useSafeLayoutEffect(function() {
    if (inputRef.current) {
      inputRef.current.indeterminate = Boolean(isIndeterminate);
    }
  }, [isIndeterminate]);
  useUpdateEffect(function() {
    if (isDisabled) {
      setFocused.off();
    }
  }, [isDisabled, setFocused]);
  useSafeLayoutEffect(function() {
    var el = inputRef.current;
    if (!(el != null && el.form))
      return;
    el.form.onreset = function() {
      setCheckedState(!!defaultChecked);
    };
  }, []);
  var trulyDisabled = isDisabled && !isFocusable;
  var onKeyDown = (0, import_react55.useCallback)(function(event) {
    if (event.key === " ") {
      setActive.on();
    }
  }, [setActive]);
  var onKeyUp = (0, import_react55.useCallback)(function(event) {
    if (event.key === " ") {
      setActive.off();
    }
  }, [setActive]);
  useSafeLayoutEffect(function() {
    if (!inputRef.current)
      return;
    var notInSync = inputRef.current.checked !== isChecked;
    if (notInSync) {
      setCheckedState(inputRef.current.checked);
    }
  }, [inputRef.current]);
  var getCheckboxProps = (0, import_react55.useCallback)(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    var onPressDown = function onPressDown2(event) {
      if (isFocused) {
        event.preventDefault();
      }
      setActive.on();
    };
    return _extends16({}, props2, {
      ref: forwardedRef,
      "data-active": dataAttr(isActive),
      "data-hover": dataAttr(isHovered),
      "data-checked": dataAttr(isChecked),
      "data-focus": dataAttr(isFocused),
      "data-focus-visible": dataAttr(isFocused && isFocusVisible2),
      "data-indeterminate": dataAttr(isIndeterminate),
      "data-disabled": dataAttr(isDisabled),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly),
      "aria-hidden": true,
      onMouseDown: callAllHandlers(props2.onMouseDown, onPressDown),
      onMouseUp: callAllHandlers(props2.onMouseUp, setActive.off),
      onMouseEnter: callAllHandlers(props2.onMouseEnter, setHovered.on),
      onMouseLeave: callAllHandlers(props2.onMouseLeave, setHovered.off)
    });
  }, [isActive, isChecked, isDisabled, isFocused, isFocusVisible2, isHovered, isIndeterminate, isInvalid, isReadOnly, setActive, setHovered.off, setHovered.on]);
  var getRootProps = (0, import_react55.useCallback)(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends16({}, htmlProps, props2, {
      ref: mergeRefs(forwardedRef, function(node2) {
        if (!node2)
          return;
        setRootIsLabelElement(node2.tagName === "LABEL");
      }),
      onClick: callAllHandlers(props2.onClick, function() {
        if (!rootIsLabelElement) {
          var _inputRef$current;
          (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.click();
          focus(inputRef.current, {
            nextTick: true
          });
        }
      }),
      "data-disabled": dataAttr(isDisabled),
      "data-checked": dataAttr(isChecked),
      "data-invalid": dataAttr(isInvalid)
    });
  }, [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement]);
  var getInputProps = (0, import_react55.useCallback)(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends16({}, props2, {
      ref: mergeRefs(inputRef, forwardedRef),
      type: "checkbox",
      name,
      value,
      id: id2,
      tabIndex,
      onChange: callAllHandlers(props2.onChange, handleChange),
      onBlur: callAllHandlers(props2.onBlur, onBlurProp, setFocused.off),
      onFocus: callAllHandlers(props2.onFocus, onFocusProp, setFocused.on),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),
      required: isRequired,
      checked: isChecked,
      disabled: trulyDisabled,
      readOnly: isReadOnly,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      "aria-invalid": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,
      "aria-describedby": ariaDescribedBy,
      "aria-disabled": isDisabled,
      style: visuallyHiddenStyle
    });
  }, [name, value, id2, handleChange, setFocused.off, setFocused.on, onBlurProp, onFocusProp, onKeyDown, onKeyUp, isRequired, isChecked, trulyDisabled, isReadOnly, ariaLabel, ariaLabelledBy, ariaInvalid, isInvalid, ariaDescribedBy, isDisabled, tabIndex]);
  var getLabelProps = (0, import_react55.useCallback)(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends16({}, props2, {
      ref: forwardedRef,
      onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent),
      onTouchStart: callAllHandlers(props2.onTouchStart, stopEvent),
      "data-disabled": dataAttr(isDisabled),
      "data-checked": dataAttr(isChecked),
      "data-invalid": dataAttr(isInvalid)
    });
  }, [isChecked, isDisabled, isInvalid]);
  var state = {
    isInvalid,
    isFocused,
    isChecked,
    isActive,
    isHovered,
    isIndeterminate,
    isDisabled,
    isReadOnly,
    isRequired
  };
  return {
    state,
    getRootProps,
    getCheckboxProps,
    getInputProps,
    getLabelProps,
    htmlProps
  };
}
function stopEvent(event) {
  event.preventDefault();
  event.stopPropagation();
}
var _excluded12 = ["spacing", "className", "children", "iconColor", "iconSize", "icon", "isChecked", "isDisabled", "onChange", "inputProps"];
var CheckboxControl = chakra("span", {
  baseStyle: {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    verticalAlign: "top",
    userSelect: "none",
    flexShrink: 0
  }
});
var Label = chakra("label", {
  baseStyle: {
    cursor: "pointer",
    display: "inline-flex",
    alignItems: "center",
    verticalAlign: "top",
    position: "relative"
  }
});
var Checkbox2 = forwardRef(function(props, ref) {
  var group = useCheckboxGroupContext();
  var mergedProps = _extends16({}, group, props);
  var styles2 = useMultiStyleConfig("Checkbox", mergedProps);
  var ownProps = omitThemingProps(props);
  var _ownProps$spacing = ownProps.spacing, spacing2 = _ownProps$spacing === void 0 ? "0.5rem" : _ownProps$spacing, className = ownProps.className, children = ownProps.children, iconColor = ownProps.iconColor, iconSize = ownProps.iconSize, _ownProps$icon = ownProps.icon, icon = _ownProps$icon === void 0 ? React27.createElement(CheckboxIcon, null) : _ownProps$icon, isCheckedProp = ownProps.isChecked, _ownProps$isDisabled = ownProps.isDisabled, isDisabled = _ownProps$isDisabled === void 0 ? group == null ? void 0 : group.isDisabled : _ownProps$isDisabled, onChangeProp = ownProps.onChange, inputProps = ownProps.inputProps, rest = _objectWithoutPropertiesLoose12(ownProps, _excluded12);
  var isChecked = isCheckedProp;
  if (group != null && group.value && ownProps.value) {
    isChecked = group.value.includes(ownProps.value);
  }
  var onChange = onChangeProp;
  if (group != null && group.onChange && ownProps.value) {
    onChange = callAll(group.onChange, onChangeProp);
  }
  var _useCheckbox = useCheckbox(_extends16({}, rest, {
    isDisabled,
    isChecked,
    onChange
  })), state = _useCheckbox.state, getInputProps = _useCheckbox.getInputProps, getCheckboxProps = _useCheckbox.getCheckboxProps, getLabelProps = _useCheckbox.getLabelProps, getRootProps = _useCheckbox.getRootProps;
  var iconStyles = React27.useMemo(function() {
    return _extends16({
      opacity: state.isChecked || state.isIndeterminate ? 1 : 0,
      transform: state.isChecked || state.isIndeterminate ? "scale(1)" : "scale(0.95)",
      fontSize: iconSize,
      color: iconColor
    }, styles2.icon);
  }, [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles2.icon]);
  var clonedIcon = React27.cloneElement(icon, {
    __css: iconStyles,
    isIndeterminate: state.isIndeterminate,
    isChecked: state.isChecked
  });
  return React27.createElement(Label, _extends16({
    __css: styles2.container,
    className: cx("chakra-checkbox", className)
  }, getRootProps()), React27.createElement("input", _extends16({
    className: "chakra-checkbox__input"
  }, getInputProps(inputProps, ref))), React27.createElement(CheckboxControl, _extends16({
    __css: styles2.control,
    className: "chakra-checkbox__control"
  }, getCheckboxProps()), clonedIcon), children && React27.createElement(chakra.span, _extends16({
    className: "chakra-checkbox__label"
  }, getLabelProps(), {
    __css: _extends16({
      marginStart: spacing2
    }, styles2.label)
  }), children));
});
if (__DEV__) {
  Checkbox2.displayName = "Checkbox";
}

// node_modules/@chakra-ui/counter/dist/chakra-ui-counter.esm.js
var import_react56 = __toESM(require_react());
function useCounter(props) {
  if (props === void 0) {
    props = {};
  }
  var _props = props, onChange = _props.onChange, precisionProp = _props.precision, defaultValue = _props.defaultValue, valueProp = _props.value, _props$step = _props.step, stepProp = _props$step === void 0 ? 1 : _props$step, _props$min = _props.min, min2 = _props$min === void 0 ? minSafeInteger : _props$min, _props$max = _props.max, max2 = _props$max === void 0 ? maxSafeInteger : _props$max, _props$keepWithinRang = _props.keepWithinRange, keepWithinRange = _props$keepWithinRang === void 0 ? true : _props$keepWithinRang;
  var onChangeProp = useCallbackRef(onChange);
  var _useState = (0, import_react56.useState)(function() {
    var _cast;
    if (defaultValue == null)
      return "";
    return (_cast = cast3(defaultValue, stepProp, precisionProp)) != null ? _cast : "";
  }), valueState = _useState[0], setValue = _useState[1];
  var _useControllableProp = useControllableProp(valueProp, valueState), isControlled = _useControllableProp[0], value = _useControllableProp[1];
  var decimalPlaces = getDecimalPlaces(parse2(value), stepProp);
  var precision = precisionProp != null ? precisionProp : decimalPlaces;
  var update = (0, import_react56.useCallback)(function(next) {
    if (next === value)
      return;
    if (!isControlled) {
      setValue(next.toString());
    }
    onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse2(next));
  }, [onChangeProp, isControlled, value]);
  var clamp4 = (0, import_react56.useCallback)(function(value2) {
    var nextValue = value2;
    if (keepWithinRange) {
      nextValue = clampValue(nextValue, min2, max2);
    }
    return toPrecision(nextValue, precision);
  }, [precision, keepWithinRange, max2, min2]);
  var increment = (0, import_react56.useCallback)(function(step) {
    if (step === void 0) {
      step = stepProp;
    }
    var next;
    if (value === "") {
      next = parse2(step);
    } else {
      next = parse2(value) + step;
    }
    next = clamp4(next);
    update(next);
  }, [clamp4, stepProp, update, value]);
  var decrement = (0, import_react56.useCallback)(function(step) {
    if (step === void 0) {
      step = stepProp;
    }
    var next;
    if (value === "") {
      next = parse2(-step);
    } else {
      next = parse2(value) - step;
    }
    next = clamp4(next);
    update(next);
  }, [clamp4, stepProp, update, value]);
  var reset = (0, import_react56.useCallback)(function() {
    var next;
    if (defaultValue == null) {
      next = "";
    } else {
      var _cast2;
      next = (_cast2 = cast3(defaultValue, stepProp, precisionProp)) != null ? _cast2 : min2;
    }
    update(next);
  }, [defaultValue, precisionProp, stepProp, update, min2]);
  var castValue = (0, import_react56.useCallback)(function(value2) {
    var _cast3;
    var nextValue = (_cast3 = cast3(value2, stepProp, precision)) != null ? _cast3 : min2;
    update(nextValue);
  }, [precision, stepProp, update, min2]);
  var valueAsNumber = parse2(value);
  var isOutOfRange = valueAsNumber > max2 || valueAsNumber < min2;
  var isAtMax = valueAsNumber === max2;
  var isAtMin = valueAsNumber === min2;
  return {
    isOutOfRange,
    isAtMax,
    isAtMin,
    precision,
    value,
    valueAsNumber,
    update,
    reset,
    increment,
    decrement,
    clamp: clamp4,
    cast: castValue,
    setValue
  };
}
function parse2(value) {
  return parseFloat(value.toString().replace(/[^\w.-]+/g, ""));
}
function getDecimalPlaces(value, step) {
  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));
}
function cast3(value, step, precision) {
  var parsedValue = parse2(value);
  if (Number.isNaN(parsedValue))
    return void 0;
  var decimalPlaces = getDecimalPlaces(parsedValue, step);
  return toPrecision(parsedValue, precision != null ? precision : decimalPlaces);
}

// node_modules/@chakra-ui/editable/dist/chakra-ui-editable.esm.js
var React28 = __toESM(require_react());
var import_react57 = __toESM(require_react());
function _extends17() {
  _extends17 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends17.apply(this, arguments);
}
function _objectWithoutPropertiesLoose13(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$17 = ["onChange", "onCancel", "onSubmit", "value", "isDisabled", "defaultValue", "startWithEditView", "isPreviewFocusable", "submitOnBlur", "selectAllOnFocus", "placeholder", "onEdit"];
function useEditable(props) {
  if (props === void 0) {
    props = {};
  }
  var _props = props, onChangeProp = _props.onChange, onCancelProp = _props.onCancel, onSubmitProp = _props.onSubmit, valueProp = _props.value, isDisabled = _props.isDisabled, defaultValue = _props.defaultValue, startWithEditView = _props.startWithEditView, _props$isPreviewFocus = _props.isPreviewFocusable, isPreviewFocusable = _props$isPreviewFocus === void 0 ? true : _props$isPreviewFocus, _props$submitOnBlur = _props.submitOnBlur, submitOnBlur = _props$submitOnBlur === void 0 ? true : _props$submitOnBlur, _props$selectAllOnFoc = _props.selectAllOnFocus, selectAllOnFocus = _props$selectAllOnFoc === void 0 ? true : _props$selectAllOnFoc, placeholder = _props.placeholder, onEditProp = _props.onEdit, htmlProps = _objectWithoutPropertiesLoose13(_props, _excluded$17);
  var defaultIsEditing = Boolean(startWithEditView && !isDisabled);
  var _useState = (0, import_react57.useState)(defaultIsEditing), isEditing = _useState[0], setIsEditing = _useState[1];
  var _useControllableState = useControllableState({
    defaultValue: defaultValue || "",
    value: valueProp,
    onChange: onChangeProp
  }), value = _useControllableState[0], setValue = _useControllableState[1];
  var _useState2 = (0, import_react57.useState)(value), prevValue = _useState2[0], setPrevValue = _useState2[1];
  var inputRef = (0, import_react57.useRef)(null);
  var previewRef = (0, import_react57.useRef)(null);
  var editButtonRef = (0, import_react57.useRef)(null);
  var cancelButtonRef = (0, import_react57.useRef)(null);
  var submitButtonRef = (0, import_react57.useRef)(null);
  useFocusOnPointerDown({
    ref: inputRef,
    enabled: isEditing,
    elements: [cancelButtonRef, submitButtonRef]
  });
  var isInteractive = !isEditing && !isDisabled;
  useSafeLayoutEffect(function() {
    if (isEditing) {
      focus(inputRef.current, {
        selectTextIfInput: selectAllOnFocus
      });
    }
  }, []);
  useUpdateEffect(function() {
    if (!isEditing) {
      focus(editButtonRef.current);
      return;
    }
    focus(inputRef.current, {
      selectTextIfInput: selectAllOnFocus
    });
    onEditProp == null ? void 0 : onEditProp();
  }, [isEditing, onEditProp, selectAllOnFocus]);
  var onEdit = (0, import_react57.useCallback)(function() {
    if (isInteractive) {
      setIsEditing(true);
    }
  }, [isInteractive]);
  var onUpdatePrevValue = (0, import_react57.useCallback)(function() {
    setPrevValue(value);
  }, [value]);
  var onCancel = (0, import_react57.useCallback)(function() {
    setIsEditing(false);
    setValue(prevValue);
    onCancelProp == null ? void 0 : onCancelProp(prevValue);
  }, [onCancelProp, setValue, prevValue]);
  var onSubmit = (0, import_react57.useCallback)(function() {
    setIsEditing(false);
    setPrevValue(value);
    onSubmitProp == null ? void 0 : onSubmitProp(value);
  }, [value, onSubmitProp]);
  var onChange = (0, import_react57.useCallback)(function(event) {
    setValue(event.currentTarget.value);
  }, [setValue]);
  var onKeyDown = (0, import_react57.useCallback)(function(event) {
    var eventKey = normalizeEventKey(event);
    var keyMap = {
      Escape: onCancel,
      Enter: function Enter(event2) {
        if (!event2.shiftKey && !event2.metaKey) {
          onSubmit();
        }
      }
    };
    var action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      action(event);
    }
  }, [onCancel, onSubmit]);
  var onKeyDownWithoutSubmit = (0, import_react57.useCallback)(function(event) {
    var eventKey = normalizeEventKey(event);
    var keyMap = {
      Escape: onCancel
    };
    var action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      action(event);
    }
  }, [onCancel]);
  var isValueEmpty = isEmpty(value);
  var onBlur3 = (0, import_react57.useCallback)(function(event) {
    var relatedTarget = getRelatedTarget(event);
    var targetIsCancel = contains(cancelButtonRef.current, relatedTarget);
    var targetIsSubmit = contains(submitButtonRef.current, relatedTarget);
    var isValidBlur = !targetIsCancel && !targetIsSubmit;
    if (isValidBlur) {
      if (submitOnBlur) {
        onSubmit();
      } else {
        onCancel();
      }
    }
  }, [submitOnBlur, onSubmit, onCancel]);
  var getPreviewProps = (0, import_react57.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    var tabIndex = isInteractive && isPreviewFocusable ? 0 : void 0;
    return _extends17({}, props2, {
      ref: mergeRefs(ref, previewRef),
      children: isValueEmpty ? placeholder : value,
      hidden: isEditing,
      "aria-disabled": ariaAttr(isDisabled),
      tabIndex,
      onFocus: callAllHandlers(props2.onFocus, onEdit, onUpdatePrevValue)
    });
  }, [isDisabled, isEditing, isInteractive, isPreviewFocusable, isValueEmpty, onEdit, onUpdatePrevValue, placeholder, value]);
  var getInputProps = (0, import_react57.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends17({}, props2, {
      hidden: !isEditing,
      placeholder,
      ref: mergeRefs(ref, inputRef),
      disabled: isDisabled,
      "aria-disabled": ariaAttr(isDisabled),
      value,
      onBlur: callAllHandlers(props2.onBlur, onBlur3),
      onChange: callAllHandlers(props2.onChange, onChange),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onFocus: callAllHandlers(props2.onFocus, onUpdatePrevValue)
    });
  }, [isDisabled, isEditing, onBlur3, onChange, onKeyDown, onUpdatePrevValue, placeholder, value]);
  var getTextareaProps = (0, import_react57.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends17({}, props2, {
      hidden: !isEditing,
      placeholder,
      ref: mergeRefs(ref, inputRef),
      disabled: isDisabled,
      "aria-disabled": ariaAttr(isDisabled),
      value,
      onBlur: callAllHandlers(props2.onBlur, onBlur3),
      onChange: callAllHandlers(props2.onChange, onChange),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDownWithoutSubmit),
      onFocus: callAllHandlers(props2.onFocus, onUpdatePrevValue)
    });
  }, [isDisabled, isEditing, onBlur3, onChange, onKeyDownWithoutSubmit, onUpdatePrevValue, placeholder, value]);
  var getEditButtonProps = (0, import_react57.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends17({
      "aria-label": "Edit"
    }, props2, {
      type: "button",
      onClick: callAllHandlers(props2.onClick, onEdit),
      ref: mergeRefs(ref, editButtonRef),
      disabled: isDisabled
    });
  }, [onEdit, isDisabled]);
  var getSubmitButtonProps = (0, import_react57.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends17({}, props2, {
      "aria-label": "Submit",
      ref: mergeRefs(submitButtonRef, ref),
      type: "button",
      onClick: callAllHandlers(props2.onClick, onSubmit),
      disabled: isDisabled
    });
  }, [onSubmit, isDisabled]);
  var getCancelButtonProps = (0, import_react57.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends17({
      "aria-label": "Cancel",
      id: "cancel"
    }, props2, {
      ref: mergeRefs(cancelButtonRef, ref),
      type: "button",
      onClick: callAllHandlers(props2.onClick, onCancel),
      disabled: isDisabled
    });
  }, [onCancel, isDisabled]);
  return {
    isEditing,
    isDisabled,
    isValueEmpty,
    value,
    onEdit,
    onCancel,
    onSubmit,
    getPreviewProps,
    getInputProps,
    getTextareaProps,
    getEditButtonProps,
    getSubmitButtonProps,
    getCancelButtonProps,
    htmlProps
  };
}
var _excluded13 = ["htmlProps"];
var _createStylesContext6 = createStylesContext("Editable");
var StylesProvider7 = _createStylesContext6[0];
var useStyles7 = _createStylesContext6[1];
var useEditableStyles = useStyles7;
var _createContext8 = createContext({
  name: "EditableContext",
  errorMessage: "useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`"
});
var EditableProvider = _createContext8[0];
var useEditableContext = _createContext8[1];
var Editable2 = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("Editable", props);
  var ownProps = omitThemingProps(props);
  var _useEditable = useEditable(ownProps), htmlProps = _useEditable.htmlProps, context = _objectWithoutPropertiesLoose13(_useEditable, _excluded13);
  var isEditing = context.isEditing, onSubmit = context.onSubmit, onCancel = context.onCancel, onEdit = context.onEdit;
  var _className = cx("chakra-editable", props.className);
  var children = runIfFn(props.children, {
    isEditing,
    onSubmit,
    onCancel,
    onEdit
  });
  return React28.createElement(EditableProvider, {
    value: context
  }, React28.createElement(StylesProvider7, {
    value: styles2
  }, React28.createElement(chakra.div, _extends17({
    ref
  }, htmlProps, {
    className: _className
  }), children)));
});
if (__DEV__) {
  Editable2.displayName = "Editable";
}
var commonStyles = {
  fontSize: "inherit",
  fontWeight: "inherit",
  textAlign: "inherit",
  bg: "transparent"
};
var EditablePreview = forwardRef(function(props, ref) {
  var _useEditableContext = useEditableContext(), getPreviewProps = _useEditableContext.getPreviewProps;
  var styles2 = useStyles7();
  var previewProps = getPreviewProps(props, ref);
  var _className = cx("chakra-editable__preview", props.className);
  return React28.createElement(chakra.span, _extends17({}, previewProps, {
    __css: _extends17({
      cursor: "text",
      display: "inline-block"
    }, commonStyles, styles2.preview),
    className: _className
  }));
});
if (__DEV__) {
  EditablePreview.displayName = "EditablePreview";
}
var EditableInput = forwardRef(function(props, ref) {
  var _useEditableContext2 = useEditableContext(), getInputProps = _useEditableContext2.getInputProps;
  var styles2 = useStyles7();
  var inputProps = getInputProps(props, ref);
  var _className = cx("chakra-editable__input", props.className);
  return React28.createElement(chakra.input, _extends17({}, inputProps, {
    __css: _extends17({
      outline: 0
    }, commonStyles, styles2.input),
    className: _className
  }));
});
if (__DEV__) {
  EditableInput.displayName = "EditableInput";
}
var EditableTextarea = forwardRef(function(props, ref) {
  var _useEditableContext3 = useEditableContext(), getTextareaProps = _useEditableContext3.getTextareaProps;
  var styles2 = useStyles7();
  var textareaProps = getTextareaProps(props, ref);
  var _className = cx("chakra-editable__textarea", props.className);
  return React28.createElement(chakra.textarea, _extends17({}, textareaProps, {
    __css: _extends17({
      outline: 0
    }, commonStyles, styles2.textarea),
    className: _className
  }));
});
if (__DEV__) {
  EditableTextarea.displayName = "EditableTextarea";
}
function useEditableState() {
  var _useEditableContext4 = useEditableContext(), isEditing = _useEditableContext4.isEditing, onSubmit = _useEditableContext4.onSubmit, onCancel = _useEditableContext4.onCancel, onEdit = _useEditableContext4.onEdit, isDisabled = _useEditableContext4.isDisabled;
  return {
    isEditing,
    onSubmit,
    onCancel,
    onEdit,
    isDisabled
  };
}
function useEditableControls() {
  var _useEditableContext5 = useEditableContext(), isEditing = _useEditableContext5.isEditing, getEditButtonProps = _useEditableContext5.getEditButtonProps, getCancelButtonProps = _useEditableContext5.getCancelButtonProps, getSubmitButtonProps = _useEditableContext5.getSubmitButtonProps;
  return {
    isEditing,
    getEditButtonProps,
    getCancelButtonProps,
    getSubmitButtonProps
  };
}

// node_modules/@chakra-ui/control-box/dist/chakra-ui-control-box.esm.js
var React29 = __toESM(require_react());
function _extends18() {
  _extends18 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends18.apply(this, arguments);
}
function _objectWithoutPropertiesLoose14(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded14 = ["type", "_hover", "_invalid", "_disabled", "_focus", "_checked", "_child", "_checkedAndChild", "_checkedAndDisabled", "_checkedAndFocus", "_checkedAndHover", "children"];
var ControlBox = function ControlBox2(props) {
  var _extends210, _ref2;
  var _props$type = props.type, type = _props$type === void 0 ? "checkbox" : _props$type, _hover = props._hover, _invalid = props._invalid, _disabled = props._disabled, _focus = props._focus, _checked = props._checked, _props$_child = props._child, _child = _props$_child === void 0 ? {
    opacity: 0
  } : _props$_child, _props$_checkedAndChi = props._checkedAndChild, _checkedAndChild = _props$_checkedAndChi === void 0 ? {
    opacity: 1
  } : _props$_checkedAndChi, _checkedAndDisabled = props._checkedAndDisabled, _checkedAndFocus = props._checkedAndFocus, _checkedAndHover = props._checkedAndHover, children = props.children, rest = _objectWithoutPropertiesLoose14(props, _excluded14);
  var checkedAndDisabled = "input[type=" + type + "]:checked:disabled + &";
  var checkedAndHover = "input[type=" + type + "]:checked:hover:not(:disabled) + &";
  var checkedAndFocus = "input[type=" + type + "]:checked:focus + &";
  var disabled = "input[type=" + type + "]:disabled + &";
  var focus2 = "input[type=" + type + "]:focus + &";
  var hover2 = "input[type=" + type + "]:hover:not(:disabled):not(:checked) + &";
  var checked = "input[type=" + type + "]:checked + &, input[type=" + type + "][aria-checked=mixed] + &";
  var invalid = "input[type=" + type + "][aria-invalid=true] + &";
  var child = "& > *";
  return React29.createElement(chakra.div, _extends18({}, rest, {
    "aria-hidden": true,
    __css: (_ref2 = {
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      transitionProperty: "common",
      transitionDuration: "fast",
      flexShrink: 0
    }, _ref2[focus2] = _focus, _ref2[hover2] = _hover, _ref2[disabled] = _disabled, _ref2[invalid] = _invalid, _ref2[checkedAndDisabled] = _checkedAndDisabled, _ref2[checkedAndFocus] = _checkedAndFocus, _ref2[checkedAndHover] = _checkedAndHover, _ref2[child] = _child, _ref2[checked] = _extends18({}, _checked, (_extends210 = {}, _extends210[child] = _checkedAndChild, _extends210)), _ref2)
  }), children);
};
if (__DEV__) {
  ControlBox.displayName = "ControlBox";
}

// node_modules/@chakra-ui/input/dist/chakra-ui-input.esm.js
var React30 = __toESM(require_react());
function _extends19() {
  _extends19 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends19.apply(this, arguments);
}
function _objectWithoutPropertiesLoose15(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$33 = ["htmlSize"];
var Input2 = forwardRef(function(props, ref) {
  var htmlSize = props.htmlSize, rest = _objectWithoutPropertiesLoose15(props, _excluded$33);
  var styles2 = useMultiStyleConfig("Input", rest);
  var ownProps = omitThemingProps(rest);
  var input = useFormControl(ownProps);
  var _className = cx("chakra-input", props.className);
  return React30.createElement(chakra.input, _extends19({
    size: htmlSize
  }, input, {
    __css: styles2.field,
    ref,
    className: _className
  }));
});
if (__DEV__) {
  Input2.displayName = "Input";
}
Input2.id = "Input";
var _excluded$25 = ["children", "className"];
var _createStylesContext7 = createStylesContext("InputGroup");
var StylesProvider8 = _createStylesContext7[0];
var useStyles8 = _createStylesContext7[1];
var useInputGroupStyles = useStyles8;
var InputGroup = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("Input", props);
  var _omitThemingProps = omitThemingProps(props), children = _omitThemingProps.children, className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose15(_omitThemingProps, _excluded$25);
  var _className = cx("chakra-input__group", className);
  var groupStyles = {};
  var validChildren = getValidChildren(children);
  var input = styles2.field;
  validChildren.forEach(function(child) {
    if (!styles2)
      return;
    if (input && child.type.id === "InputLeftElement") {
      var _input$height;
      groupStyles.paddingStart = (_input$height = input.height) != null ? _input$height : input.h;
    }
    if (input && child.type.id === "InputRightElement") {
      var _input$height2;
      groupStyles.paddingEnd = (_input$height2 = input.height) != null ? _input$height2 : input.h;
    }
    if (child.type.id === "InputRightAddon") {
      groupStyles.borderEndRadius = 0;
    }
    if (child.type.id === "InputLeftAddon") {
      groupStyles.borderStartRadius = 0;
    }
  });
  var clones = validChildren.map(function(child) {
    var _child$props, _child$props2;
    var theming = filterUndefined({
      size: ((_child$props = child.props) == null ? void 0 : _child$props.size) || props.size,
      variant: ((_child$props2 = child.props) == null ? void 0 : _child$props2.variant) || props.variant
    });
    return child.type.id !== "Input" ? React30.cloneElement(child, theming) : React30.cloneElement(child, Object.assign(theming, groupStyles, child.props));
  });
  return React30.createElement(chakra.div, _extends19({
    className: _className,
    ref,
    __css: {
      width: "100%",
      display: "flex",
      position: "relative"
    }
  }, rest), React30.createElement(StylesProvider8, {
    value: styles2
  }, clones));
});
if (__DEV__) {
  InputGroup.displayName = "InputGroup";
}
var _excluded$18 = ["placement"];
var placements = {
  left: {
    marginEnd: "-1px",
    borderEndRadius: 0,
    borderEndColor: "transparent"
  },
  right: {
    marginStart: "-1px",
    borderStartRadius: 0,
    borderStartColor: "transparent"
  }
};
var StyledAddon = chakra("div", {
  baseStyle: {
    flex: "0 0 auto",
    width: "auto",
    display: "flex",
    alignItems: "center",
    whiteSpace: "nowrap"
  }
});
var InputAddon = forwardRef(function(props, ref) {
  var _placements$placement;
  var _props$placement = props.placement, placement = _props$placement === void 0 ? "left" : _props$placement, rest = _objectWithoutPropertiesLoose15(props, _excluded$18);
  var placementStyles = (_placements$placement = placements[placement]) != null ? _placements$placement : {};
  var styles2 = useInputGroupStyles();
  return React30.createElement(StyledAddon, _extends19({
    ref
  }, rest, {
    __css: _extends19({}, styles2.addon, placementStyles)
  }));
});
if (__DEV__) {
  InputAddon.displayName = "InputAddon";
}
var InputLeftAddon = forwardRef(function(props, ref) {
  return React30.createElement(InputAddon, _extends19({
    ref,
    placement: "left"
  }, props, {
    className: cx("chakra-input__left-addon", props.className)
  }));
});
if (__DEV__) {
  InputLeftAddon.displayName = "InputLeftAddon";
}
InputLeftAddon.id = "InputLeftAddon";
var InputRightAddon = forwardRef(function(props, ref) {
  return React30.createElement(InputAddon, _extends19({
    ref,
    placement: "right"
  }, props, {
    className: cx("chakra-input__right-addon", props.className)
  }));
});
if (__DEV__) {
  InputRightAddon.displayName = "InputRightAddon";
}
InputRightAddon.id = "InputRightAddon";
var _excluded15 = ["placement"];
var _excluded27 = ["className"];
var _excluded34 = ["className"];
var StyledElement = chakra("div", {
  baseStyle: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    top: "0",
    zIndex: 2
  }
});
var InputElement = forwardRef(function(props, ref) {
  var _input$height, _input$height2, _extends210;
  var _props$placement = props.placement, placement = _props$placement === void 0 ? "left" : _props$placement, rest = _objectWithoutPropertiesLoose15(props, _excluded15);
  var styles2 = useInputGroupStyles();
  var input = styles2.field;
  var attr = placement === "left" ? "insetStart" : "insetEnd";
  var elementStyles = _extends19((_extends210 = {}, _extends210[attr] = "0", _extends210.width = (_input$height = input == null ? void 0 : input.height) != null ? _input$height : input == null ? void 0 : input.h, _extends210.height = (_input$height2 = input == null ? void 0 : input.height) != null ? _input$height2 : input == null ? void 0 : input.h, _extends210.fontSize = input == null ? void 0 : input.fontSize, _extends210), styles2.element);
  return React30.createElement(StyledElement, _extends19({
    ref,
    __css: elementStyles
  }, rest));
});
InputElement.id = "InputElement";
if (__DEV__) {
  InputElement.displayName = "InputElement";
}
var InputLeftElement = forwardRef(function(props, ref) {
  var className = props.className, rest = _objectWithoutPropertiesLoose15(props, _excluded27);
  var _className = cx("chakra-input__left-element", className);
  return React30.createElement(InputElement, _extends19({
    ref,
    placement: "left",
    className: _className
  }, rest));
});
InputLeftElement.id = "InputLeftElement";
if (__DEV__) {
  InputLeftElement.displayName = "InputLeftElement";
}
var InputRightElement = forwardRef(function(props, ref) {
  var className = props.className, rest = _objectWithoutPropertiesLoose15(props, _excluded34);
  var _className = cx("chakra-input__right-element", className);
  return React30.createElement(InputElement, _extends19({
    ref,
    placement: "right",
    className: _className
  }, rest));
});
InputRightElement.id = "InputRightElement";
if (__DEV__) {
  InputRightElement.displayName = "InputRightElement";
}

// node_modules/@chakra-ui/layout/dist/chakra-ui-layout.esm.js
var React31 = __toESM(require_react());
var import_react58 = __toESM(require_react());
function _extends20() {
  _extends20 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends20.apply(this, arguments);
}
function _objectWithoutPropertiesLoose16(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$h = ["ratio", "children", "className"];
var AspectRatio = forwardRef(function(props, ref) {
  var _props$ratio = props.ratio, ratio = _props$ratio === void 0 ? 4 / 3 : _props$ratio, children = props.children, className = props.className, rest = _objectWithoutPropertiesLoose16(props, _excluded$h);
  var child = React31.Children.only(children);
  var _className = cx("chakra-aspect-ratio", className);
  return React31.createElement(chakra.div, _extends20({
    ref,
    position: "relative",
    className: _className,
    _before: {
      height: 0,
      content: '""',
      display: "block",
      paddingBottom: mapResponsive(ratio, function(r) {
        return 1 / r * 100 + "%";
      })
    },
    __css: {
      "& > *:not(style)": {
        overflow: "hidden",
        position: "absolute",
        top: "0",
        right: "0",
        bottom: "0",
        left: "0",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        width: "100%",
        height: "100%"
      },
      "& > img, & > video": {
        objectFit: "cover"
      }
    }
  }, rest), child);
});
if (__DEV__) {
  AspectRatio.displayName = "AspectRatio";
}
var _excluded$g = ["className"];
var Badge2 = forwardRef(function(props, ref) {
  var styles2 = useStyleConfig("Badge", props);
  var _omitThemingProps = omitThemingProps(props);
  _omitThemingProps.className;
  var rest = _objectWithoutPropertiesLoose16(_omitThemingProps, _excluded$g);
  return React31.createElement(chakra.span, _extends20({
    ref,
    className: cx("chakra-badge", props.className)
  }, rest, {
    __css: _extends20({
      display: "inline-block",
      whiteSpace: "nowrap",
      verticalAlign: "middle"
    }, styles2)
  }));
});
if (__DEV__) {
  Badge2.displayName = "Badge";
}
var _excluded$f = ["size", "centerContent"];
var _excluded2$5 = ["size"];
var Box = chakra("div");
if (__DEV__) {
  Box.displayName = "Box";
}
var Square = forwardRef(function(props, ref) {
  var size2 = props.size, _props$centerContent = props.centerContent, centerContent = _props$centerContent === void 0 ? true : _props$centerContent, rest = _objectWithoutPropertiesLoose16(props, _excluded$f);
  var styles2 = centerContent ? {
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  } : {};
  return React31.createElement(Box, _extends20({
    ref,
    boxSize: size2,
    __css: _extends20({}, styles2, {
      flexShrink: 0,
      flexGrow: 0
    })
  }, rest));
});
if (__DEV__) {
  Square.displayName = "Square";
}
var Circle = forwardRef(function(props, ref) {
  var size2 = props.size, rest = _objectWithoutPropertiesLoose16(props, _excluded2$5);
  return React31.createElement(Square, _extends20({
    size: size2,
    ref,
    borderRadius: "9999px"
  }, rest));
});
if (__DEV__) {
  Circle.displayName = "Circle";
}
var _excluded$e = ["axis"];
var Center = chakra("div", {
  baseStyle: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }
});
if (__DEV__) {
  Center.displayName = "Center";
}
var centerStyles = {
  horizontal: {
    insetStart: "50%",
    transform: "translateX(-50%)"
  },
  vertical: {
    top: "50%",
    transform: "translateY(-50%)"
  },
  both: {
    insetStart: "50%",
    top: "50%",
    transform: "translate(-50%, -50%)"
  }
};
var AbsoluteCenter = forwardRef(function(props, ref) {
  var _props$axis = props.axis, axis = _props$axis === void 0 ? "both" : _props$axis, rest = _objectWithoutPropertiesLoose16(props, _excluded$e);
  return React31.createElement(chakra.div, _extends20({
    ref,
    __css: centerStyles[axis]
  }, rest, {
    position: "absolute"
  }));
});
var _excluded$d = ["className"];
var Code2 = forwardRef(function(props, ref) {
  var styles2 = useStyleConfig("Code", props);
  var _omitThemingProps = omitThemingProps(props);
  _omitThemingProps.className;
  var rest = _objectWithoutPropertiesLoose16(_omitThemingProps, _excluded$d);
  return React31.createElement(chakra.code, _extends20({
    ref,
    className: cx("chakra-code", props.className)
  }, rest, {
    __css: _extends20({
      display: "inline-block"
    }, styles2)
  }));
});
if (__DEV__) {
  Code2.displayName = "Code";
}
var _excluded$c = ["className", "centerContent"];
var Container4 = forwardRef(function(props, ref) {
  var _omitThemingProps = omitThemingProps(props), className = _omitThemingProps.className, centerContent = _omitThemingProps.centerContent, rest = _objectWithoutPropertiesLoose16(_omitThemingProps, _excluded$c);
  var styles2 = useStyleConfig("Container", props);
  return React31.createElement(chakra.div, _extends20({
    ref,
    className: cx("chakra-container", className)
  }, rest, {
    __css: _extends20({}, styles2, centerContent && {
      display: "flex",
      flexDirection: "column",
      alignItems: "center"
    })
  }));
});
if (__DEV__) {
  Container4.displayName = "Container";
}
var _excluded$b = ["borderLeftWidth", "borderBottomWidth", "borderTopWidth", "borderRightWidth", "borderWidth", "borderStyle", "borderColor"];
var _excluded2$4 = ["className", "orientation", "__css"];
var Divider2 = forwardRef(function(props, ref) {
  var _useStyleConfig = useStyleConfig("Divider", props), borderLeftWidth = _useStyleConfig.borderLeftWidth, borderBottomWidth = _useStyleConfig.borderBottomWidth, borderTopWidth = _useStyleConfig.borderTopWidth, borderRightWidth = _useStyleConfig.borderRightWidth, borderWidth = _useStyleConfig.borderWidth, borderStyle = _useStyleConfig.borderStyle, borderColor = _useStyleConfig.borderColor, styles2 = _objectWithoutPropertiesLoose16(_useStyleConfig, _excluded$b);
  var _omitThemingProps = omitThemingProps(props), className = _omitThemingProps.className, _omitThemingProps$ori = _omitThemingProps.orientation, orientation = _omitThemingProps$ori === void 0 ? "horizontal" : _omitThemingProps$ori, __css = _omitThemingProps.__css, rest = _objectWithoutPropertiesLoose16(_omitThemingProps, _excluded2$4);
  var dividerStyles = {
    vertical: {
      borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || "1px",
      height: "100%"
    },
    horizontal: {
      borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || "1px",
      width: "100%"
    }
  };
  return React31.createElement(chakra.hr, _extends20({
    ref,
    "aria-orientation": orientation
  }, rest, {
    __css: _extends20({}, styles2, {
      border: "0",
      borderColor,
      borderStyle
    }, dividerStyles[orientation], __css),
    className: cx("chakra-divider", className)
  }));
});
if (__DEV__) {
  Divider2.displayName = "Divider";
}
var _excluded$a = ["direction", "align", "justify", "wrap", "basis", "grow", "shrink"];
var Flex = forwardRef(function(props, ref) {
  var direction2 = props.direction, align = props.align, justify = props.justify, wrap3 = props.wrap, basis = props.basis, grow = props.grow, shrink = props.shrink, rest = _objectWithoutPropertiesLoose16(props, _excluded$a);
  var styles2 = {
    display: "flex",
    flexDirection: direction2,
    alignItems: align,
    justifyContent: justify,
    flexWrap: wrap3,
    flexBasis: basis,
    flexGrow: grow,
    flexShrink: shrink
  };
  return React31.createElement(chakra.div, _extends20({
    ref,
    __css: styles2
  }, rest));
});
if (__DEV__) {
  Flex.displayName = "Flex";
}
var _excluded$9 = ["templateAreas", "gap", "rowGap", "columnGap", "column", "row", "autoFlow", "autoRows", "templateRows", "autoColumns", "templateColumns"];
var _excluded2$3 = ["area", "colSpan", "colStart", "colEnd", "rowEnd", "rowSpan", "rowStart"];
var Grid = forwardRef(function(props, ref) {
  var templateAreas = props.templateAreas, gap = props.gap, rowGap = props.rowGap, columnGap = props.columnGap, column = props.column, row = props.row, autoFlow = props.autoFlow, autoRows = props.autoRows, templateRows = props.templateRows, autoColumns = props.autoColumns, templateColumns = props.templateColumns, rest = _objectWithoutPropertiesLoose16(props, _excluded$9);
  var styles2 = {
    display: "grid",
    gridTemplateAreas: templateAreas,
    gridGap: gap,
    gridRowGap: rowGap,
    gridColumnGap: columnGap,
    gridAutoColumns: autoColumns,
    gridColumn: column,
    gridRow: row,
    gridAutoFlow: autoFlow,
    gridAutoRows: autoRows,
    gridTemplateRows: templateRows,
    gridTemplateColumns: templateColumns
  };
  return React31.createElement(chakra.div, _extends20({
    ref,
    __css: styles2
  }, rest));
});
if (__DEV__) {
  Grid.displayName = "Grid";
}
function spanFn(span) {
  return mapResponsive(span, function(value) {
    return value === "auto" ? "auto" : "span " + value + "/span " + value;
  });
}
var GridItem = forwardRef(function(props, ref) {
  var area = props.area, colSpan = props.colSpan, colStart = props.colStart, colEnd = props.colEnd, rowEnd = props.rowEnd, rowSpan = props.rowSpan, rowStart = props.rowStart, rest = _objectWithoutPropertiesLoose16(props, _excluded2$3);
  var styles2 = filterUndefined({
    gridArea: area,
    gridColumn: spanFn(colSpan),
    gridRow: spanFn(rowSpan),
    gridColumnStart: colStart,
    gridColumnEnd: colEnd,
    gridRowStart: rowStart,
    gridRowEnd: rowEnd
  });
  return React31.createElement(chakra.div, _extends20({
    ref,
    __css: styles2
  }, rest));
});
var _excluded$8 = ["className"];
var Heading2 = forwardRef(function(props, ref) {
  var styles2 = useStyleConfig("Heading", props);
  var _omitThemingProps = omitThemingProps(props);
  _omitThemingProps.className;
  var rest = _objectWithoutPropertiesLoose16(_omitThemingProps, _excluded$8);
  return React31.createElement(chakra.h2, _extends20({
    ref,
    className: cx("chakra-heading", props.className)
  }, rest, {
    __css: styles2
  }));
});
if (__DEV__) {
  Heading2.displayName = "Heading";
}
var escapeRegexp = function escapeRegexp2(term) {
  return term.replace(/[|\\{}()[\]^$+*?.-]/g, function(_char) {
    return "\\" + _char;
  });
};
function buildRegex(query) {
  var _query = query.map(function(text) {
    return escapeRegexp(text.trim());
  });
  return new RegExp("(" + _query.join("|") + ")", "ig");
}
function highlightWords(_ref2) {
  var text = _ref2.text, query = _ref2.query;
  var regex = buildRegex(Array.isArray(query) ? query : [query]);
  var result = text.split(regex).filter(Boolean);
  return result.map(function(str) {
    return {
      text: str,
      match: regex.test(str)
    };
  });
}
function useHighlight(props) {
  var text = props.text, query = props.query;
  return (0, import_react58.useMemo)(function() {
    return highlightWords({
      text,
      query
    });
  }, [text, query]);
}
var Mark = forwardRef(function(props, ref) {
  var styles2 = useStyleConfig("Mark", props);
  var ownProps = omitThemingProps(props);
  return import_react58.default.createElement(Box, _extends20({
    ref
  }, ownProps, {
    as: "mark",
    __css: _extends20({
      bg: "transparent",
      whiteSpace: "nowrap"
    }, styles2)
  }));
});
function Highlight(props) {
  var children = props.children, query = props.query, styles2 = props.styles;
  if (typeof children !== "string") {
    throw new Error("The children prop of Highlight must be a string");
  }
  var chunks = useHighlight({
    query,
    text: children
  });
  return import_react58.default.createElement(import_react58.default.Fragment, null, chunks.map(function(chunk, index2) {
    return chunk.match ? import_react58.default.createElement(Mark, {
      sx: styles2
    }, chunk.text) : import_react58.default.createElement(import_react58.Fragment, {
      key: index2
    }, chunk.text);
  }));
}
var _excluded$7 = ["className"];
var Kbd2 = forwardRef(function(props, ref) {
  var styles2 = useStyleConfig("Kbd", props);
  var _omitThemingProps = omitThemingProps(props), className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose16(_omitThemingProps, _excluded$7);
  return React31.createElement(chakra.kbd, _extends20({
    ref,
    className: cx("chakra-kbd", className)
  }, rest, {
    __css: _extends20({
      fontFamily: "mono"
    }, styles2)
  }));
});
if (__DEV__) {
  Kbd2.displayName = "Kbd";
}
var _excluded$6 = ["className", "isExternal"];
var Link2 = forwardRef(function(props, ref) {
  var styles2 = useStyleConfig("Link", props);
  var _omitThemingProps = omitThemingProps(props), className = _omitThemingProps.className, isExternal = _omitThemingProps.isExternal, rest = _objectWithoutPropertiesLoose16(_omitThemingProps, _excluded$6);
  return React31.createElement(chakra.a, _extends20({
    target: isExternal ? "_blank" : void 0,
    rel: isExternal ? "noopener" : void 0,
    ref,
    className: cx("chakra-link", className)
  }, rest, {
    __css: styles2
  }));
});
if (__DEV__) {
  Link2.displayName = "Link";
}
var _excluded$5 = ["isExternal", "target", "rel", "className"];
var _excluded2$2 = ["className"];
var LinkOverlay = forwardRef(function(props, ref) {
  var isExternal = props.isExternal, target = props.target, rel = props.rel, className = props.className, rest = _objectWithoutPropertiesLoose16(props, _excluded$5);
  return React31.createElement(chakra.a, _extends20({}, rest, {
    ref,
    className: cx("chakra-linkbox__overlay", className),
    rel: isExternal ? "noopener noreferrer" : rel,
    target: isExternal ? "_blank" : target,
    __css: {
      position: "static",
      "&::before": {
        content: "''",
        cursor: "inherit",
        display: "block",
        position: "absolute",
        top: 0,
        left: 0,
        zIndex: 0,
        width: "100%",
        height: "100%"
      }
    }
  }));
});
var LinkBox = forwardRef(function(props, ref) {
  var className = props.className, rest = _objectWithoutPropertiesLoose16(props, _excluded2$2);
  return React31.createElement(chakra.div, _extends20({
    ref,
    position: "relative"
  }, rest, {
    className: cx("chakra-linkbox", className),
    __css: {
      "a[href]:not(.chakra-linkbox__overlay), abbr[title]": {
        position: "relative",
        zIndex: 1
      }
    }
  }));
});
var _excluded$43 = ["children", "styleType", "stylePosition", "spacing"];
var _excluded2$13 = ["as"];
var _excluded35 = ["as"];
var _createStylesContext8 = createStylesContext("List");
var StylesProvider9 = _createStylesContext8[0];
var useStyles9 = _createStylesContext8[1];
var useListStyles = useStyles9;
var List2 = forwardRef(function(props, ref) {
  var _ref2;
  var styles2 = useMultiStyleConfig("List", props);
  var _omitThemingProps = omitThemingProps(props), children = _omitThemingProps.children, _omitThemingProps$sty = _omitThemingProps.styleType, styleType = _omitThemingProps$sty === void 0 ? "none" : _omitThemingProps$sty, stylePosition = _omitThemingProps.stylePosition, spacing2 = _omitThemingProps.spacing, rest = _objectWithoutPropertiesLoose16(_omitThemingProps, _excluded$43);
  var validChildren = getValidChildren(children);
  var selector2 = "& > *:not(style) ~ *:not(style)";
  var spacingStyle = spacing2 ? (_ref2 = {}, _ref2[selector2] = {
    mt: spacing2
  }, _ref2) : {};
  return React31.createElement(StylesProvider9, {
    value: styles2
  }, React31.createElement(chakra.ul, _extends20({
    ref,
    listStyleType: styleType,
    listStylePosition: stylePosition,
    role: "list",
    __css: _extends20({}, styles2.container, spacingStyle)
  }, rest), validChildren));
});
if (__DEV__) {
  List2.displayName = "List";
}
var OrderedList = forwardRef(function(props, ref) {
  props.as;
  var rest = _objectWithoutPropertiesLoose16(props, _excluded2$13);
  return React31.createElement(List2, _extends20({
    ref,
    as: "ol",
    styleType: "decimal",
    marginStart: "1em"
  }, rest));
});
if (__DEV__) {
  OrderedList.displayName = "OrderedList";
}
var UnorderedList = forwardRef(function(props, ref) {
  props.as;
  var rest = _objectWithoutPropertiesLoose16(props, _excluded35);
  return React31.createElement(List2, _extends20({
    ref,
    as: "ul",
    styleType: "initial",
    marginStart: "1em"
  }, rest));
});
if (__DEV__) {
  UnorderedList.displayName = "UnorderedList";
}
var ListItem = forwardRef(function(props, ref) {
  var styles2 = useStyles9();
  return React31.createElement(chakra.li, _extends20({
    ref
  }, props, {
    __css: styles2.item
  }));
});
if (__DEV__) {
  ListItem.displayName = "ListItem";
}
var ListIcon = forwardRef(function(props, ref) {
  var styles2 = useStyles9();
  return React31.createElement(Icon, _extends20({
    ref,
    role: "presentation"
  }, props, {
    __css: styles2.icon
  }));
});
if (__DEV__) {
  ListIcon.displayName = "ListIcon";
}
var _excluded$34 = ["columns", "spacingX", "spacingY", "spacing", "minChildWidth"];
var SimpleGrid = forwardRef(function(props, ref) {
  var columns = props.columns, spacingX = props.spacingX, spacingY = props.spacingY, spacing2 = props.spacing, minChildWidth = props.minChildWidth, rest = _objectWithoutPropertiesLoose16(props, _excluded$34);
  var theme2 = useTheme();
  var templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme2) : countToColumns(columns);
  return React31.createElement(Grid, _extends20({
    ref,
    gap: spacing2,
    columnGap: spacingX,
    rowGap: spacingY,
    templateColumns
  }, rest));
});
if (__DEV__) {
  SimpleGrid.displayName = "SimpleGrid";
}
function toPx(n) {
  return isNumber(n) ? n + "px" : n;
}
function widthToColumns(width, theme2) {
  return mapResponsive(width, function(value) {
    var _value = getToken("sizes", value, toPx(value))(theme2);
    return isNull(value) ? null : "repeat(auto-fit, minmax(" + _value + ", 1fr))";
  });
}
function countToColumns(count) {
  return mapResponsive(count, function(value) {
    return isNull(value) ? null : "repeat(" + value + ", minmax(0, 1fr))";
  });
}
var Spacer = chakra("div", {
  baseStyle: {
    flex: 1,
    justifySelf: "stretch",
    alignSelf: "stretch"
  }
});
if (__DEV__) {
  Spacer.displayName = "Spacer";
}
var selector = "& > *:not(style) ~ *:not(style)";
function getStackStyles(options) {
  var _ref2;
  var spacing2 = options.spacing, direction2 = options.direction;
  var directionStyles = {
    column: {
      marginTop: spacing2,
      marginEnd: 0,
      marginBottom: 0,
      marginStart: 0
    },
    row: {
      marginTop: 0,
      marginEnd: 0,
      marginBottom: 0,
      marginStart: spacing2
    },
    "column-reverse": {
      marginTop: 0,
      marginEnd: 0,
      marginBottom: spacing2,
      marginStart: 0
    },
    "row-reverse": {
      marginTop: 0,
      marginEnd: spacing2,
      marginBottom: 0,
      marginStart: 0
    }
  };
  return _ref2 = {
    flexDirection: direction2
  }, _ref2[selector] = mapResponsive(direction2, function(value) {
    return directionStyles[value];
  }), _ref2;
}
function getDividerStyles(options) {
  var spacing2 = options.spacing, direction2 = options.direction;
  var dividerStyles = {
    column: {
      my: spacing2,
      mx: 0,
      borderLeftWidth: 0,
      borderBottomWidth: "1px"
    },
    "column-reverse": {
      my: spacing2,
      mx: 0,
      borderLeftWidth: 0,
      borderBottomWidth: "1px"
    },
    row: {
      mx: spacing2,
      my: 0,
      borderLeftWidth: "1px",
      borderBottomWidth: 0
    },
    "row-reverse": {
      mx: spacing2,
      my: 0,
      borderLeftWidth: "1px",
      borderBottomWidth: 0
    }
  };
  return {
    "&": mapResponsive(direction2, function(value) {
      return dividerStyles[value];
    })
  };
}
var _excluded$26 = ["isInline", "direction", "align", "justify", "spacing", "wrap", "children", "divider", "className", "shouldWrapChildren"];
var StackDivider = function StackDivider2(props) {
  return React31.createElement(chakra.div, _extends20({
    className: "chakra-stack__divider"
  }, props, {
    __css: _extends20({}, props["__css"], {
      borderWidth: 0,
      alignSelf: "stretch",
      borderColor: "inherit",
      width: "auto",
      height: "auto"
    })
  }));
};
var StackItem = function StackItem2(props) {
  return React31.createElement(chakra.div, _extends20({
    className: "chakra-stack__item"
  }, props, {
    __css: _extends20({
      display: "inline-block",
      flex: "0 0 auto",
      minWidth: 0
    }, props["__css"])
  }));
};
var Stack = forwardRef(function(props, ref) {
  var _ref2;
  var isInline = props.isInline, directionProp = props.direction, align = props.align, justify = props.justify, _props$spacing = props.spacing, spacing2 = _props$spacing === void 0 ? "0.5rem" : _props$spacing, wrap3 = props.wrap, children = props.children, divider = props.divider, className = props.className, shouldWrapChildren = props.shouldWrapChildren, rest = _objectWithoutPropertiesLoose16(props, _excluded$26);
  var direction2 = isInline ? "row" : directionProp != null ? directionProp : "column";
  var styles2 = React31.useMemo(function() {
    return getStackStyles({
      direction: direction2,
      spacing: spacing2
    });
  }, [direction2, spacing2]);
  var dividerStyle = React31.useMemo(function() {
    return getDividerStyles({
      spacing: spacing2,
      direction: direction2
    });
  }, [spacing2, direction2]);
  var hasDivider = !!divider;
  var shouldUseChildren = !shouldWrapChildren && !hasDivider;
  var validChildren = getValidChildren(children);
  var clones = shouldUseChildren ? validChildren : validChildren.map(function(child, index2) {
    var key = typeof child.key !== "undefined" ? child.key : index2;
    var isLast = index2 + 1 === validChildren.length;
    var wrappedChild = React31.createElement(StackItem, {
      key
    }, child);
    var _child = shouldWrapChildren ? wrappedChild : child;
    if (!hasDivider)
      return _child;
    var clonedDivider = React31.cloneElement(divider, {
      __css: dividerStyle
    });
    var _divider = isLast ? null : clonedDivider;
    return React31.createElement(React31.Fragment, {
      key
    }, _child, _divider);
  });
  var _className = cx("chakra-stack", className);
  return React31.createElement(chakra.div, _extends20({
    ref,
    display: "flex",
    alignItems: align,
    justifyContent: justify,
    flexDirection: styles2.flexDirection,
    flexWrap: wrap3,
    className: _className,
    __css: hasDivider ? {} : (_ref2 = {}, _ref2[selector] = styles2[selector], _ref2)
  }, rest), clones);
});
if (__DEV__) {
  Stack.displayName = "Stack";
}
var HStack = forwardRef(function(props, ref) {
  return React31.createElement(Stack, _extends20({
    align: "center"
  }, props, {
    direction: "row",
    ref
  }));
});
if (__DEV__) {
  HStack.displayName = "HStack";
}
var VStack = forwardRef(function(props, ref) {
  return React31.createElement(Stack, _extends20({
    align: "center"
  }, props, {
    direction: "column",
    ref
  }));
});
if (__DEV__) {
  VStack.displayName = "VStack";
}
var _excluded$19 = ["className", "align", "decoration", "casing"];
var Text = forwardRef(function(props, ref) {
  var styles2 = useStyleConfig("Text", props);
  var _omitThemingProps = omitThemingProps(props);
  _omitThemingProps.className;
  _omitThemingProps.align;
  _omitThemingProps.decoration;
  _omitThemingProps.casing;
  var rest = _objectWithoutPropertiesLoose16(_omitThemingProps, _excluded$19);
  var aliasedProps = filterUndefined({
    textAlign: props.align,
    textDecoration: props.decoration,
    textTransform: props.casing
  });
  return React31.createElement(chakra.p, _extends20({
    ref,
    className: cx("chakra-text", props.className)
  }, aliasedProps, rest, {
    __css: styles2
  }));
});
if (__DEV__) {
  Text.displayName = "Text";
}
var _excluded16 = ["spacing", "spacingX", "spacingY", "children", "justify", "direction", "align", "className", "shouldWrapChildren"];
var _excluded28 = ["className"];
function px3(value) {
  return typeof value === "number" ? value + "px" : value;
}
var Wrap = forwardRef(function(props, ref) {
  var _props$spacing = props.spacing, spacing2 = _props$spacing === void 0 ? "0.5rem" : _props$spacing, spacingX = props.spacingX, spacingY = props.spacingY, children = props.children, justify = props.justify, direction2 = props.direction, align = props.align, className = props.className, shouldWrapChildren = props.shouldWrapChildren, rest = _objectWithoutPropertiesLoose16(props, _excluded16);
  var styles2 = React31.useMemo(function() {
    var _spacingX$spacingY = {
      spacingX,
      spacingY
    }, _spacingX$spacingY$sp = _spacingX$spacingY.spacingX, x = _spacingX$spacingY$sp === void 0 ? spacing2 : _spacingX$spacingY$sp, _spacingX$spacingY$sp2 = _spacingX$spacingY.spacingY, y = _spacingX$spacingY$sp2 === void 0 ? spacing2 : _spacingX$spacingY$sp2;
    return {
      "--chakra-wrap-x-spacing": function chakraWrapXSpacing(theme2) {
        return mapResponsive(x, function(value) {
          return px3(tokenToCSSVar("space", value)(theme2));
        });
      },
      "--chakra-wrap-y-spacing": function chakraWrapYSpacing(theme2) {
        return mapResponsive(y, function(value) {
          return px3(tokenToCSSVar("space", value)(theme2));
        });
      },
      "--wrap-x-spacing": "calc(var(--chakra-wrap-x-spacing) / 2)",
      "--wrap-y-spacing": "calc(var(--chakra-wrap-y-spacing) / 2)",
      display: "flex",
      flexWrap: "wrap",
      justifyContent: justify,
      alignItems: align,
      flexDirection: direction2,
      listStyleType: "none",
      padding: "0",
      margin: "calc(var(--wrap-y-spacing) * -1) calc(var(--wrap-x-spacing) * -1)",
      "& > *:not(style)": {
        margin: "var(--wrap-y-spacing) var(--wrap-x-spacing)"
      }
    };
  }, [spacing2, spacingX, spacingY, justify, align, direction2]);
  var childrenToRender = shouldWrapChildren ? React31.Children.map(children, function(child, index2) {
    return React31.createElement(WrapItem, {
      key: index2
    }, child);
  }) : children;
  return React31.createElement(chakra.div, _extends20({
    ref,
    className: cx("chakra-wrap", className),
    overflow: "hidden"
  }, rest), React31.createElement(chakra.ul, {
    className: "chakra-wrap__list",
    __css: styles2
  }, childrenToRender));
});
if (__DEV__) {
  Wrap.displayName = "Wrap";
}
var WrapItem = forwardRef(function(props, ref) {
  var className = props.className, rest = _objectWithoutPropertiesLoose16(props, _excluded28);
  return React31.createElement(chakra.li, _extends20({
    ref,
    __css: {
      display: "flex",
      alignItems: "flex-start"
    },
    className: cx("chakra-wrap__listitem", className)
  }, rest));
});
if (__DEV__) {
  WrapItem.displayName = "WrapItem";
}

// node_modules/@chakra-ui/media-query/dist/chakra-ui-media-query.esm.js
var React32 = __toESM(require_react());
var import_react59 = __toESM(require_react());
function _extends21() {
  _extends21 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends21.apply(this, arguments);
}
function useMediaQuery(query, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$ssr = _options.ssr, ssr = _options$ssr === void 0 ? true : _options$ssr, fallback = _options.fallback;
  var env3 = useEnvironment();
  var queries = Array.isArray(query) ? query : [query];
  var fallbackValues = Array.isArray(fallback) ? fallback : [fallback];
  fallbackValues = fallbackValues.filter(function(v) {
    return v != null;
  });
  var _useState = (0, import_react59.useState)(function() {
    return queries.map(function(query2, index2) {
      return {
        media: query2,
        matches: ssr ? !!fallbackValues[index2] : env3.window.matchMedia(query2).matches
      };
    });
  }), value = _useState[0], setValue = _useState[1];
  (0, import_react59.useEffect)(function() {
    setValue(queries.map(function(query2) {
      return {
        media: query2,
        matches: env3.window.matchMedia(query2).matches
      };
    }));
    var mql = queries.map(function(query2) {
      return env3.window.matchMedia(query2);
    });
    var handler = function handler2(evt) {
      setValue(function(prev) {
        return prev.slice().map(function(item) {
          if (item.media === evt.media)
            return _extends21({}, item, {
              matches: evt.matches
            });
          return item;
        });
      });
    };
    mql.forEach(function(mql2) {
      if (isFunction(mql2.addListener))
        mql2.addListener(handler);
      else
        mql2.addEventListener("change", handler);
    });
    return function() {
      mql.forEach(function(mql2) {
        if (isFunction(mql2.removeListener))
          mql2.removeListener(handler);
        else
          mql2.removeEventListener("change", handler);
      });
    };
  }, [env3.window]);
  return value.map(function(item) {
    return item.matches;
  });
}
var Visibility = function Visibility2(props) {
  var breakpoint = props.breakpoint, hide2 = props.hide, children = props.children, ssr = props.ssr;
  var _useMediaQuery = useMediaQuery(breakpoint, {
    ssr
  }), show = _useMediaQuery[0];
  var isVisible = hide2 ? !show : show;
  var rendered = isVisible ? children : null;
  return rendered;
};
var Hide = function Hide2(props) {
  var children = props.children, ssr = props.ssr;
  var query = useQuery(props);
  return React32.createElement(Visibility, {
    breakpoint: query,
    hide: true,
    ssr
  }, children);
};
if (__DEV__) {
  Hide.displayName = "Hide";
}
var Show = function Show2(props) {
  var children = props.children, ssr = props.ssr;
  var query = useQuery(props);
  return React32.createElement(Visibility, {
    breakpoint: query,
    ssr
  }, children);
};
if (__DEV__) {
  Show.displayName = "Show";
}
var getBreakpoint = function getBreakpoint2(theme2, value) {
  return memoizedGet(theme2, "breakpoints." + value, value);
};
function useQuery(props) {
  var _props$breakpoint = props.breakpoint, breakpoint = _props$breakpoint === void 0 ? "" : _props$breakpoint, below = props.below, above = props.above;
  var theme2 = useTheme();
  var bpBelow = getBreakpoint(theme2, below);
  var bpAbove = getBreakpoint(theme2, above);
  var query = breakpoint;
  if (bpBelow) {
    query = "(max-width: " + bpBelow + ")";
  } else if (bpAbove) {
    query = "(min-width: " + bpAbove + ")";
  }
  return query;
}
function usePrefersReducedMotion(options) {
  var _useMediaQuery = useMediaQuery("(prefers-reduced-motion: reduce)", options), prefersReducedMotion2 = _useMediaQuery[0];
  return prefersReducedMotion2;
}
function useColorModePreference(options) {
  var _useMediaQuery2 = useMediaQuery(["(prefers-color-scheme: light)", "(prefers-color-scheme: dark)"], options), isLight = _useMediaQuery2[0], isDark3 = _useMediaQuery2[1];
  if (isLight)
    return "light";
  if (isDark3)
    return "dark";
  return void 0;
}
function useBreakpoint(arg) {
  var _breakpoints$index$br, _breakpoints$index;
  var opts = isObject(arg) ? arg : {
    fallback: arg != null ? arg : "base"
  };
  var theme2 = useTheme();
  var breakpoints3 = theme2.__breakpoints.details.map(function(_ref2) {
    var minMaxQuery = _ref2.minMaxQuery, breakpoint = _ref2.breakpoint;
    return {
      breakpoint,
      query: minMaxQuery.replace("@media screen and ", "")
    };
  });
  var fallback = breakpoints3.map(function(bp) {
    return bp.breakpoint === opts.fallback;
  });
  var values = useMediaQuery(breakpoints3.map(function(bp) {
    return bp.query;
  }), {
    fallback,
    ssr: opts.ssr
  });
  var index2 = values.findIndex(function(value) {
    return value == true;
  });
  return (_breakpoints$index$br = (_breakpoints$index = breakpoints3[index2]) == null ? void 0 : _breakpoints$index.breakpoint) != null ? _breakpoints$index$br : opts.fallback;
}
function getClosestValue(values, breakpoint, breakpoints$1) {
  if (breakpoints$1 === void 0) {
    breakpoints$1 = breakpoints;
  }
  var index2 = Object.keys(values).indexOf(breakpoint);
  if (index2 !== -1) {
    return values[breakpoint];
  }
  var stopIndex = breakpoints$1.indexOf(breakpoint);
  while (stopIndex >= 0) {
    var key = breakpoints$1[stopIndex];
    if (values.hasOwnProperty(key)) {
      index2 = stopIndex;
      break;
    }
    stopIndex -= 1;
  }
  if (index2 !== -1) {
    var _key = breakpoints$1[index2];
    return values[_key];
  }
  return void 0;
}
function useBreakpointValue(values, arg) {
  var _theme$__breakpoints;
  var opts = isObject(arg) ? arg : {
    fallback: arg != null ? arg : "base"
  };
  var breakpoint = useBreakpoint(opts);
  var theme2 = useTheme();
  if (!breakpoint)
    return;
  var breakpoints3 = Array.from(((_theme$__breakpoints = theme2.__breakpoints) == null ? void 0 : _theme$__breakpoints.keys) || []);
  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints3)).map(function(_ref2) {
    var key = _ref2[0], value = _ref2[1];
    return [key, value];
  })) : values;
  return getClosestValue(obj, breakpoint, breakpoints3);
}

// node_modules/@chakra-ui/table/dist/chakra-ui-table.esm.js
var React33 = __toESM(require_react());
function _extends22() {
  _extends22 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends22.apply(this, arguments);
}
function _objectWithoutPropertiesLoose17(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded17 = ["overflow", "overflowX", "className"];
var _excluded29 = ["className"];
var _excluded36 = ["placement"];
var _excluded43 = ["isNumeric"];
var _excluded52 = ["isNumeric"];
var _createStylesContext9 = createStylesContext("Table");
var StylesProvider10 = _createStylesContext9[0];
var useStyles10 = _createStylesContext9[1];
var useTableStyles = useStyles10;
var TableContainer = forwardRef(function(props, ref) {
  var _ref2;
  var overflow = props.overflow, overflowX = props.overflowX, className = props.className, rest = _objectWithoutPropertiesLoose17(props, _excluded17);
  return React33.createElement(chakra.div, _extends22({
    ref,
    className: cx("chakra-table__container", className)
  }, rest, {
    __css: {
      display: "block",
      whiteSpace: "nowrap",
      WebkitOverflowScrolling: "touch",
      overflowX: (_ref2 = overflow != null ? overflow : overflowX) != null ? _ref2 : "auto",
      overflowY: "hidden",
      maxWidth: "100%"
    }
  }));
});
var Table2 = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("Table", props);
  var _omitThemingProps = omitThemingProps(props), className = _omitThemingProps.className, tableProps = _objectWithoutPropertiesLoose17(_omitThemingProps, _excluded29);
  return React33.createElement(StylesProvider10, {
    value: styles2
  }, React33.createElement(chakra.table, _extends22({
    role: "table",
    ref,
    __css: styles2.table,
    className: cx("chakra-table", className)
  }, tableProps)));
});
if (__DEV__) {
  Table2.displayName = "Table";
}
var TableCaption = forwardRef(function(props, ref) {
  var _props$placement = props.placement, placement = _props$placement === void 0 ? "bottom" : _props$placement, rest = _objectWithoutPropertiesLoose17(props, _excluded36);
  var styles2 = useStyles10();
  return React33.createElement(chakra.caption, _extends22({}, rest, {
    ref,
    __css: _extends22({}, styles2.caption, {
      captionSide: placement
    })
  }));
});
if (__DEV__) {
  TableCaption.displayName = "TableCaption";
}
var Thead = forwardRef(function(props, ref) {
  var styles2 = useStyles10();
  return React33.createElement(chakra.thead, _extends22({}, props, {
    ref,
    __css: styles2.thead
  }));
});
var Tbody = forwardRef(function(props, ref) {
  var styles2 = useStyles10();
  return React33.createElement(chakra.tbody, _extends22({}, props, {
    ref,
    __css: styles2.tbody
  }));
});
var Tfoot = forwardRef(function(props, ref) {
  var styles2 = useStyles10();
  return React33.createElement(chakra.tfoot, _extends22({}, props, {
    ref,
    __css: styles2.tfoot
  }));
});
var Th = forwardRef(function(_ref2, ref) {
  var isNumeric3 = _ref2.isNumeric, rest = _objectWithoutPropertiesLoose17(_ref2, _excluded43);
  var styles2 = useStyles10();
  return React33.createElement(chakra.th, _extends22({}, rest, {
    ref,
    __css: styles2.th,
    "data-is-numeric": isNumeric3
  }));
});
var Tr = forwardRef(function(props, ref) {
  var styles2 = useStyles10();
  return React33.createElement(chakra.tr, _extends22({
    role: "row"
  }, props, {
    ref,
    __css: styles2.tr
  }));
});
var Td = forwardRef(function(_ref3, ref) {
  var isNumeric3 = _ref3.isNumeric, rest = _objectWithoutPropertiesLoose17(_ref3, _excluded52);
  var styles2 = useStyles10();
  return React33.createElement(chakra.td, _extends22({
    role: "gridcell"
  }, rest, {
    ref,
    __css: styles2.td,
    "data-is-numeric": isNumeric3
  }));
});

// node_modules/@chakra-ui/menu/dist/chakra-ui-menu.esm.js
var React35 = __toESM(require_react());

// node_modules/@chakra-ui/clickable/dist/chakra-ui-clickable.esm.js
var React34 = __toESM(require_react());
function _extends23() {
  _extends23 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends23.apply(this, arguments);
}
function _objectWithoutPropertiesLoose18(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useEventListeners() {
  var listeners = React34.useRef(/* @__PURE__ */ new Map());
  var currentListeners = listeners.current;
  var add3 = React34.useCallback(function(el, type, listener, options) {
    listeners.current.set(listener, {
      type,
      el,
      options
    });
    el.addEventListener(type, listener, options);
  }, []);
  var remove2 = React34.useCallback(function(el, type, listener, options) {
    el.removeEventListener(type, listener, options);
    listeners.current["delete"](listener);
  }, []);
  React34.useEffect(function() {
    return function() {
      currentListeners.forEach(function(value, key) {
        remove2(value.el, value.type, key, value.options);
      });
    };
  }, [remove2, currentListeners]);
  return {
    add: add3,
    remove: remove2
  };
}
var _excluded18 = ["ref", "isDisabled", "isFocusable", "clickOnEnter", "clickOnSpace", "onMouseDown", "onMouseUp", "onClick", "onKeyDown", "onKeyUp", "tabIndex", "onMouseOver", "onMouseLeave"];
function isValidElement3(event) {
  var element = event.target;
  var tagName = element.tagName, isContentEditable = element.isContentEditable;
  return tagName !== "INPUT" && tagName !== "TEXTAREA" && isContentEditable !== true;
}
function useClickable(props) {
  if (props === void 0) {
    props = {};
  }
  var _props = props, htmlRef = _props.ref, isDisabled = _props.isDisabled, isFocusable = _props.isFocusable, _props$clickOnEnter = _props.clickOnEnter, clickOnEnter = _props$clickOnEnter === void 0 ? true : _props$clickOnEnter, _props$clickOnSpace = _props.clickOnSpace, clickOnSpace = _props$clickOnSpace === void 0 ? true : _props$clickOnSpace, onMouseDown = _props.onMouseDown, onMouseUp = _props.onMouseUp, onClick = _props.onClick, onKeyDown = _props.onKeyDown, onKeyUp = _props.onKeyUp, tabIndexProp = _props.tabIndex, onMouseOver = _props.onMouseOver, onMouseLeave = _props.onMouseLeave, htmlProps = _objectWithoutPropertiesLoose18(_props, _excluded18);
  var _React$useState = React34.useState(true), isButton = _React$useState[0], setIsButton = _React$useState[1];
  var _React$useState2 = React34.useState(false), isPressed = _React$useState2[0], setIsPressed = _React$useState2[1];
  var listeners = useEventListeners();
  var refCallback = function refCallback2(node2) {
    if (!node2)
      return;
    if (node2.tagName !== "BUTTON") {
      setIsButton(false);
    }
  };
  var tabIndex = isButton ? tabIndexProp : tabIndexProp || 0;
  var trulyDisabled = isDisabled && !isFocusable;
  var handleClick = React34.useCallback(function(event) {
    if (isDisabled) {
      event.stopPropagation();
      event.preventDefault();
      return;
    }
    var self = event.currentTarget;
    self.focus();
    onClick == null ? void 0 : onClick(event);
  }, [isDisabled, onClick]);
  var onDocumentKeyUp = React34.useCallback(function(e) {
    if (isPressed && isValidElement3(e)) {
      e.preventDefault();
      e.stopPropagation();
      setIsPressed(false);
      listeners.remove(document, "keyup", onDocumentKeyUp, false);
    }
  }, [isPressed, listeners]);
  var handleKeyDown = React34.useCallback(function(event) {
    onKeyDown == null ? void 0 : onKeyDown(event);
    if (isDisabled || event.defaultPrevented || event.metaKey) {
      return;
    }
    if (!isValidElement3(event.nativeEvent) || isButton)
      return;
    var shouldClickOnEnter = clickOnEnter && event.key === "Enter";
    var shouldClickOnSpace = clickOnSpace && event.key === " ";
    if (shouldClickOnSpace) {
      event.preventDefault();
      setIsPressed(true);
    }
    if (shouldClickOnEnter) {
      event.preventDefault();
      var self = event.currentTarget;
      self.click();
    }
    listeners.add(document, "keyup", onDocumentKeyUp, false);
  }, [isDisabled, isButton, onKeyDown, clickOnEnter, clickOnSpace, listeners, onDocumentKeyUp]);
  var handleKeyUp = React34.useCallback(function(event) {
    onKeyUp == null ? void 0 : onKeyUp(event);
    if (isDisabled || event.defaultPrevented || event.metaKey)
      return;
    if (!isValidElement3(event.nativeEvent) || isButton)
      return;
    var shouldClickOnSpace = clickOnSpace && event.key === " ";
    if (shouldClickOnSpace) {
      event.preventDefault();
      setIsPressed(false);
      var self = event.currentTarget;
      self.click();
    }
  }, [clickOnSpace, isButton, isDisabled, onKeyUp]);
  var onDocumentMouseUp = React34.useCallback(function(event) {
    if (event.button !== 0)
      return;
    setIsPressed(false);
    listeners.remove(document, "mouseup", onDocumentMouseUp, false);
  }, [listeners]);
  var handleMouseDown = React34.useCallback(function(event) {
    if (isRightClick(event))
      return;
    if (isDisabled) {
      event.stopPropagation();
      event.preventDefault();
      return;
    }
    if (!isButton) {
      setIsPressed(true);
    }
    var target = event.currentTarget;
    target.focus({
      preventScroll: true
    });
    listeners.add(document, "mouseup", onDocumentMouseUp, false);
    onMouseDown == null ? void 0 : onMouseDown(event);
  }, [isDisabled, isButton, onMouseDown, listeners, onDocumentMouseUp]);
  var handleMouseUp = React34.useCallback(function(event) {
    if (isRightClick(event))
      return;
    if (!isButton) {
      setIsPressed(false);
    }
    onMouseUp == null ? void 0 : onMouseUp(event);
  }, [onMouseUp, isButton]);
  var handleMouseOver = React34.useCallback(function(event) {
    if (isDisabled) {
      event.preventDefault();
      return;
    }
    onMouseOver == null ? void 0 : onMouseOver(event);
  }, [isDisabled, onMouseOver]);
  var handleMouseLeave = React34.useCallback(function(event) {
    if (isPressed) {
      event.preventDefault();
      setIsPressed(false);
    }
    onMouseLeave == null ? void 0 : onMouseLeave(event);
  }, [isPressed, onMouseLeave]);
  var ref = mergeRefs(htmlRef, refCallback);
  if (isButton) {
    return _extends23({}, htmlProps, {
      ref,
      type: "button",
      "aria-disabled": trulyDisabled ? void 0 : isDisabled,
      disabled: trulyDisabled,
      onClick: handleClick,
      onMouseDown,
      onMouseUp,
      onKeyUp,
      onKeyDown,
      onMouseOver,
      onMouseLeave
    });
  }
  return _extends23({}, htmlProps, {
    ref,
    role: "button",
    "data-active": dataAttr(isPressed),
    "aria-disabled": isDisabled ? "true" : void 0,
    tabIndex: trulyDisabled ? void 0 : tabIndex,
    onClick: handleClick,
    onMouseDown: handleMouseDown,
    onMouseUp: handleMouseUp,
    onKeyUp: handleKeyUp,
    onKeyDown: handleKeyDown,
    onMouseOver: handleMouseOver,
    onMouseLeave: handleMouseLeave
  });
}

// node_modules/@chakra-ui/hooks/use-animation-state/dist/chakra-ui-hooks-use-animation-state.esm.js
var import_react60 = __toESM(require_react());

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto2 = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements2 = [].concat(basePlacements, [auto2]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node2) {
  if (node2 == null) {
    return window;
  }
  if (node2.toString() !== "[object Window]") {
    var ownerDocument = node2.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node2;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement3(node2) {
  var OwnElement = getWindow(node2).Element;
  return node2 instanceof OwnElement || node2 instanceof Element;
}
function isHTMLElement2(node2) {
  var OwnElement = getWindow(node2).HTMLElement;
  return node2 instanceof OwnElement || node2 instanceof HTMLElement;
}
function isShadowRoot(node2) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node2).ShadowRoot;
  return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref2) {
  var state = _ref2.state;
  Object.keys(state.elements).forEach(function(name) {
    var style2 = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement2(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style2);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect2(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style2 = styleProperties.reduce(function(style3, property) {
        style3[property] = "";
        return style3;
      }, {});
      if (!isHTMLElement2(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style2);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect: effect2,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  var rect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (isHTMLElement2(element) && includeScale) {
    var offsetHeight = element.offsetHeight;
    var offsetWidth = element.offsetWidth;
    if (offsetWidth > 0) {
      scaleX = round(rect.width) / offsetWidth || 1;
    }
    if (offsetHeight > 0) {
      scaleY = round(rect.height) / offsetHeight || 1;
    }
  }
  return {
    width: rect.width / scaleX,
    height: rect.height / scaleY,
    top: rect.top / scaleY,
    right: rect.right / scaleX,
    bottom: rect.bottom / scaleY,
    left: rect.left / scaleX,
    x: rect.left / scaleX,
    y: rect.top / scaleY
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains2(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle4(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement3(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement2(element) || getComputedStyle4(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
  var isIE = navigator.userAgent.indexOf("Trident") !== -1;
  if (isIE && isHTMLElement2(element)) {
    var elementCss = getComputedStyle4(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement2(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css2 = getComputedStyle4(currentNode);
    if (css2.transform !== "none" || css2.perspective !== "none" || css2.contain === "paint" || ["transform", "perspective"].indexOf(css2.willChange) !== -1 || isFirefox && css2.willChange === "filter" || isFirefox && css2.filter && css2.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle4(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle4(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref2) {
  var _state$modifiersData$;
  var state = _ref2.state, name = _ref2.name, options = _ref2.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect3(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement2(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains2(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect3,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref2) {
  var x = _ref2.x, y = _ref2.y;
  var win2 = window;
  var dpr = win2.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win2 = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle4(offsetParent).position !== "static" && position2 === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win2 && win2.visualViewport ? win2.visualViewport.height : offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win2 && win2.visualViewport ? win2.visualViewport.width : offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles2 = Object.assign({
    position: position2
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles2, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win2.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles2, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty2 = getComputedStyle4(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty2.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles2 = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles2, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles2, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect4(_ref2) {
  var state = _ref2.state, instance = _ref2.instance, options = _ref2.options;
  var _options$scroll = options.scroll, scroll3 = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize2 = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll3) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize2) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll3) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize2) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect4,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node2) {
  var win2 = getWindow(node2);
  var scrollLeft = win2.pageXOffset;
  var scrollTop = win2.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element) {
  var win2 = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win2.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle4(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle4(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node2) {
  if (["html", "body", "#document"].indexOf(getNodeName(node2)) >= 0) {
    return node2.ownerDocument.body;
  }
  if (isHTMLElement2(node2) && isScrollParent(node2)) {
    return node2;
  }
  return getScrollParent(getParentNode(node2));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list2) {
  var _element$ownerDocumen;
  if (list2 === void 0) {
    list2 = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win2 = getWindow(scrollParent);
  var target = isBody ? [win2].concat(win2.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list2.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element) {
  var rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement3(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle4(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement2(element) ? getOffsetParent(element) : element;
  if (!isElement3(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement3(clippingParent) && contains2(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref2) {
  var reference2 = _ref2.reference, element = _ref2.element, placement = _ref2.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement3(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply2 = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply2;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements2 : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements3 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements3.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements3;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a2, b2) {
    return overflows[a2] - overflows[b2];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto2) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements3 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto2 ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements3[0];
  for (var i = 0; i < placements3.length; i++) {
    var placement = placements3[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements3.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref2) {
  var state = _ref2.state, name = _ref2.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref2 = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref2[0], distance2 = _ref2[1];
  skidding = skidding || 0;
  distance2 = (distance2 || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance2,
    y: skidding
  } : {
    x: skidding,
    y: distance2
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements2.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref2) {
  var state = _ref2.state, name = _ref2.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node2) {
  if (node2 === getWindow(node2) || !isHTMLElement2(node2)) {
    return getWindowScroll(node2);
  } else {
    return getHTMLElementScroll(node2);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement2(offsetParent);
  var offsetParentIsScaled = isHTMLElement2(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
  var scroll3 = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll3 = getNodeScroll(offsetParent);
    }
    if (isHTMLElement2(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll3.scrollLeft - offsets.x,
    y: rect.top + scroll3.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order3(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order3(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn6) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn6());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/format.js
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c2) {
    return p.replace(/%s/, c2);
  }, str);
}

// node_modules/@popperjs/core/lib/utils/validateModifiers.js
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index2, self) {
      return self.indexOf(value) === index2;
    }).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
          break;
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (modifier.effect != null && typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
            return '"' + s + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

// node_modules/@popperjs/core/lib/utils/uniqueBy.js
function uniqueBy(arr, fn6) {
  var identifiers = /* @__PURE__ */ new Set();
  return arr.filter(function(item) {
    var identifier = fn6(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper4(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement3(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m2) {
          return m2.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref2) {
            var name = _ref2.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto2) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle4(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index2 = 0; index2 < state.orderedModifiers.length; index2++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index2 = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index2], fn6 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn6 === "function") {
            state = fn6({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect8 = _ref3.effect;
        if (typeof effect8 === "function") {
          var cleanupFn = effect8({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn6) {
        return fn6();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var createPopper = popperGenerator();

// node_modules/@popperjs/core/lib/popper-lite.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];
var createPopper2 = popperGenerator({
  defaultModifiers
});

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper3 = popperGenerator({
  defaultModifiers: defaultModifiers2
});

// node_modules/@chakra-ui/popper/dist/chakra-ui-popper.esm.js
var import_react61 = __toESM(require_react());
function _objectWithoutPropertiesLoose19(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends24() {
  _extends24 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends24.apply(this, arguments);
}
var toVar2 = function toVar3(value, fallback) {
  return {
    "var": value,
    varRef: fallback ? "var(" + value + ", " + fallback + ")" : "var(" + value + ")"
  };
};
var cssVars = {
  arrowShadowColor: toVar2("--popper-arrow-shadow-color"),
  arrowSize: toVar2("--popper-arrow-size", "8px"),
  arrowSizeHalf: toVar2("--popper-arrow-size-half"),
  arrowBg: toVar2("--popper-arrow-bg"),
  transformOrigin: toVar2("--popper-transform-origin"),
  arrowOffset: toVar2("--popper-arrow-offset")
};
function getBoxShadow(placement) {
  if (placement.includes("top"))
    return "1px 1px 1px 0 var(--popper-arrow-shadow-color)";
  if (placement.includes("bottom"))
    return "-1px -1px 1px 0 var(--popper-arrow-shadow-color)";
  if (placement.includes("right"))
    return "-1px 1px 1px 0 var(--popper-arrow-shadow-color)";
  if (placement.includes("left"))
    return "1px -1px 1px 0 var(--popper-arrow-shadow-color)";
}
var transforms2 = {
  top: "bottom center",
  "top-start": "bottom left",
  "top-end": "bottom right",
  bottom: "top center",
  "bottom-start": "top left",
  "bottom-end": "top right",
  left: "right center",
  "left-start": "right top",
  "left-end": "right bottom",
  right: "left center",
  "right-start": "left top",
  "right-end": "left bottom"
};
var toTransformOrigin = function toTransformOrigin2(placement) {
  return transforms2[placement];
};
var defaultEventListeners = {
  scroll: true,
  resize: true
};
function getEventListenerOptions(value) {
  var eventListeners;
  if (typeof value === "object") {
    eventListeners = {
      enabled: true,
      options: _extends24({}, defaultEventListeners, value)
    };
  } else {
    eventListeners = {
      enabled: value,
      options: defaultEventListeners
    };
  }
  return eventListeners;
}
var matchWidth = {
  name: "matchWidth",
  enabled: true,
  phase: "beforeWrite",
  requires: ["computeStyles"],
  fn: function fn2(_ref2) {
    var state = _ref2.state;
    state.styles.popper.width = state.rects.reference.width + "px";
  },
  effect: function effect5(_ref2) {
    var state = _ref2.state;
    return function() {
      var reference2 = state.elements.reference;
      state.elements.popper.style.width = reference2.offsetWidth + "px";
    };
  }
};
var transformOrigin = {
  name: "transformOrigin",
  enabled: true,
  phase: "write",
  fn: function fn3(_ref3) {
    var state = _ref3.state;
    setTransformOrigin(state);
  },
  effect: function effect6(_ref4) {
    var state = _ref4.state;
    return function() {
      setTransformOrigin(state);
    };
  }
};
var setTransformOrigin = function setTransformOrigin2(state) {
  state.elements.popper.style.setProperty(cssVars.transformOrigin["var"], toTransformOrigin(state.placement));
};
var positionArrow = {
  name: "positionArrow",
  enabled: true,
  phase: "afterWrite",
  fn: function fn4(_ref5) {
    var state = _ref5.state;
    setArrowStyles(state);
  }
};
var setArrowStyles = function setArrowStyles2(state) {
  var _state$elements;
  if (!state.placement)
    return;
  var overrides = getArrowStyle$1(state.placement);
  if ((_state$elements = state.elements) != null && _state$elements.arrow && overrides) {
    var _Object$assign, _vars;
    Object.assign(state.elements.arrow.style, (_Object$assign = {}, _Object$assign[overrides.property] = overrides.value, _Object$assign.width = cssVars.arrowSize.varRef, _Object$assign.height = cssVars.arrowSize.varRef, _Object$assign.zIndex = -1, _Object$assign));
    var vars = (_vars = {}, _vars[cssVars.arrowSizeHalf["var"]] = "calc(" + cssVars.arrowSize.varRef + " / 2)", _vars[cssVars.arrowOffset["var"]] = "calc(" + cssVars.arrowSizeHalf.varRef + " * -1)", _vars);
    for (var property in vars) {
      state.elements.arrow.style.setProperty(property, vars[property]);
    }
  }
};
var getArrowStyle$1 = function getArrowStyle(placement) {
  if (placement.startsWith("top")) {
    return {
      property: "bottom",
      value: cssVars.arrowOffset.varRef
    };
  }
  if (placement.startsWith("bottom")) {
    return {
      property: "top",
      value: cssVars.arrowOffset.varRef
    };
  }
  if (placement.startsWith("left")) {
    return {
      property: "right",
      value: cssVars.arrowOffset.varRef
    };
  }
  if (placement.startsWith("right")) {
    return {
      property: "left",
      value: cssVars.arrowOffset.varRef
    };
  }
};
var innerArrow = {
  name: "innerArrow",
  enabled: true,
  phase: "main",
  requires: ["arrow"],
  fn: function fn5(_ref6) {
    var state = _ref6.state;
    setInnerArrowStyles(state);
  },
  effect: function effect7(_ref7) {
    var state = _ref7.state;
    return function() {
      setInnerArrowStyles(state);
    };
  }
};
var setInnerArrowStyles = function setInnerArrowStyles2(state) {
  if (!state.elements.arrow)
    return;
  var inner = state.elements.arrow.querySelector("[data-popper-arrow-inner]");
  if (!inner)
    return;
  Object.assign(inner.style, {
    transform: "rotate(45deg)",
    background: cssVars.arrowBg.varRef,
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    position: "absolute",
    zIndex: "inherit",
    boxShadow: getBoxShadow(state.placement)
  });
};
var logicals = {
  "start-start": {
    ltr: "left-start",
    rtl: "right-start"
  },
  "start-end": {
    ltr: "left-end",
    rtl: "right-end"
  },
  "end-start": {
    ltr: "right-start",
    rtl: "left-start"
  },
  "end-end": {
    ltr: "right-end",
    rtl: "left-end"
  },
  start: {
    ltr: "left",
    rtl: "right"
  },
  end: {
    ltr: "right",
    rtl: "left"
  }
};
var opposites = {
  "auto-start": "auto-end",
  "auto-end": "auto-start",
  "top-start": "top-end",
  "top-end": "top-start",
  "bottom-start": "bottom-end",
  "bottom-end": "bottom-start"
};
function getPopperPlacement(placement, dir) {
  var _placement, _placement2;
  if (dir === void 0) {
    dir = "ltr";
  }
  var value = ((_placement = logicals[placement]) == null ? void 0 : _placement[dir]) || placement;
  if (dir === "ltr")
    return value;
  return (_placement2 = opposites[placement]) != null ? _placement2 : value;
}
var _excluded19 = ["size", "shadowColor", "bg", "style"];
function usePopper(props) {
  if (props === void 0) {
    props = {};
  }
  var _props = props, _props$enabled = _props.enabled, enabled = _props$enabled === void 0 ? true : _props$enabled, modifiers = _props.modifiers, _props$placement = _props.placement, placementProp = _props$placement === void 0 ? "bottom" : _props$placement, _props$strategy = _props.strategy, strategy = _props$strategy === void 0 ? "absolute" : _props$strategy, _props$arrowPadding = _props.arrowPadding, arrowPadding = _props$arrowPadding === void 0 ? 8 : _props$arrowPadding, _props$eventListeners = _props.eventListeners, eventListeners = _props$eventListeners === void 0 ? true : _props$eventListeners, offset2 = _props.offset, _props$gutter = _props.gutter, gutter = _props$gutter === void 0 ? 8 : _props$gutter, _props$flip = _props.flip, flip2 = _props$flip === void 0 ? true : _props$flip, _props$boundary = _props.boundary, boundary = _props$boundary === void 0 ? "clippingParents" : _props$boundary, _props$preventOverflo = _props.preventOverflow, preventOverflow2 = _props$preventOverflo === void 0 ? true : _props$preventOverflo, matchWidth$1 = _props.matchWidth, _props$direction = _props.direction, direction2 = _props$direction === void 0 ? "ltr" : _props$direction;
  var reference2 = (0, import_react61.useRef)(null);
  var popper2 = (0, import_react61.useRef)(null);
  var instance = (0, import_react61.useRef)(null);
  var placement = getPopperPlacement(placementProp, direction2);
  var cleanup = (0, import_react61.useRef)(function() {
  });
  var setupPopper = (0, import_react61.useCallback)(function() {
    if (!enabled || !reference2.current || !popper2.current)
      return;
    cleanup.current == null ? void 0 : cleanup.current();
    instance.current = createPopper3(reference2.current, popper2.current, {
      placement,
      modifiers: [innerArrow, positionArrow, transformOrigin, _extends24({}, matchWidth, {
        enabled: !!matchWidth$1
      }), _extends24({
        name: "eventListeners"
      }, getEventListenerOptions(eventListeners)), {
        name: "arrow",
        options: {
          padding: arrowPadding
        }
      }, {
        name: "offset",
        options: {
          offset: offset2 != null ? offset2 : [0, gutter]
        }
      }, {
        name: "flip",
        enabled: !!flip2,
        options: {
          padding: 8
        }
      }, {
        name: "preventOverflow",
        enabled: !!preventOverflow2,
        options: {
          boundary
        }
      }].concat(modifiers != null ? modifiers : []),
      strategy
    });
    instance.current.forceUpdate();
    cleanup.current = instance.current.destroy;
  }, [placement, enabled, modifiers, matchWidth$1, eventListeners, arrowPadding, offset2, gutter, flip2, preventOverflow2, boundary, strategy]);
  (0, import_react61.useEffect)(function() {
    return function() {
      if (!reference2.current && !popper2.current) {
        var _instance$current;
        (_instance$current = instance.current) == null ? void 0 : _instance$current.destroy();
        instance.current = null;
      }
    };
  }, []);
  var referenceRef = (0, import_react61.useCallback)(function(node2) {
    reference2.current = node2;
    setupPopper();
  }, [setupPopper]);
  var getReferenceProps = (0, import_react61.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends24({}, props2, {
      ref: mergeRefs(referenceRef, ref)
    });
  }, [referenceRef]);
  var popperRef = (0, import_react61.useCallback)(function(node2) {
    popper2.current = node2;
    setupPopper();
  }, [setupPopper]);
  var getPopperProps = (0, import_react61.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends24({}, props2, {
      ref: mergeRefs(popperRef, ref),
      style: _extends24({}, props2.style, {
        position: strategy,
        minWidth: matchWidth$1 ? void 0 : "max-content",
        inset: "0 auto auto 0"
      })
    });
  }, [strategy, popperRef, matchWidth$1]);
  var getArrowProps = (0, import_react61.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    var _props2 = props2;
    _props2.size;
    _props2.shadowColor;
    _props2.bg;
    _props2.style;
    var rest = _objectWithoutPropertiesLoose19(_props2, _excluded19);
    return _extends24({}, rest, {
      ref,
      "data-popper-arrow": "",
      style: getArrowStyle2(props2)
    });
  }, []);
  var getArrowInnerProps = (0, import_react61.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends24({}, props2, {
      ref,
      "data-popper-arrow-inner": ""
    });
  }, []);
  return {
    update: function update() {
      var _instance$current2;
      (_instance$current2 = instance.current) == null ? void 0 : _instance$current2.update();
    },
    forceUpdate: function forceUpdate() {
      var _instance$current3;
      (_instance$current3 = instance.current) == null ? void 0 : _instance$current3.forceUpdate();
    },
    transformOrigin: cssVars.transformOrigin.varRef,
    referenceRef,
    popperRef,
    getPopperProps,
    getArrowProps,
    getArrowInnerProps,
    getReferenceProps
  };
}
function getArrowStyle2(props) {
  var size2 = props.size, shadowColor = props.shadowColor, bg = props.bg, style2 = props.style;
  var computedStyle = _extends24({}, style2, {
    position: "absolute"
  });
  if (size2) {
    computedStyle["--popper-arrow-size"] = size2;
  }
  if (shadowColor) {
    computedStyle["--popper-arrow-shadow-color"] = shadowColor;
  }
  if (bg) {
    computedStyle["--popper-arrow-bg"] = bg;
  }
  return computedStyle;
}

// node_modules/@chakra-ui/menu/dist/chakra-ui-menu.esm.js
function _extends25() {
  _extends25 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends25.apply(this, arguments);
}
function _objectWithoutPropertiesLoose20(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$110 = ["id", "closeOnSelect", "closeOnBlur", "autoSelect", "isLazy", "isOpen", "defaultIsOpen", "onClose", "onOpen", "placement", "lazyBehavior", "direction", "computePositionOnMount"];
var _excluded2$14 = ["onMouseEnter", "onMouseMove", "onMouseLeave", "onClick", "isDisabled", "isFocusable", "closeOnSelect", "type"];
var _excluded3$1 = ["type", "isChecked"];
var _excluded4$1 = ["children", "type", "value", "defaultValue", "onChange"];
var _createDescendantCont2 = createDescendantContext();
var MenuDescendantsProvider = _createDescendantCont2[0];
var useMenuDescendantsContext = _createDescendantCont2[1];
var useMenuDescendants = _createDescendantCont2[2];
var useMenuDescendant = _createDescendantCont2[3];
var _createContext9 = createContext({
  strict: false,
  name: "MenuContext"
});
var MenuProvider = _createContext9[0];
var useMenuContext = _createContext9[1];
function useMenu(props) {
  if (props === void 0) {
    props = {};
  }
  var _props = props, id2 = _props.id, _props$closeOnSelect = _props.closeOnSelect, closeOnSelect = _props$closeOnSelect === void 0 ? true : _props$closeOnSelect, _props$closeOnBlur = _props.closeOnBlur, closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur, _props$autoSelect = _props.autoSelect, autoSelect = _props$autoSelect === void 0 ? true : _props$autoSelect, isLazy = _props.isLazy, isOpenProp = _props.isOpen, defaultIsOpen = _props.defaultIsOpen, onCloseProp = _props.onClose, onOpenProp = _props.onOpen, _props$placement = _props.placement, placement = _props$placement === void 0 ? "bottom-start" : _props$placement, _props$lazyBehavior = _props.lazyBehavior, lazyBehavior = _props$lazyBehavior === void 0 ? "unmount" : _props$lazyBehavior, direction2 = _props.direction, _props$computePositio = _props.computePositionOnMount, computePositionOnMount = _props$computePositio === void 0 ? false : _props$computePositio, popperProps = _objectWithoutPropertiesLoose20(_props, _excluded$110);
  var menuRef = React35.useRef(null);
  var buttonRef = React35.useRef(null);
  var descendants = useMenuDescendants();
  var focusMenu = React35.useCallback(function() {
    focus(menuRef.current, {
      nextTick: true,
      selectTextIfInput: false
    });
  }, []);
  var focusFirstItem = React35.useCallback(function() {
    var id3 = setTimeout(function() {
      var first = descendants.firstEnabled();
      if (first)
        setFocusedIndex(first.index);
    });
    timeoutIds.current.add(id3);
  }, [descendants]);
  var focusLastItem = React35.useCallback(function() {
    var id3 = setTimeout(function() {
      var last = descendants.lastEnabled();
      if (last)
        setFocusedIndex(last.index);
    });
    timeoutIds.current.add(id3);
  }, [descendants]);
  var onOpenInternal = React35.useCallback(function() {
    onOpenProp == null ? void 0 : onOpenProp();
    if (autoSelect) {
      focusFirstItem();
    } else {
      focusMenu();
    }
  }, [autoSelect, focusFirstItem, focusMenu, onOpenProp]);
  var _useDisclosure = useDisclosure({
    isOpen: isOpenProp,
    defaultIsOpen,
    onClose: onCloseProp,
    onOpen: onOpenInternal
  }), isOpen = _useDisclosure.isOpen, onOpen = _useDisclosure.onOpen, onClose = _useDisclosure.onClose, onToggle = _useDisclosure.onToggle;
  useOutsideClick({
    enabled: isOpen && closeOnBlur,
    ref: menuRef,
    handler: function handler(event) {
      var _buttonRef$current;
      if (!((_buttonRef$current = buttonRef.current) != null && _buttonRef$current.contains(event.target))) {
        onClose();
      }
    }
  });
  var popper2 = usePopper(_extends25({}, popperProps, {
    enabled: isOpen || computePositionOnMount,
    placement,
    direction: direction2
  }));
  var _React$useState = React35.useState(-1), focusedIndex = _React$useState[0], setFocusedIndex = _React$useState[1];
  useUpdateEffect(function() {
    if (!isOpen) {
      setFocusedIndex(-1);
    }
  }, [isOpen]);
  useFocusOnHide(menuRef, {
    focusRef: buttonRef,
    visible: isOpen,
    shouldFocus: true
  });
  var animationState = useAnimationState({
    isOpen,
    ref: menuRef
  });
  var _useIds = useIds(id2, "menu-button", "menu-list"), buttonId = _useIds[0], menuId = _useIds[1];
  var openAndFocusMenu = React35.useCallback(function() {
    onOpen();
    focusMenu();
  }, [onOpen, focusMenu]);
  var timeoutIds = React35.useRef(/* @__PURE__ */ new Set([]));
  useUnmountEffect(function() {
    timeoutIds.current.forEach(function(id3) {
      return clearTimeout(id3);
    });
    timeoutIds.current.clear();
  });
  var openAndFocusFirstItem = React35.useCallback(function() {
    onOpen();
    focusFirstItem();
  }, [focusFirstItem, onOpen]);
  var openAndFocusLastItem = React35.useCallback(function() {
    onOpen();
    focusLastItem();
  }, [onOpen, focusLastItem]);
  var refocus = React35.useCallback(function() {
    var _menuRef$current, _descendants$item;
    var doc2 = getOwnerDocument(menuRef.current);
    var hasFocusWithin = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(doc2.activeElement);
    var shouldRefocus = isOpen && !hasFocusWithin;
    if (!shouldRefocus)
      return;
    var node2 = (_descendants$item = descendants.item(focusedIndex)) == null ? void 0 : _descendants$item.node;
    if (node2) {
      focus(node2, {
        selectTextIfInput: false,
        preventScroll: false
      });
    }
  }, [isOpen, focusedIndex, descendants]);
  return {
    openAndFocusMenu,
    openAndFocusFirstItem,
    openAndFocusLastItem,
    onTransitionEnd: refocus,
    unstable__animationState: animationState,
    descendants,
    popper: popper2,
    buttonId,
    menuId,
    forceUpdate: popper2.forceUpdate,
    orientation: "vertical",
    isOpen,
    onToggle,
    onOpen,
    onClose,
    menuRef,
    buttonRef,
    focusedIndex,
    closeOnSelect,
    closeOnBlur,
    autoSelect,
    setFocusedIndex,
    isLazy,
    lazyBehavior
  };
}
function useMenuButton(props, externalRef) {
  if (props === void 0) {
    props = {};
  }
  if (externalRef === void 0) {
    externalRef = null;
  }
  var menu = useMenuContext();
  var onToggle = menu.onToggle, popper2 = menu.popper, openAndFocusFirstItem = menu.openAndFocusFirstItem, openAndFocusLastItem = menu.openAndFocusLastItem;
  var onKeyDown = React35.useCallback(function(event) {
    var eventKey = normalizeEventKey(event);
    var keyMap = {
      Enter: openAndFocusFirstItem,
      ArrowDown: openAndFocusFirstItem,
      ArrowUp: openAndFocusLastItem
    };
    var action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      event.stopPropagation();
      action(event);
    }
  }, [openAndFocusFirstItem, openAndFocusLastItem]);
  return _extends25({}, props, {
    ref: mergeRefs(menu.buttonRef, externalRef, popper2.referenceRef),
    id: menu.buttonId,
    "data-active": dataAttr(menu.isOpen),
    "aria-expanded": menu.isOpen,
    "aria-haspopup": "menu",
    "aria-controls": menu.menuId,
    onClick: callAllHandlers(props.onClick, onToggle),
    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)
  });
}
function isTargetMenuItem(target) {
  var _target$getAttribute;
  return isHTMLElement(target) && !!((_target$getAttribute = target.getAttribute("role")) != null && _target$getAttribute.startsWith("menuitem"));
}
function useMenuList(props, ref) {
  if (props === void 0) {
    props = {};
  }
  if (ref === void 0) {
    ref = null;
  }
  var menu = useMenuContext();
  if (!menu) {
    throw new Error("useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>");
  }
  var focusedIndex = menu.focusedIndex, setFocusedIndex = menu.setFocusedIndex, menuRef = menu.menuRef, isOpen = menu.isOpen, onClose = menu.onClose, menuId = menu.menuId, isLazy = menu.isLazy, lazyBehavior = menu.lazyBehavior, animated = menu.unstable__animationState;
  var descendants = useMenuDescendantsContext();
  var createTypeaheadHandler = useShortcut({
    preventDefault: function preventDefault(event) {
      return event.key !== " " && isTargetMenuItem(event.target);
    }
  });
  var onKeyDown = React35.useCallback(function(event) {
    var eventKey = normalizeEventKey(event);
    var keyMap = {
      Tab: function Tab2(event2) {
        return event2.preventDefault();
      },
      Escape: onClose,
      ArrowDown: function ArrowDown() {
        var next = descendants.nextEnabled(focusedIndex);
        if (next)
          setFocusedIndex(next.index);
      },
      ArrowUp: function ArrowUp() {
        var prev = descendants.prevEnabled(focusedIndex);
        if (prev)
          setFocusedIndex(prev.index);
      }
    };
    var fn6 = keyMap[eventKey];
    if (fn6) {
      event.preventDefault();
      fn6(event);
      return;
    }
    var onTypeahead = createTypeaheadHandler(function(character) {
      var nextItem = getNextItemFromSearch(descendants.values(), character, function(item) {
        var _item$node$textConten, _item$node;
        return (_item$node$textConten = item == null ? void 0 : (_item$node = item.node) == null ? void 0 : _item$node.textContent) != null ? _item$node$textConten : "";
      }, descendants.item(focusedIndex));
      if (nextItem) {
        var index2 = descendants.indexOf(nextItem.node);
        setFocusedIndex(index2);
      }
    });
    if (isTargetMenuItem(event.target)) {
      onTypeahead(event);
    }
  }, [descendants, focusedIndex, createTypeaheadHandler, onClose, setFocusedIndex]);
  var hasBeenOpened = React35.useRef(false);
  if (isOpen) {
    hasBeenOpened.current = true;
  }
  var shouldRenderChildren = determineLazyBehavior({
    hasBeenSelected: hasBeenOpened.current,
    isLazy,
    lazyBehavior,
    isSelected: animated.present
  });
  return _extends25({}, props, {
    ref: mergeRefs(menuRef, ref),
    children: shouldRenderChildren ? props.children : null,
    tabIndex: -1,
    role: "menu",
    id: menuId,
    style: _extends25({}, props.style, {
      transformOrigin: "var(--popper-transform-origin)"
    }),
    "aria-orientation": "vertical",
    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)
  });
}
function useMenuPositioner(props) {
  if (props === void 0) {
    props = {};
  }
  var _useMenuContext = useMenuContext(), popper2 = _useMenuContext.popper, isOpen = _useMenuContext.isOpen;
  return popper2.getPopperProps(_extends25({}, props, {
    style: _extends25({
      visibility: isOpen ? "visible" : "hidden"
    }, props.style)
  }));
}
function useMenuItem(props, externalRef) {
  if (props === void 0) {
    props = {};
  }
  if (externalRef === void 0) {
    externalRef = null;
  }
  var _props2 = props, onMouseEnterProp = _props2.onMouseEnter, onMouseMoveProp = _props2.onMouseMove, onMouseLeaveProp = _props2.onMouseLeave, onClickProp = _props2.onClick, isDisabled = _props2.isDisabled, isFocusable = _props2.isFocusable, closeOnSelect = _props2.closeOnSelect, typeProp = _props2.type, htmlProps = _objectWithoutPropertiesLoose20(_props2, _excluded2$14);
  var menu = useMenuContext();
  var setFocusedIndex = menu.setFocusedIndex, focusedIndex = menu.focusedIndex, menuCloseOnSelect = menu.closeOnSelect, onClose = menu.onClose, menuRef = menu.menuRef, isOpen = menu.isOpen, menuId = menu.menuId;
  var ref = React35.useRef(null);
  var id2 = menuId + "-menuitem-" + useId();
  var _useMenuDescendant = useMenuDescendant({
    disabled: isDisabled && !isFocusable
  }), index2 = _useMenuDescendant.index, register = _useMenuDescendant.register;
  var onMouseEnter = React35.useCallback(function(event) {
    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);
    if (isDisabled)
      return;
    setFocusedIndex(index2);
  }, [setFocusedIndex, index2, isDisabled, onMouseEnterProp]);
  var onMouseMove = React35.useCallback(function(event) {
    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);
    if (ref.current && !isActiveElement(ref.current)) {
      onMouseEnter(event);
    }
  }, [onMouseEnter, onMouseMoveProp]);
  var onMouseLeave = React35.useCallback(function(event) {
    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);
    if (isDisabled)
      return;
    setFocusedIndex(-1);
  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);
  var onClick = React35.useCallback(function(event) {
    onClickProp == null ? void 0 : onClickProp(event);
    if (!isTargetMenuItem(event.currentTarget))
      return;
    if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) {
      onClose();
    }
  }, [onClose, onClickProp, menuCloseOnSelect, closeOnSelect]);
  var isFocused = index2 === focusedIndex;
  var trulyDisabled = isDisabled && !isFocusable;
  useUpdateEffect(function() {
    if (!isOpen)
      return;
    if (isFocused && !trulyDisabled && ref.current) {
      focus(ref.current, {
        nextTick: true,
        selectTextIfInput: false,
        preventScroll: false
      });
    } else if (menuRef.current && !isActiveElement(menuRef.current)) {
      focus(menuRef.current, {
        preventScroll: false
      });
    }
  }, [isFocused, trulyDisabled, menuRef, isOpen]);
  var clickableProps = useClickable({
    onClick,
    onMouseEnter,
    onMouseMove,
    onMouseLeave,
    ref: mergeRefs(register, ref, externalRef),
    isDisabled,
    isFocusable
  });
  return _extends25({}, htmlProps, clickableProps, {
    type: typeProp != null ? typeProp : clickableProps.type,
    id: id2,
    role: "menuitem",
    tabIndex: isFocused ? 0 : -1
  });
}
function useMenuOption(props, ref) {
  if (props === void 0) {
    props = {};
  }
  if (ref === void 0) {
    ref = null;
  }
  var _props3 = props, _props3$type = _props3.type, type = _props3$type === void 0 ? "radio" : _props3$type, isChecked = _props3.isChecked, rest = _objectWithoutPropertiesLoose20(_props3, _excluded3$1);
  var ownProps = useMenuItem(rest, ref);
  return _extends25({}, ownProps, {
    role: "menuitem" + type,
    "aria-checked": isChecked
  });
}
function useMenuOptionGroup(props) {
  if (props === void 0) {
    props = {};
  }
  var _props4 = props, children = _props4.children, _props4$type = _props4.type, type = _props4$type === void 0 ? "radio" : _props4$type, valueProp = _props4.value, defaultValue = _props4.defaultValue, onChangeProp = _props4.onChange, htmlProps = _objectWithoutPropertiesLoose20(_props4, _excluded4$1);
  var isRadio = type === "radio";
  var fallback = isRadio ? "" : [];
  var _useControllableState = useControllableState({
    defaultValue: defaultValue != null ? defaultValue : fallback,
    value: valueProp,
    onChange: onChangeProp
  }), value = _useControllableState[0], setValue = _useControllableState[1];
  var onChange = React35.useCallback(function(selectedValue) {
    if (type === "radio" && isString(value)) {
      setValue(selectedValue);
    }
    if (type === "checkbox" && isArray(value)) {
      var nextValue = value.includes(selectedValue) ? removeItem(value, selectedValue) : addItem(value, selectedValue);
      setValue(nextValue);
    }
  }, [value, setValue, type]);
  var validChildren = getValidChildren(children);
  var clones = validChildren.map(function(child) {
    if (child.type.id !== "MenuItemOption")
      return child;
    var onClick = function onClick2(event) {
      onChange(child.props.value);
      child.props.onClick == null ? void 0 : child.props.onClick(event);
    };
    var isChecked = type === "radio" ? child.props.value === value : value.includes(child.props.value);
    return React35.cloneElement(child, {
      type,
      onClick,
      isChecked
    });
  });
  return _extends25({}, htmlProps, {
    children: clones
  });
}
function useMenuState() {
  var _useMenuContext2 = useMenuContext(), isOpen = _useMenuContext2.isOpen, onClose = _useMenuContext2.onClose;
  return {
    isOpen,
    onClose
  };
}
var _excluded20 = ["descendants"];
var _excluded210 = ["children", "as"];
var _excluded37 = ["rootProps"];
var _excluded44 = ["type"];
var _excluded53 = ["icon", "iconSpacing", "command", "commandSpacing", "children"];
var _excluded62 = ["icon", "iconSpacing"];
var _excluded72 = ["className", "title"];
var _excluded82 = ["title", "children", "className"];
var _excluded92 = ["className", "children"];
var _excluded102 = ["className"];
var _createStylesContext10 = createStylesContext("Menu");
var StylesProvider11 = _createStylesContext10[0];
var useStyles11 = _createStylesContext10[1];
var useMenuStyles = useStyles11;
var Menu2 = function Menu3(props) {
  var children = props.children;
  var styles2 = useMultiStyleConfig("Menu", props);
  var ownProps = omitThemingProps(props);
  var _useTheme = useTheme(), direction2 = _useTheme.direction;
  var _useMenu = useMenu(_extends25({}, ownProps, {
    direction: direction2
  })), descendants = _useMenu.descendants, ctx = _objectWithoutPropertiesLoose20(_useMenu, _excluded20);
  var context = React35.useMemo(function() {
    return ctx;
  }, [ctx]);
  var isOpen = context.isOpen, onClose = context.onClose, forceUpdate = context.forceUpdate;
  return React35.createElement(MenuDescendantsProvider, {
    value: descendants
  }, React35.createElement(MenuProvider, {
    value: context
  }, React35.createElement(StylesProvider11, {
    value: styles2
  }, runIfFn(children, {
    isOpen,
    onClose,
    forceUpdate
  }))));
};
if (__DEV__) {
  Menu2.displayName = "Menu";
}
var StyledMenuButton = forwardRef(function(props, ref) {
  var styles2 = useStyles11();
  return React35.createElement(chakra.button, _extends25({
    ref
  }, props, {
    __css: _extends25({
      display: "inline-flex",
      appearance: "none",
      alignItems: "center",
      outline: 0
    }, styles2.button)
  }));
});
var MenuButton = forwardRef(function(props, ref) {
  props.children;
  var As = props.as, rest = _objectWithoutPropertiesLoose20(props, _excluded210);
  var buttonProps = useMenuButton(rest, ref);
  var Element2 = As || StyledMenuButton;
  return React35.createElement(Element2, _extends25({}, buttonProps, {
    className: cx("chakra-menu__menu-button", props.className)
  }), React35.createElement(chakra.span, {
    __css: {
      pointerEvents: "none",
      flex: "1 1 auto",
      minW: 0
    }
  }, props.children));
});
if (__DEV__) {
  MenuButton.displayName = "MenuButton";
}
var motionVariants = {
  enter: {
    visibility: "visible",
    opacity: 1,
    scale: 1,
    transition: {
      duration: 0.2,
      ease: [0.4, 0, 0.2, 1]
    }
  },
  exit: {
    transitionEnd: {
      visibility: "hidden"
    },
    opacity: 0,
    scale: 0.8,
    transition: {
      duration: 0.1,
      easings: "easeOut"
    }
  }
};
function __motion2(el) {
  var m2 = motion;
  if ("custom" in m2 && typeof m2.custom === "function") {
    return m2.custom(el);
  }
  return m2(el);
}
var MenuTransition = __motion2(chakra.div);
var MenuList = forwardRef(function(props, ref) {
  var _props$zIndex, _styles$list;
  var rootProps = props.rootProps, rest = _objectWithoutPropertiesLoose20(props, _excluded37);
  var _useMenuContext = useMenuContext(), isOpen = _useMenuContext.isOpen, onTransitionEnd = _useMenuContext.onTransitionEnd, animated = _useMenuContext.unstable__animationState;
  var ownProps = useMenuList(rest, ref);
  var positionerProps = useMenuPositioner(rootProps);
  var styles2 = useStyles11();
  return React35.createElement(chakra.div, _extends25({}, positionerProps, {
    __css: {
      zIndex: (_props$zIndex = props.zIndex) != null ? _props$zIndex : (_styles$list = styles2.list) == null ? void 0 : _styles$list.zIndex
    }
  }), React35.createElement(MenuTransition, _extends25({}, ownProps, {
    onUpdate: onTransitionEnd,
    onAnimationComplete: callAll(animated.onComplete, ownProps.onAnimationComplete),
    className: cx("chakra-menu__menu-list", ownProps.className),
    variants: motionVariants,
    initial: false,
    animate: isOpen ? "enter" : "exit",
    __css: _extends25({
      outline: 0
    }, styles2.list)
  })));
});
if (__DEV__) {
  MenuList.displayName = "MenuList";
}
var StyledMenuItem = forwardRef(function(props, ref) {
  var type = props.type, rest = _objectWithoutPropertiesLoose20(props, _excluded44);
  var styles2 = useStyles11();
  var btnType = rest.as || type ? type != null ? type : void 0 : "button";
  var buttonStyles = React35.useMemo(function() {
    return _extends25({
      textDecoration: "none",
      color: "inherit",
      userSelect: "none",
      display: "flex",
      width: "100%",
      alignItems: "center",
      textAlign: "start",
      flex: "0 0 auto",
      outline: 0
    }, styles2.item);
  }, [styles2.item]);
  return React35.createElement(chakra.button, _extends25({
    ref,
    type: btnType
  }, rest, {
    __css: buttonStyles
  }));
});
var MenuItem = forwardRef(function(props, ref) {
  var icon = props.icon, _props$iconSpacing = props.iconSpacing, iconSpacing2 = _props$iconSpacing === void 0 ? "0.75rem" : _props$iconSpacing, command = props.command, _props$commandSpacing = props.commandSpacing, commandSpacing = _props$commandSpacing === void 0 ? "0.75rem" : _props$commandSpacing, children = props.children, rest = _objectWithoutPropertiesLoose20(props, _excluded53);
  var menuitemProps = useMenuItem(rest, ref);
  var shouldWrap = icon || command;
  var _children = shouldWrap ? React35.createElement("span", {
    style: {
      pointerEvents: "none",
      flex: 1
    }
  }, children) : children;
  return React35.createElement(StyledMenuItem, _extends25({}, menuitemProps, {
    className: cx("chakra-menu__menuitem", menuitemProps.className)
  }), icon && React35.createElement(MenuIcon, {
    fontSize: "0.8em",
    marginEnd: iconSpacing2
  }, icon), _children, command && React35.createElement(MenuCommand, {
    marginStart: commandSpacing
  }, command));
});
if (__DEV__) {
  MenuItem.displayName = "MenuItem";
}
var CheckIcon5 = function CheckIcon6(props) {
  return React35.createElement("svg", _extends25({
    viewBox: "0 0 14 14",
    width: "1em",
    height: "1em"
  }, props), React35.createElement("polygon", {
    fill: "currentColor",
    points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
  }));
};
var MenuItemOption = forwardRef(function(props, ref) {
  var icon = props.icon, _props$iconSpacing2 = props.iconSpacing, iconSpacing2 = _props$iconSpacing2 === void 0 ? "0.75rem" : _props$iconSpacing2, rest = _objectWithoutPropertiesLoose20(props, _excluded62);
  var optionProps = useMenuOption(rest, ref);
  return React35.createElement(StyledMenuItem, _extends25({}, optionProps, {
    className: cx("chakra-menu__menuitem-option", rest.className)
  }), icon !== null && React35.createElement(MenuIcon, {
    fontSize: "0.8em",
    marginEnd: iconSpacing2,
    opacity: props.isChecked ? 1 : 0
  }, icon || React35.createElement(CheckIcon5, null)), React35.createElement("span", {
    style: {
      flex: 1
    }
  }, optionProps.children));
});
MenuItemOption.id = "MenuItemOption";
if (__DEV__) {
  MenuItemOption.displayName = "MenuItemOption";
}
var MenuOptionGroup = function MenuOptionGroup2(props) {
  var className = props.className, title = props.title, rest = _objectWithoutPropertiesLoose20(props, _excluded72);
  var ownProps = useMenuOptionGroup(rest);
  return React35.createElement(MenuGroup, _extends25({
    title,
    className: cx("chakra-menu__option-group", className)
  }, ownProps));
};
if (__DEV__) {
  MenuOptionGroup.displayName = "MenuOptionGroup";
}
var MenuGroup = forwardRef(function(props, ref) {
  var title = props.title, children = props.children, className = props.className, rest = _objectWithoutPropertiesLoose20(props, _excluded82);
  var _className = cx("chakra-menu__group__title", className);
  var styles2 = useStyles11();
  return React35.createElement("div", {
    ref,
    className: "chakra-menu__group",
    role: "group"
  }, title && React35.createElement(chakra.p, _extends25({
    className: _className
  }, rest, {
    __css: styles2.groupTitle
  }), title), children);
});
if (__DEV__) {
  MenuGroup.displayName = "MenuGroup";
}
var MenuCommand = forwardRef(function(props, ref) {
  var styles2 = useStyles11();
  return React35.createElement(chakra.span, _extends25({
    ref
  }, props, {
    __css: styles2.command,
    className: "chakra-menu__command"
  }));
});
if (__DEV__) {
  MenuCommand.displayName = "MenuCommand";
}
var MenuIcon = function MenuIcon2(props) {
  var className = props.className, children = props.children, rest = _objectWithoutPropertiesLoose20(props, _excluded92);
  var child = React35.Children.only(children);
  var clone = React35.isValidElement(child) ? React35.cloneElement(child, {
    focusable: "false",
    "aria-hidden": true,
    className: cx("chakra-menu__icon", child.props.className)
  }) : null;
  var _className = cx("chakra-menu__icon-wrapper", className);
  return React35.createElement(chakra.span, _extends25({
    className: _className
  }, rest, {
    __css: {
      flexShrink: 0
    }
  }), clone);
};
if (__DEV__) {
  MenuIcon.displayName = "MenuIcon";
}
var MenuDivider = function MenuDivider2(props) {
  var className = props.className, rest = _objectWithoutPropertiesLoose20(props, _excluded102);
  var styles2 = useStyles11();
  return React35.createElement(chakra.hr, _extends25({
    role: "separator",
    "aria-orientation": "horizontal",
    className: cx("chakra-menu__divider", className)
  }, rest, {
    __css: styles2.divider
  }));
};
if (__DEV__) {
  MenuDivider.displayName = "MenuDivider";
}

// node_modules/@chakra-ui/focus-lock/dist/chakra-ui-focus-lock.esm.js
var React47 = __toESM(require_react());

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose21(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}

// node_modules/react-focus-lock/dist/es2015/Combination.js
var React43 = __toESM(require_react());

// node_modules/react-focus-lock/dist/es2015/Lock.js
var React40 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/focus-lock/dist/es2015/constants.js
var FOCUS_GROUP = "data-focus-lock";
var FOCUS_DISABLED = "data-focus-lock-disabled";
var FOCUS_ALLOW = "data-no-focus-lock";
var FOCUS_AUTO = "data-autofocus-inside";
var FOCUS_NO_AUTOFOCUS = "data-no-autofocus";

// node_modules/use-callback-ref/dist/es2015/assignRef.js
function assignRef2(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}

// node_modules/use-callback-ref/dist/es2015/useRef.js
var import_react62 = __toESM(require_react());
function useCallbackRef2(initialValue, callback) {
  var ref = (0, import_react62.useState)(function() {
    return {
      value: initialValue,
      callback,
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last = ref.value;
          if (last !== value) {
            ref.value = value;
            ref.callback(value, last);
          }
        }
      }
    };
  })[0];
  ref.callback = callback;
  return ref.facade;
}

// node_modules/use-callback-ref/dist/es2015/useMergeRef.js
function useMergeRefs2(refs, defaultValue) {
  return useCallbackRef2(defaultValue || null, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef2(ref, newValue);
    });
  });
}

// node_modules/react-focus-lock/dist/es2015/Lock.js
var import_react65 = __toESM(require_react());

// node_modules/react-focus-lock/dist/es2015/FocusGuard.js
var React36 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var hiddenGuard = {
  width: "1px",
  height: "0px",
  padding: 0,
  overflow: "hidden",
  position: "fixed",
  top: "1px",
  left: "1px"
};
var InFocusGuard = function InFocusGuard2(_ref2) {
  var children = _ref2.children;
  return React36.createElement(React36.Fragment, null, React36.createElement("div", {
    key: "guard-first",
    "data-focus-guard": true,
    "data-focus-auto-guard": true,
    style: hiddenGuard
  }), children, children && React36.createElement("div", {
    key: "guard-last",
    "data-focus-guard": true,
    "data-focus-auto-guard": true,
    style: hiddenGuard
  }));
};
InFocusGuard.propTypes = true ? {
  children: import_prop_types.default.node
} : {};
InFocusGuard.defaultProps = {
  children: null
};

// node_modules/use-sidecar/node_modules/tslib/tslib.es6.js
var __assign2 = function() {
  __assign2 = Object.assign || function __assign4(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
function __rest4(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}

// node_modules/use-sidecar/dist/es2015/hoc.js
var React37 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/hook.js
var import_react63 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/medium.js
function ItoI(a2) {
  return a2;
}
function innerCreateMedium(defaults4, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults4;
    },
    useMedium: function(data) {
      var item = middleware(data, assigned);
      buffer.push(item);
      return function() {
        buffer = buffer.filter(function(x) {
          return x !== item;
        });
      };
    },
    assignSyncMedium: function(cb2) {
      assigned = true;
      while (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb2);
      }
      buffer = {
        push: function(x) {
          return cb2(x);
        },
        filter: function() {
          return buffer;
        }
      };
    },
    assignMedium: function(cb2) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb2);
        pendingQueue = buffer;
      }
      var executeQueue = function() {
        var cbs2 = pendingQueue;
        pendingQueue = [];
        cbs2.forEach(cb2);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function(x) {
          pendingQueue.push(x);
          cycle();
        },
        filter: function(filter3) {
          pendingQueue = pendingQueue.filter(filter3);
          return buffer;
        }
      };
    }
  };
  return medium;
}
function createMedium(defaults4, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  return innerCreateMedium(defaults4, middleware);
}
function createSidecarMedium(options) {
  if (options === void 0) {
    options = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign2({ async: true, ssr: false }, options);
  return medium;
}

// node_modules/use-sidecar/dist/es2015/renderProp.js
var React38 = __toESM(require_react());
var import_react64 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/exports.js
var React39 = __toESM(require_react());
var SideCar = function(_a) {
  var sideCar2 = _a.sideCar, rest = __rest4(_a, ["sideCar"]);
  if (!sideCar2) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar2.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return React39.createElement(Target, __assign2({}, rest));
};
SideCar.isSideCarExport = true;
function exportSidecar(medium, exported) {
  medium.useMedium(exported);
  return SideCar;
}

// node_modules/react-focus-lock/dist/es2015/medium.js
var mediumFocus = createMedium({}, function(_ref2) {
  var target = _ref2.target, currentTarget = _ref2.currentTarget;
  return {
    target,
    currentTarget
  };
});
var mediumBlur = createMedium();
var mediumEffect = createMedium();
var mediumSidecar = createSidecarMedium({
  async: true
});

// node_modules/react-focus-lock/dist/es2015/Lock.js
var emptyArray = [];
var FocusLock = React40.forwardRef(function FocusLockUI(props, parentRef) {
  var _extends210;
  var _React$useState = React40.useState(), realObserved = _React$useState[0], setObserved = _React$useState[1];
  var observed = React40.useRef();
  var isActive = React40.useRef(false);
  var originalFocusedElement = React40.useRef(null);
  var children = props.children, disabled = props.disabled, noFocusGuards = props.noFocusGuards, persistentFocus = props.persistentFocus, crossFrame = props.crossFrame, autoFocus = props.autoFocus, allowTextSelection = props.allowTextSelection, group = props.group, className = props.className, whiteList = props.whiteList, hasPositiveIndices = props.hasPositiveIndices, _props$shards = props.shards, shards = _props$shards === void 0 ? emptyArray : _props$shards, _props$as = props.as, Container5 = _props$as === void 0 ? "div" : _props$as, _props$lockProps = props.lockProps, containerProps = _props$lockProps === void 0 ? {} : _props$lockProps, SideCar2 = props.sideCar, shouldReturnFocus = props.returnFocus, focusOptions = props.focusOptions, onActivationCallback = props.onActivation, onDeactivationCallback = props.onDeactivation;
  var _React$useState2 = React40.useState({}), id2 = _React$useState2[0];
  var onActivation = React40.useCallback(function() {
    originalFocusedElement.current = originalFocusedElement.current || document && document.activeElement;
    if (observed.current && onActivationCallback) {
      onActivationCallback(observed.current);
    }
    isActive.current = true;
  }, [onActivationCallback]);
  var onDeactivation = React40.useCallback(function() {
    isActive.current = false;
    if (onDeactivationCallback) {
      onDeactivationCallback(observed.current);
    }
  }, [onDeactivationCallback]);
  (0, import_react65.useEffect)(function() {
    if (!disabled) {
      originalFocusedElement.current = null;
    }
  }, []);
  var returnFocus = React40.useCallback(function(allowDefer) {
    var returnFocusTo = originalFocusedElement.current;
    if (returnFocusTo && returnFocusTo.focus) {
      var howToReturnFocus = typeof shouldReturnFocus === "function" ? shouldReturnFocus(returnFocusTo) : shouldReturnFocus;
      if (howToReturnFocus) {
        var returnFocusOptions = typeof howToReturnFocus === "object" ? howToReturnFocus : void 0;
        originalFocusedElement.current = null;
        if (allowDefer) {
          Promise.resolve().then(function() {
            return returnFocusTo.focus(returnFocusOptions);
          });
        } else {
          returnFocusTo.focus(returnFocusOptions);
        }
      }
    }
  }, [shouldReturnFocus]);
  var onFocus3 = React40.useCallback(function(event) {
    if (isActive.current) {
      mediumFocus.useMedium(event);
    }
  }, []);
  var onBlur3 = mediumBlur.useMedium;
  var setObserveNode = React40.useCallback(function(newObserved) {
    if (observed.current !== newObserved) {
      observed.current = newObserved;
      setObserved(newObserved);
    }
  }, []);
  if (true) {
    if (typeof allowTextSelection !== "undefined") {
      console.warn("React-Focus-Lock: allowTextSelection is deprecated and enabled by default");
    }
    React40.useEffect(function() {
      if (!observed.current) {
        console.error("FocusLock: could not obtain ref to internal node");
      }
    }, []);
  }
  var lockProps = _extends((_extends210 = {}, _extends210[FOCUS_DISABLED] = disabled && "disabled", _extends210[FOCUS_GROUP] = group, _extends210), containerProps);
  var hasLeadingGuards = noFocusGuards !== true;
  var hasTailingGuards = hasLeadingGuards && noFocusGuards !== "tail";
  var mergedRef = useMergeRefs2([parentRef, setObserveNode]);
  return React40.createElement(React40.Fragment, null, hasLeadingGuards && [
    React40.createElement("div", {
      key: "guard-first",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 0,
      style: hiddenGuard
    }),
    hasPositiveIndices ? React40.createElement("div", {
      key: "guard-nearest",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 1,
      style: hiddenGuard
    }) : null
  ], !disabled && React40.createElement(SideCar2, {
    id: id2,
    sideCar: mediumSidecar,
    observed: realObserved,
    disabled,
    persistentFocus,
    crossFrame,
    autoFocus,
    whiteList,
    shards,
    onActivation,
    onDeactivation,
    returnFocus,
    focusOptions
  }), React40.createElement(Container5, _extends({
    ref: mergedRef
  }, lockProps, {
    className,
    onBlur: onBlur3,
    onFocus: onFocus3
  }), children), hasTailingGuards && React40.createElement("div", {
    "data-focus-guard": true,
    tabIndex: disabled ? -1 : 0,
    style: hiddenGuard
  }));
});
FocusLock.propTypes = true ? {
  children: import_prop_types2.node,
  disabled: import_prop_types2.bool,
  returnFocus: (0, import_prop_types2.oneOfType)([import_prop_types2.bool, import_prop_types2.object, import_prop_types2.func]),
  focusOptions: import_prop_types2.object,
  noFocusGuards: import_prop_types2.bool,
  hasPositiveIndices: import_prop_types2.bool,
  allowTextSelection: import_prop_types2.bool,
  autoFocus: import_prop_types2.bool,
  persistentFocus: import_prop_types2.bool,
  crossFrame: import_prop_types2.bool,
  group: import_prop_types2.string,
  className: import_prop_types2.string,
  whiteList: import_prop_types2.func,
  shards: (0, import_prop_types2.arrayOf)(import_prop_types2.any),
  as: (0, import_prop_types2.oneOfType)([import_prop_types2.string, import_prop_types2.func, import_prop_types2.object]),
  lockProps: import_prop_types2.object,
  onActivation: import_prop_types2.func,
  onDeactivation: import_prop_types2.func,
  sideCar: import_prop_types2.any.isRequired
} : {};
FocusLock.defaultProps = {
  children: void 0,
  disabled: false,
  returnFocus: false,
  focusOptions: void 0,
  noFocusGuards: false,
  autoFocus: true,
  persistentFocus: false,
  crossFrame: true,
  hasPositiveIndices: void 0,
  allowTextSelection: void 0,
  group: void 0,
  className: void 0,
  whiteList: void 0,
  shards: void 0,
  as: "div",
  lockProps: {},
  onActivation: void 0,
  onDeactivation: void 0
};
var Lock_default = FocusLock;

// node_modules/react-focus-lock/dist/es2015/Trap.js
var React42 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

// node_modules/react-clientside-effect/lib/index.es.js
var import_react66 = __toESM(require_react());
function withSideEffect(reducePropsToState2, handleStateChangeOnClient2) {
  if (true) {
    if (typeof reducePropsToState2 !== "function") {
      throw new Error("Expected reducePropsToState to be a function.");
    }
    if (typeof handleStateChangeOnClient2 !== "function") {
      throw new Error("Expected handleStateChangeOnClient to be a function.");
    }
  }
  function getDisplayName(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || "Component";
  }
  return function wrap3(WrappedComponent) {
    if (true) {
      if (typeof WrappedComponent !== "function") {
        throw new Error("Expected WrappedComponent to be a React component.");
      }
    }
    var mountedInstances = [];
    var state;
    function emitChange() {
      state = reducePropsToState2(mountedInstances.map(function(instance) {
        return instance.props;
      }));
      handleStateChangeOnClient2(state);
    }
    var SideEffect = function(_PureComponent) {
      _inheritsLoose(SideEffect2, _PureComponent);
      function SideEffect2() {
        return _PureComponent.apply(this, arguments) || this;
      }
      SideEffect2.peek = function peek() {
        return state;
      };
      var _proto = SideEffect2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        mountedInstances.push(this);
        emitChange();
      };
      _proto.componentDidUpdate = function componentDidUpdate() {
        emitChange();
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        var index2 = mountedInstances.indexOf(this);
        mountedInstances.splice(index2, 1);
        emitChange();
      };
      _proto.render = function render() {
        return import_react66.default.createElement(WrappedComponent, this.props);
      };
      return SideEffect2;
    }(import_react66.PureComponent);
    _defineProperty(SideEffect, "displayName", "SideEffect(" + getDisplayName(WrappedComponent) + ")");
    return SideEffect;
  };
}
var index_es_default = withSideEffect;

// node_modules/focus-lock/dist/es2015/utils/array.js
var toArray = function(a2) {
  var ret = Array(a2.length);
  for (var i = 0; i < a2.length; ++i) {
    ret[i] = a2[i];
  }
  return ret;
};
var asArray = function(a2) {
  return Array.isArray(a2) ? a2 : [a2];
};

// node_modules/focus-lock/dist/es2015/utils/is.js
var isElementHidden = function(node2) {
  if (node2.nodeType !== Node.ELEMENT_NODE) {
    return false;
  }
  var computedStyle = window.getComputedStyle(node2, null);
  if (!computedStyle || !computedStyle.getPropertyValue) {
    return false;
  }
  return computedStyle.getPropertyValue("display") === "none" || computedStyle.getPropertyValue("visibility") === "hidden";
};
var getParentNode2 = function(node2) {
  return node2.parentNode && node2.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? node2.parentNode.host : node2.parentNode;
};
var isTopNode = function(node2) {
  return node2 === document || node2 && node2.nodeType === Node.DOCUMENT_NODE;
};
var isVisibleUncached = function(node2, checkParent) {
  return !node2 || isTopNode(node2) || !isElementHidden(node2) && checkParent(getParentNode2(node2));
};
var isVisibleCached = function(visibilityCache, node2) {
  var cached = visibilityCache.get(node2);
  if (cached !== void 0) {
    return cached;
  }
  var result = isVisibleUncached(node2, isVisibleCached.bind(void 0, visibilityCache));
  visibilityCache.set(node2, result);
  return result;
};
var isAutoFocusAllowedUncached = function(node2, checkParent) {
  return node2 && !isTopNode(node2) ? isAutoFocusAllowed(node2) ? checkParent(getParentNode2(node2)) : false : true;
};
var isAutoFocusAllowedCached = function(cache, node2) {
  var cached = cache.get(node2);
  if (cached !== void 0) {
    return cached;
  }
  var result = isAutoFocusAllowedUncached(node2, isAutoFocusAllowedCached.bind(void 0, cache));
  cache.set(node2, result);
  return result;
};
var getDataset = function(node2) {
  return node2.dataset;
};
var isHTMLButtonElement = function(node2) {
  return node2.tagName === "BUTTON";
};
var isHTMLInputElement = function(node2) {
  return node2.tagName === "INPUT";
};
var isRadioElement = function(node2) {
  return isHTMLInputElement(node2) && node2.type === "radio";
};
var notHiddenInput = function(node2) {
  return !((isHTMLInputElement(node2) || isHTMLButtonElement(node2)) && (node2.type === "hidden" || node2.disabled));
};
var isAutoFocusAllowed = function(node2) {
  var attribute = node2.getAttribute(FOCUS_NO_AUTOFOCUS);
  return ![true, "true", ""].includes(attribute);
};
var isGuard = function(node2) {
  var _a;
  return Boolean(node2 && ((_a = getDataset(node2)) === null || _a === void 0 ? void 0 : _a.focusGuard));
};
var isNotAGuard = function(node2) {
  return !isGuard(node2);
};
var isDefined = function(x) {
  return Boolean(x);
};

// node_modules/focus-lock/dist/es2015/utils/tabOrder.js
var tabSort = function(a2, b2) {
  var tabDiff = a2.tabIndex - b2.tabIndex;
  var indexDiff = a2.index - b2.index;
  if (tabDiff) {
    if (!a2.tabIndex) {
      return 1;
    }
    if (!b2.tabIndex) {
      return -1;
    }
  }
  return tabDiff || indexDiff;
};
var orderByTabIndex = function(nodes, filterNegative, keepGuards) {
  return toArray(nodes).map(function(node2, index2) {
    return {
      node: node2,
      index: index2,
      tabIndex: keepGuards && node2.tabIndex === -1 ? (node2.dataset || {}).focusGuard ? 0 : -1 : node2.tabIndex
    };
  }).filter(function(data) {
    return !filterNegative || data.tabIndex >= 0;
  }).sort(tabSort);
};

// node_modules/focus-lock/dist/es2015/utils/tabbables.js
var tabbables = [
  "button:enabled",
  "select:enabled",
  "textarea:enabled",
  "input:enabled",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[tabindex]",
  "[contenteditable]",
  "[autofocus]"
];

// node_modules/focus-lock/dist/es2015/utils/tabUtils.js
var queryTabbables = tabbables.join(",");
var queryGuardTabbables = "".concat(queryTabbables, ", [data-focus-guard]");
var getFocusablesWithShadowDom = function(parent, withGuards) {
  var _a;
  return toArray(((_a = parent.shadowRoot) === null || _a === void 0 ? void 0 : _a.children) || parent.children).reduce(function(acc, child) {
    return acc.concat(child.matches(withGuards ? queryGuardTabbables : queryTabbables) ? [child] : [], getFocusablesWithShadowDom(child));
  }, []);
};
var getFocusables = function(parents, withGuards) {
  return parents.reduce(function(acc, parent) {
    return acc.concat(getFocusablesWithShadowDom(parent, withGuards), parent.parentNode ? toArray(parent.parentNode.querySelectorAll(queryTabbables)).filter(function(node2) {
      return node2 === parent;
    }) : []);
  }, []);
};
var getParentAutofocusables = function(parent) {
  var parentFocus = parent.querySelectorAll("[".concat(FOCUS_AUTO, "]"));
  return toArray(parentFocus).map(function(node2) {
    return getFocusables([node2]);
  }).reduce(function(acc, nodes) {
    return acc.concat(nodes);
  }, []);
};

// node_modules/focus-lock/dist/es2015/utils/DOMutils.js
var filterFocusable = function(nodes, visibilityCache) {
  return toArray(nodes).filter(function(node2) {
    return isVisibleCached(visibilityCache, node2);
  }).filter(function(node2) {
    return notHiddenInput(node2);
  });
};
var filterAutoFocusable = function(nodes, cache) {
  if (cache === void 0) {
    cache = /* @__PURE__ */ new Map();
  }
  return toArray(nodes).filter(function(node2) {
    return isAutoFocusAllowedCached(cache, node2);
  });
};
var getTabbableNodes = function(topNodes, visibilityCache, withGuards) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes, withGuards), visibilityCache), true, withGuards);
};
var getAllTabbableNodes = function(topNodes, visibilityCache) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes), visibilityCache), false);
};
var parentAutofocusables = function(topNode, visibilityCache) {
  return filterFocusable(getParentAutofocusables(topNode), visibilityCache);
};
var contains3 = function(scope, element) {
  return (scope.shadowRoot ? contains3(scope.shadowRoot, element) : Object.getPrototypeOf(scope).contains.call(scope, element)) || toArray(scope.children).some(function(child) {
    return contains3(child, element);
  });
};

// node_modules/focus-lock/dist/es2015/utils/all-affected.js
var filterNested = function(nodes) {
  var contained = /* @__PURE__ */ new Set();
  var l = nodes.length;
  for (var i = 0; i < l; i += 1) {
    for (var j = i + 1; j < l; j += 1) {
      var position2 = nodes[i].compareDocumentPosition(nodes[j]);
      if ((position2 & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) {
        contained.add(j);
      }
      if ((position2 & Node.DOCUMENT_POSITION_CONTAINS) > 0) {
        contained.add(i);
      }
    }
  }
  return nodes.filter(function(_, index2) {
    return !contained.has(index2);
  });
};
var getTopParent = function(node2) {
  return node2.parentNode ? getTopParent(node2.parentNode) : node2;
};
var getAllAffectedNodes = function(node2) {
  var nodes = asArray(node2);
  return nodes.filter(Boolean).reduce(function(acc, currentNode) {
    var group = currentNode.getAttribute(FOCUS_GROUP);
    acc.push.apply(acc, group ? filterNested(toArray(getTopParent(currentNode).querySelectorAll("[".concat(FOCUS_GROUP, '="').concat(group, '"]:not([').concat(FOCUS_DISABLED, '="disabled"])')))) : [currentNode]);
    return acc;
  }, []);
};

// node_modules/focus-lock/dist/es2015/utils/getActiveElement.js
var getNestedShadowActiveElement = function(shadowRoot) {
  return shadowRoot.activeElement ? shadowRoot.activeElement.shadowRoot ? getNestedShadowActiveElement(shadowRoot.activeElement.shadowRoot) : shadowRoot.activeElement : void 0;
};
var getActiveElement = function() {
  return document.activeElement ? document.activeElement.shadowRoot ? getNestedShadowActiveElement(document.activeElement.shadowRoot) : document.activeElement : void 0;
};

// node_modules/focus-lock/dist/es2015/focusInside.js
var focusInFrame = function(frame3) {
  return frame3 === document.activeElement;
};
var focusInsideIframe = function(topNode) {
  return Boolean(toArray(topNode.querySelectorAll("iframe")).some(function(node2) {
    return focusInFrame(node2);
  }));
};
var focusInside = function(topNode) {
  var activeElement = document && getActiveElement();
  if (!activeElement || activeElement.dataset && activeElement.dataset.focusGuard) {
    return false;
  }
  return getAllAffectedNodes(topNode).some(function(node2) {
    return contains3(node2, activeElement) || focusInsideIframe(node2);
  });
};

// node_modules/focus-lock/dist/es2015/focusIsHidden.js
var focusIsHidden = function() {
  var activeElement = document && getActiveElement();
  if (!activeElement) {
    return false;
  }
  return toArray(document.querySelectorAll("[".concat(FOCUS_ALLOW, "]"))).some(function(node2) {
    return contains3(node2, activeElement);
  });
};

// node_modules/focus-lock/dist/es2015/utils/correctFocus.js
var findSelectedRadio = function(node2, nodes) {
  return nodes.filter(isRadioElement).filter(function(el) {
    return el.name === node2.name;
  }).filter(function(el) {
    return el.checked;
  })[0] || node2;
};
var correctNode = function(node2, nodes) {
  if (isRadioElement(node2) && node2.name) {
    return findSelectedRadio(node2, nodes);
  }
  return node2;
};
var correctNodes = function(nodes) {
  var resultSet = /* @__PURE__ */ new Set();
  nodes.forEach(function(node2) {
    return resultSet.add(correctNode(node2, nodes));
  });
  return nodes.filter(function(node2) {
    return resultSet.has(node2);
  });
};

// node_modules/focus-lock/dist/es2015/utils/firstFocus.js
var pickFirstFocus = function(nodes) {
  if (nodes[0] && nodes.length > 1) {
    return correctNode(nodes[0], nodes);
  }
  return nodes[0];
};
var pickFocusable = function(nodes, index2) {
  if (nodes.length > 1) {
    return nodes.indexOf(correctNode(nodes[index2], nodes));
  }
  return index2;
};

// node_modules/focus-lock/dist/es2015/solver.js
var NEW_FOCUS = "NEW_FOCUS";
var newFocus = function(innerNodes, outerNodes, activeElement, lastNode) {
  var cnt = innerNodes.length;
  var firstFocus = innerNodes[0];
  var lastFocus = innerNodes[cnt - 1];
  var isOnGuard = isGuard(activeElement);
  if (activeElement && innerNodes.indexOf(activeElement) >= 0) {
    return void 0;
  }
  var activeIndex = activeElement !== void 0 ? outerNodes.indexOf(activeElement) : -1;
  var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;
  var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;
  var indexDiff = activeIndex - lastIndex;
  var firstNodeIndex = outerNodes.indexOf(firstFocus);
  var lastNodeIndex = outerNodes.indexOf(lastFocus);
  var correctedNodes = correctNodes(outerNodes);
  var correctedIndex = activeElement !== void 0 ? correctedNodes.indexOf(activeElement) : -1;
  var correctedIndexDiff = correctedIndex - (lastNode ? correctedNodes.indexOf(lastNode) : activeIndex);
  var returnFirstNode = pickFocusable(innerNodes, 0);
  var returnLastNode = pickFocusable(innerNodes, cnt - 1);
  if (activeIndex === -1 || lastNodeInside === -1) {
    return NEW_FOCUS;
  }
  if (!indexDiff && lastNodeInside >= 0) {
    return lastNodeInside;
  }
  if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnLastNode;
  }
  if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnFirstNode;
  }
  if (indexDiff && Math.abs(correctedIndexDiff) > 1) {
    return lastNodeInside;
  }
  if (activeIndex <= firstNodeIndex) {
    return returnLastNode;
  }
  if (activeIndex > lastNodeIndex) {
    return returnFirstNode;
  }
  if (indexDiff) {
    if (Math.abs(indexDiff) > 1) {
      return lastNodeInside;
    }
    return (cnt + lastNodeInside + indexDiff) % cnt;
  }
  return void 0;
};

// node_modules/focus-lock/dist/es2015/utils/parenting.js
var getParents = function(node2, parents) {
  if (parents === void 0) {
    parents = [];
  }
  parents.push(node2);
  if (node2.parentNode) {
    getParents(node2.parentNode.host || node2.parentNode, parents);
  }
  return parents;
};
var getCommonParent = function(nodeA, nodeB) {
  var parentsA = getParents(nodeA);
  var parentsB = getParents(nodeB);
  for (var i = 0; i < parentsA.length; i += 1) {
    var currentParent = parentsA[i];
    if (parentsB.indexOf(currentParent) >= 0) {
      return currentParent;
    }
  }
  return false;
};
var getTopCommonParent = function(baseActiveElement, leftEntry, rightEntries) {
  var activeElements = asArray(baseActiveElement);
  var leftEntries = asArray(leftEntry);
  var activeElement = activeElements[0];
  var topCommon = false;
  leftEntries.filter(Boolean).forEach(function(entry) {
    topCommon = getCommonParent(topCommon || entry, entry) || topCommon;
    rightEntries.filter(Boolean).forEach(function(subEntry) {
      var common = getCommonParent(activeElement, subEntry);
      if (common) {
        if (!topCommon || contains3(common, topCommon)) {
          topCommon = common;
        } else {
          topCommon = getCommonParent(common, topCommon);
        }
      }
    });
  });
  return topCommon;
};
var allParentAutofocusables = function(entries, visibilityCache) {
  return entries.reduce(function(acc, node2) {
    return acc.concat(parentAutofocusables(node2, visibilityCache));
  }, []);
};

// node_modules/focus-lock/dist/es2015/focusMerge.js
var findAutoFocused = function(autoFocusables) {
  return function(node2) {
    var _a;
    return node2.autofocus || !!((_a = getDataset(node2)) === null || _a === void 0 ? void 0 : _a.autofocus) || autoFocusables.indexOf(node2) >= 0;
  };
};
var reorderNodes = function(srcNodes, dstNodes) {
  var remap = /* @__PURE__ */ new Map();
  dstNodes.forEach(function(entity) {
    return remap.set(entity.node, entity);
  });
  return srcNodes.map(function(node2) {
    return remap.get(node2);
  }).filter(isDefined);
};
var getFocusMerge = function(topNode, lastNode) {
  var activeElement = document && getActiveElement();
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);
  var visibilityCache = /* @__PURE__ */ new Map();
  var anyFocusable = getAllTabbableNodes(entries, visibilityCache);
  var innerElements = getTabbableNodes(entries, visibilityCache).filter(function(_a) {
    var node2 = _a.node;
    return isNotAGuard(node2);
  });
  if (!innerElements[0]) {
    innerElements = anyFocusable;
    if (!innerElements[0]) {
      return void 0;
    }
  }
  var outerNodes = getAllTabbableNodes([commonParent], visibilityCache).map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  var orderedInnerElements = reorderNodes(outerNodes, innerElements);
  var innerNodes = orderedInnerElements.map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  var newId = newFocus(innerNodes, outerNodes, activeElement, lastNode);
  if (newId === NEW_FOCUS) {
    var autoFocusable = filterAutoFocusable(anyFocusable.map(function(_a) {
      var node2 = _a.node;
      return node2;
    })).filter(findAutoFocused(allParentAutofocusables(entries, visibilityCache)));
    return {
      node: autoFocusable && autoFocusable.length ? pickFirstFocus(autoFocusable) : pickFirstFocus(filterAutoFocusable(innerNodes))
    };
  }
  if (newId === void 0) {
    return newId;
  }
  return orderedInnerElements[newId];
};

// node_modules/focus-lock/dist/es2015/focusables.js
var getFocusabledIn = function(topNode) {
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(topNode, topNode, entries);
  var visibilityCache = /* @__PURE__ */ new Map();
  var outerNodes = getTabbableNodes([commonParent], visibilityCache, true);
  var innerElements = getTabbableNodes(entries, visibilityCache).filter(function(_a) {
    var node2 = _a.node;
    return isNotAGuard(node2);
  }).map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  return outerNodes.map(function(_a) {
    var node2 = _a.node, index2 = _a.index;
    return {
      node: node2,
      index: index2,
      lockItem: innerElements.indexOf(node2) >= 0,
      guard: isGuard(node2)
    };
  });
};

// node_modules/focus-lock/dist/es2015/setFocus.js
var focusOn = function(target, focusOptions) {
  if ("focus" in target) {
    target.focus(focusOptions);
  }
  if ("contentWindow" in target && target.contentWindow) {
    target.contentWindow.focus();
  }
};
var guardCount = 0;
var lockDisabled = false;
var setFocus = function(topNode, lastNode, options) {
  if (options === void 0) {
    options = {};
  }
  var focusable = getFocusMerge(topNode, lastNode);
  if (lockDisabled) {
    return;
  }
  if (focusable) {
    if (guardCount > 2) {
      console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting");
      lockDisabled = true;
      setTimeout(function() {
        lockDisabled = false;
      }, 1);
      return;
    }
    guardCount++;
    focusOn(focusable.node, options.focusOptions);
    guardCount--;
  }
};

// node_modules/focus-lock/dist/es2015/index.js
var es2015_default = setFocus;

// node_modules/react-focus-lock/dist/es2015/util.js
function deferAction(action) {
  var _window = window, setImmediate = _window.setImmediate;
  if (typeof setImmediate !== "undefined") {
    setImmediate(action);
  } else {
    setTimeout(action, 1);
  }
}
var inlineProp = function inlineProp2(name, value) {
  var obj = {};
  obj[name] = value;
  return obj;
};

// node_modules/react-focus-lock/dist/es2015/Trap.js
var focusOnBody = function focusOnBody2() {
  return document && document.activeElement === document.body;
};
var isFreeFocus = function isFreeFocus2() {
  return focusOnBody() || focusIsHidden();
};
var lastActiveTrap = null;
var lastActiveFocus = null;
var lastPortaledElement = null;
var focusWasOutsideWindow = false;
var defaultWhitelist = function defaultWhitelist2() {
  return true;
};
var focusWhitelisted = function focusWhitelisted2(activeElement) {
  return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
};
var recordPortal = function recordPortal2(observerNode, portaledElement) {
  lastPortaledElement = {
    observerNode,
    portaledElement
  };
};
var focusIsPortaledPair = function focusIsPortaledPair2(element) {
  return lastPortaledElement && lastPortaledElement.portaledElement === element;
};
function autoGuard(startIndex, end2, step, allNodes) {
  var lastGuard = null;
  var i = startIndex;
  do {
    var item = allNodes[i];
    if (item.guard) {
      if (item.node.dataset.focusAutoGuard) {
        lastGuard = item;
      }
    } else if (item.lockItem) {
      if (i !== startIndex) {
        return;
      }
      lastGuard = null;
    } else {
      break;
    }
  } while ((i += step) !== end2);
  if (lastGuard) {
    lastGuard.node.tabIndex = 0;
  }
}
var extractRef = function extractRef2(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var focusWasOutside = function focusWasOutside2(crossFrameOption) {
  if (crossFrameOption) {
    return Boolean(focusWasOutsideWindow);
  }
  return focusWasOutsideWindow === "meanwhile";
};
var checkInHost = function checkInHost2(check, el, boundary) {
  return el && (el.host === check && (!el.activeElement || boundary.contains(el.activeElement)) || el.parentNode && checkInHost2(check, el.parentNode, boundary));
};
var withinHost = function withinHost2(activeElement, workingArea) {
  return workingArea.some(function(area) {
    return checkInHost(activeElement, area, area);
  });
};
var activateTrap = function activateTrap2() {
  var result = false;
  if (lastActiveTrap) {
    var _lastActiveTrap = lastActiveTrap, observed = _lastActiveTrap.observed, persistentFocus = _lastActiveTrap.persistentFocus, autoFocus = _lastActiveTrap.autoFocus, shards = _lastActiveTrap.shards, crossFrame = _lastActiveTrap.crossFrame, focusOptions = _lastActiveTrap.focusOptions;
    var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
    var activeElement = document && document.activeElement;
    if (workingNode) {
      var workingArea = [workingNode].concat(shards.map(extractRef).filter(Boolean));
      if (!activeElement || focusWhitelisted(activeElement)) {
        if (persistentFocus || focusWasOutside(crossFrame) || !isFreeFocus() || !lastActiveFocus && autoFocus) {
          if (workingNode && !(focusInside(workingArea) || activeElement && withinHost(activeElement, workingArea) || focusIsPortaledPair(activeElement, workingNode))) {
            if (document && !lastActiveFocus && activeElement && !autoFocus) {
              if (activeElement.blur) {
                activeElement.blur();
              }
              document.body.focus();
            } else {
              result = es2015_default(workingArea, lastActiveFocus, {
                focusOptions
              });
              lastPortaledElement = {};
            }
          }
          focusWasOutsideWindow = false;
          lastActiveFocus = document && document.activeElement;
        }
      }
      if (document) {
        var newActiveElement = document && document.activeElement;
        var allNodes = getFocusabledIn(workingArea);
        var focusedIndex = allNodes.map(function(_ref2) {
          var node2 = _ref2.node;
          return node2;
        }).indexOf(newActiveElement);
        if (focusedIndex > -1) {
          allNodes.filter(function(_ref2) {
            var guard = _ref2.guard, node2 = _ref2.node;
            return guard && node2.dataset.focusAutoGuard;
          }).forEach(function(_ref3) {
            var node2 = _ref3.node;
            return node2.removeAttribute("tabIndex");
          });
          autoGuard(focusedIndex, allNodes.length, 1, allNodes);
          autoGuard(focusedIndex, -1, -1, allNodes);
        }
      }
    }
  }
  return result;
};
var onTrap = function onTrap2(event) {
  if (activateTrap() && event) {
    event.stopPropagation();
    event.preventDefault();
  }
};
var onBlur = function onBlur2() {
  return deferAction(activateTrap);
};
var onFocus = function onFocus2(event) {
  var source = event.target;
  var currentNode = event.currentTarget;
  if (!currentNode.contains(source)) {
    recordPortal(currentNode, source);
  }
};
var FocusWatcher = function FocusWatcher2() {
  return null;
};
var FocusTrap = function FocusTrap2(_ref4) {
  var children = _ref4.children;
  return React42.createElement("div", {
    onBlur,
    onFocus
  }, children);
};
FocusTrap.propTypes = true ? {
  children: import_prop_types3.default.node.isRequired
} : {};
var onWindowBlur2 = function onWindowBlur3() {
  focusWasOutsideWindow = "just";
  setTimeout(function() {
    focusWasOutsideWindow = "meanwhile";
  }, 0);
};
var attachHandler = function attachHandler2() {
  document.addEventListener("focusin", onTrap);
  document.addEventListener("focusout", onBlur);
  window.addEventListener("blur", onWindowBlur2);
};
var detachHandler = function detachHandler2() {
  document.removeEventListener("focusin", onTrap);
  document.removeEventListener("focusout", onBlur);
  window.removeEventListener("blur", onWindowBlur2);
};
function reducePropsToState(propsList) {
  return propsList.filter(function(_ref5) {
    var disabled = _ref5.disabled;
    return !disabled;
  });
}
function handleStateChangeOnClient(traps) {
  var trap = traps.slice(-1)[0];
  if (trap && !lastActiveTrap) {
    attachHandler();
  }
  var lastTrap = lastActiveTrap;
  var sameTrap = lastTrap && trap && trap.id === lastTrap.id;
  lastActiveTrap = trap;
  if (lastTrap && !sameTrap) {
    lastTrap.onDeactivation();
    if (!traps.filter(function(_ref6) {
      var id2 = _ref6.id;
      return id2 === lastTrap.id;
    }).length) {
      lastTrap.returnFocus(!trap);
    }
  }
  if (trap) {
    lastActiveFocus = null;
    if (!sameTrap || lastTrap.observed !== trap.observed) {
      trap.onActivation();
    }
    activateTrap(true);
    deferAction(activateTrap);
  } else {
    detachHandler();
    lastActiveFocus = null;
  }
}
mediumFocus.assignSyncMedium(onFocus);
mediumBlur.assignMedium(onBlur);
mediumEffect.assignMedium(function(cb2) {
  return cb2({
    moveFocusInside: es2015_default,
    focusInside
  });
});
var Trap_default = index_es_default(reducePropsToState, handleStateChangeOnClient)(FocusWatcher);

// node_modules/react-focus-lock/dist/es2015/Combination.js
var FocusLockCombination = React43.forwardRef(function FocusLockUICombination(props, ref) {
  return React43.createElement(Lock_default, _extends({
    sideCar: Trap_default,
    ref
  }, props));
});
var _ref = Lock_default.propTypes || {};
var sideCar = _ref.sideCar;
var propTypes = _objectWithoutPropertiesLoose21(_ref, ["sideCar"]);
FocusLockCombination.propTypes = true ? propTypes : {};
var Combination_default = FocusLockCombination;

// node_modules/react-focus-lock/dist/es2015/AutoFocusInside.js
var React44 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
var AutoFocusInside = function AutoFocusInside2(_ref2) {
  var disabled = _ref2.disabled, children = _ref2.children, className = _ref2.className;
  return React44.createElement("div", _extends({}, inlineProp(FOCUS_AUTO, !disabled), {
    className
  }), children);
};
AutoFocusInside.propTypes = true ? {
  children: import_prop_types4.default.node.isRequired,
  disabled: import_prop_types4.default.bool,
  className: import_prop_types4.default.string
} : {};
AutoFocusInside.defaultProps = {
  disabled: false,
  className: void 0
};

// node_modules/react-focus-lock/dist/es2015/MoveFocusInside.js
var React45 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
var useFocusInside = function useFocusInside2(observedRef) {
  React45.useEffect(function() {
    var enabled = true;
    mediumEffect.useMedium(function(car) {
      var observed = observedRef && observedRef.current;
      if (enabled && observed) {
        if (!car.focusInside(observed)) {
          car.moveFocusInside(observed, null);
        }
      }
    });
    return function() {
      enabled = false;
    };
  }, [observedRef]);
};
function MoveFocusInside(_ref2) {
  var isDisabled = _ref2.disabled, className = _ref2.className, children = _ref2.children;
  var ref = React45.useRef(null);
  useFocusInside(isDisabled ? void 0 : ref);
  return React45.createElement("div", _extends({}, inlineProp(FOCUS_AUTO, !isDisabled), {
    ref,
    className
  }), children);
}
MoveFocusInside.propTypes = true ? {
  children: import_prop_types5.default.node.isRequired,
  disabled: import_prop_types5.default.bool,
  className: import_prop_types5.default.string
} : {};
MoveFocusInside.defaultProps = {
  disabled: false,
  className: void 0
};

// node_modules/react-focus-lock/dist/es2015/FreeFocusInside.js
var React46 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var FreeFocusInside = function FreeFocusInside2(_ref2) {
  var children = _ref2.children, className = _ref2.className;
  return React46.createElement("div", _extends({}, inlineProp(FOCUS_ALLOW, true), {
    className
  }), children);
};
FreeFocusInside.propTypes = true ? {
  children: import_prop_types6.default.node.isRequired,
  className: import_prop_types6.default.string
} : {};
FreeFocusInside.defaultProps = {
  className: void 0
};

// node_modules/react-focus-lock/dist/es2015/index.js
var es2015_default2 = Combination_default;

// node_modules/@chakra-ui/focus-lock/dist/chakra-ui-focus-lock.esm.js
var FocusLock2 = function FocusLock3(props) {
  var initialFocusRef = props.initialFocusRef, finalFocusRef = props.finalFocusRef, contentRef = props.contentRef, restoreFocus = props.restoreFocus, children = props.children, isDisabled = props.isDisabled, autoFocus = props.autoFocus, persistentFocus = props.persistentFocus, lockFocusAcrossFrames = props.lockFocusAcrossFrames;
  var onActivation = React47.useCallback(function() {
    if (initialFocusRef != null && initialFocusRef.current) {
      initialFocusRef.current.focus();
    } else if (contentRef != null && contentRef.current) {
      var focusables = getAllFocusable(contentRef.current);
      if (focusables.length === 0) {
        focus(contentRef.current, {
          nextTick: true
        });
      }
    }
  }, [initialFocusRef, contentRef]);
  var onDeactivation = React47.useCallback(function() {
    var _finalFocusRef$curren;
    finalFocusRef == null ? void 0 : (_finalFocusRef$curren = finalFocusRef.current) == null ? void 0 : _finalFocusRef$curren.focus();
  }, [finalFocusRef]);
  var returnFocus = restoreFocus && !finalFocusRef;
  return React47.createElement(es2015_default2, {
    crossFrame: lockFocusAcrossFrames,
    persistentFocus,
    autoFocus,
    disabled: isDisabled,
    onActivation,
    onDeactivation,
    returnFocus
  }, children);
};
if (__DEV__) {
  FocusLock2.displayName = "FocusLock";
}

// node_modules/@chakra-ui/modal/dist/chakra-ui-modal.esm.js
var React53 = __toESM(require_react());
var import_react67 = __toESM(require_react());

// node_modules/react-remove-scroll/node_modules/tslib/tslib.es6.js
var __assign3 = function() {
  __assign3 = Object.assign || function __assign4(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
function __rest5(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __spreadArray2(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var React52 = __toESM(require_react());

// node_modules/react-remove-scroll/dist/es2015/UI.js
var React48 = __toESM(require_react());

// node_modules/react-remove-scroll-bar/dist/es2015/constants.js
var zeroRightClassName = "right-scroll-bar-position";
var fullWidthClassName = "width-before-scroll-bar";
var noScrollbarsClassName = "with-scroll-bars-hidden";
var removedBarSizeVariable = "--removed-body-scroll-bar-size";

// node_modules/react-remove-scroll/dist/es2015/medium.js
var effectCar = createSidecarMedium();

// node_modules/react-remove-scroll/dist/es2015/UI.js
var nothing = function() {
  return;
};
var RemoveScroll = React48.forwardRef(function(props, parentRef) {
  var ref = React48.useRef(null);
  var _a = React48.useState({
    onScrollCapture: nothing,
    onWheelCapture: nothing,
    onTouchMoveCapture: nothing
  }), callbacks = _a[0], setCallbacks = _a[1];
  var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar2 = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container5 = _b === void 0 ? "div" : _b, rest = __rest5(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]);
  var SideCar2 = sideCar2;
  var containerRef = useMergeRefs2([ref, parentRef]);
  var containerProps = __assign3(__assign3({}, rest), callbacks);
  return React48.createElement(React48.Fragment, null, enabled && React48.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref }), forwardProps ? React48.cloneElement(React48.Children.only(children), __assign3(__assign3({}, containerProps), { ref: containerRef })) : React48.createElement(Container5, __assign3({}, containerProps, { className, ref: containerRef }), children));
});
RemoveScroll.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
RemoveScroll.classNames = {
  fullWidth: fullWidthClassName,
  zeroRight: zeroRightClassName
};

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var React51 = __toESM(require_react());

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var React50 = __toESM(require_react());

// node_modules/react-style-singleton/dist/es2015/hook.js
var React49 = __toESM(require_react());

// node_modules/get-nonce/dist/es2015/index.js
var currentNonce;
var getNonce = function() {
  if (currentNonce) {
    return currentNonce;
  }
  if (typeof __webpack_nonce__ !== "undefined") {
    return __webpack_nonce__;
  }
  return void 0;
};

// node_modules/react-style-singleton/dist/es2015/singleton.js
function makeStyleTag() {
  if (!document)
    return null;
  var tag = document.createElement("style");
  tag.type = "text/css";
  var nonce = getNonce();
  if (nonce) {
    tag.setAttribute("nonce", nonce);
  }
  return tag;
}
function injectStyles(tag, css2) {
  if (tag.styleSheet) {
    tag.styleSheet.cssText = css2;
  } else {
    tag.appendChild(document.createTextNode(css2));
  }
}
function insertStyleTag(tag) {
  var head = document.head || document.getElementsByTagName("head")[0];
  head.appendChild(tag);
}
var stylesheetSingleton = function() {
  var counter3 = 0;
  var stylesheet = null;
  return {
    add: function(style2) {
      if (counter3 == 0) {
        if (stylesheet = makeStyleTag()) {
          injectStyles(stylesheet, style2);
          insertStyleTag(stylesheet);
        }
      }
      counter3++;
    },
    remove: function() {
      counter3--;
      if (!counter3 && stylesheet) {
        stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
        stylesheet = null;
      }
    }
  };
};

// node_modules/react-style-singleton/dist/es2015/hook.js
var styleHookSingleton = function() {
  var sheet = stylesheetSingleton();
  return function(styles2, isDynamic) {
    React49.useEffect(function() {
      sheet.add(styles2);
      return function() {
        sheet.remove();
      };
    }, [styles2 && isDynamic]);
  };
};

// node_modules/react-style-singleton/dist/es2015/component.js
var styleSingleton = function() {
  var useStyle2 = styleHookSingleton();
  var Sheet = function(_a) {
    var styles2 = _a.styles, dynamic = _a.dynamic;
    useStyle2(styles2, dynamic);
    return null;
  };
  return Sheet;
};

// node_modules/react-remove-scroll-bar/dist/es2015/utils.js
var zeroGap = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0
};
var parse3 = function(x) {
  return parseInt(x || "", 10) || 0;
};
var getOffset = function(gapMode) {
  var cs = window.getComputedStyle(document.body);
  if (true) {
    if (cs.overflowY === "hidden") {
      console.error("react-remove-scroll-bar: cannot calculate scrollbar size because it is removed (overflow:hidden on body");
    }
  }
  var left2 = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
  var top2 = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
  var right2 = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
  return [parse3(left2), parse3(top2), parse3(right2)];
};
var getGapWidth = function(gapMode) {
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  if (typeof window === "undefined") {
    return zeroGap;
  }
  var offsets = getOffset(gapMode);
  var documentWidth = document.documentElement.clientWidth;
  var windowWidth = window.innerWidth;
  return {
    left: offsets[0],
    top: offsets[1],
    right: offsets[2],
    gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
  };
};

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var Style = styleSingleton();
var getStyles = function(_a, allowRelative, gapMode, important) {
  var left2 = _a.left, top2 = _a.top, right2 = _a.right, gap = _a.gap;
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
    allowRelative && "position: relative ".concat(important, ";"),
    gapMode === "margin" && "\n    padding-left: ".concat(left2, "px;\n    padding-top: ").concat(top2, "px;\n    padding-right: ").concat(right2, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
    gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
  ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
};
var RemoveScrollBar = function(props) {
  var noRelative = props.noRelative, noImportant = props.noImportant, _a = props.gapMode, gapMode = _a === void 0 ? "margin" : _a;
  var gap = React50.useMemo(function() {
    return getGapWidth(gapMode);
  }, [gapMode]);
  return React50.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
};

// node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
var passiveSupported = false;
if (typeof window !== "undefined") {
  try {
    options = Object.defineProperty({}, "passive", {
      get: function() {
        passiveSupported = true;
        return true;
      }
    });
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, options);
  } catch (err) {
    passiveSupported = false;
  }
}
var options;
var nonPassive = passiveSupported ? { passive: false } : false;

// node_modules/react-remove-scroll/dist/es2015/handleScroll.js
var alwaysContainsScroll = function(node2) {
  return node2.tagName === "TEXTAREA";
};
var elementCanBeScrolled = function(node2, overflow) {
  var styles2 = window.getComputedStyle(node2);
  return styles2[overflow] !== "hidden" && !(styles2.overflowY === styles2.overflowX && !alwaysContainsScroll(node2) && styles2[overflow] === "visible");
};
var elementCouldBeVScrolled = function(node2) {
  return elementCanBeScrolled(node2, "overflowY");
};
var elementCouldBeHScrolled = function(node2) {
  return elementCanBeScrolled(node2, "overflowX");
};
var locationCouldBeScrolled = function(axis, node2) {
  var current = node2;
  do {
    if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
      current = current.host;
    }
    var isScrollable = elementCouldBeScrolled(axis, current);
    if (isScrollable) {
      var _a = getScrollVariables(axis, current), s = _a[1], d = _a[2];
      if (s > d) {
        return true;
      }
    }
    current = current.parentNode;
  } while (current && current !== document.body);
  return false;
};
var getVScrollVariables = function(_a) {
  var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
  return [
    scrollTop,
    scrollHeight,
    clientHeight
  ];
};
var getHScrollVariables = function(_a) {
  var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
  return [
    scrollLeft,
    scrollWidth,
    clientWidth
  ];
};
var elementCouldBeScrolled = function(axis, node2) {
  return axis === "v" ? elementCouldBeVScrolled(node2) : elementCouldBeHScrolled(node2);
};
var getScrollVariables = function(axis, node2) {
  return axis === "v" ? getVScrollVariables(node2) : getHScrollVariables(node2);
};
var getDirectionFactor = function(axis, direction2) {
  return axis === "h" && direction2 === "rtl" ? -1 : 1;
};
var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
  var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
  var delta = directionFactor * sourceDelta;
  var target = event.target;
  var targetInLock = endTarget.contains(target);
  var shouldCancelScroll = false;
  var isDeltaPositive = delta > 0;
  var availableScroll = 0;
  var availableScrollTop = 0;
  do {
    var _a = getScrollVariables(axis, target), position2 = _a[0], scroll_1 = _a[1], capacity = _a[2];
    var elementScroll = scroll_1 - capacity - directionFactor * position2;
    if (position2 || elementScroll) {
      if (elementCouldBeScrolled(axis, target)) {
        availableScroll += elementScroll;
        availableScrollTop += position2;
      }
    }
    target = target.parentNode;
  } while (!targetInLock && target !== document.body || targetInLock && (endTarget.contains(target) || endTarget === target));
  if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) {
    shouldCancelScroll = true;
  } else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) {
    shouldCancelScroll = true;
  }
  return shouldCancelScroll;
};

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var getTouchXY = function(event) {
  return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
};
var getDeltaXY = function(event) {
  return [event.deltaX, event.deltaY];
};
var extractRef3 = function(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare = function(x, y) {
  return x[0] === y[0] && x[1] === y[1];
};
var generateStyle = function(id2) {
  return "\n  .block-interactivity-".concat(id2, " {pointer-events: none;}\n  .allow-interactivity-").concat(id2, " {pointer-events: all;}\n");
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
  var shouldPreventQueue = React51.useRef([]);
  var touchStartRef = React51.useRef([0, 0]);
  var activeAxis = React51.useRef();
  var id2 = React51.useState(idCounter++)[0];
  var Style2 = React51.useState(function() {
    return styleSingleton();
  })[0];
  var lastProps = React51.useRef(props);
  React51.useEffect(function() {
    lastProps.current = props;
  }, [props]);
  React51.useEffect(function() {
    if (props.inert) {
      document.body.classList.add("block-interactivity-".concat(id2));
      var allow_1 = __spreadArray2([props.lockRef.current], (props.shards || []).map(extractRef3), true).filter(Boolean);
      allow_1.forEach(function(el) {
        return el.classList.add("allow-interactivity-".concat(id2));
      });
      return function() {
        document.body.classList.remove("block-interactivity-".concat(id2));
        allow_1.forEach(function(el) {
          return el.classList.remove("allow-interactivity-".concat(id2));
        });
      };
    }
    return;
  }, [props.inert, props.lockRef.current, props.shards]);
  var shouldCancelEvent = React51.useCallback(function(event, parent) {
    if ("touches" in event && event.touches.length === 2) {
      return !lastProps.current.allowPinchZoom;
    }
    var touch = getTouchXY(event);
    var touchStart = touchStartRef.current;
    var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
    var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
    var currentAxis;
    var target = event.target;
    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
    if ("touches" in event && moveDirection === "h" && target.type === "range") {
      return false;
    }
    var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    if (!canBeScrolledInMainDirection) {
      return true;
    }
    if (canBeScrolledInMainDirection) {
      currentAxis = moveDirection;
    } else {
      currentAxis = moveDirection === "v" ? "h" : "v";
      canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    }
    if (!canBeScrolledInMainDirection) {
      return false;
    }
    if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
      activeAxis.current = currentAxis;
    }
    if (!currentAxis) {
      return true;
    }
    var cancelingAxis = activeAxis.current || currentAxis;
    return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
  }, []);
  var shouldPrevent = React51.useCallback(function(_event) {
    var event = _event;
    if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
      return;
    }
    var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
    var sourceEvent = shouldPreventQueue.current.filter(function(e) {
      return e.name === event.type && e.target === event.target && deltaCompare(e.delta, delta);
    })[0];
    if (sourceEvent && sourceEvent.should) {
      if (event.cancelable) {
        event.preventDefault();
      }
      return;
    }
    if (!sourceEvent) {
      var shardNodes = (lastProps.current.shards || []).map(extractRef3).filter(Boolean).filter(function(node2) {
        return node2.contains(event.target);
      });
      var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
      if (shouldStop) {
        if (event.cancelable) {
          event.preventDefault();
        }
      }
    }
  }, []);
  var shouldCancel = React51.useCallback(function(name, delta, target, should) {
    var event = { name, delta, target, should };
    shouldPreventQueue.current.push(event);
    setTimeout(function() {
      shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
        return e !== event;
      });
    }, 1);
  }, []);
  var scrollTouchStart = React51.useCallback(function(event) {
    touchStartRef.current = getTouchXY(event);
    activeAxis.current = void 0;
  }, []);
  var scrollWheel = React51.useCallback(function(event) {
    shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  var scrollTouchMove = React51.useCallback(function(event) {
    shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  React51.useEffect(function() {
    lockStack.push(Style2);
    props.setCallbacks({
      onScrollCapture: scrollWheel,
      onWheelCapture: scrollWheel,
      onTouchMoveCapture: scrollTouchMove
    });
    document.addEventListener("wheel", shouldPrevent, nonPassive);
    document.addEventListener("touchmove", shouldPrevent, nonPassive);
    document.addEventListener("touchstart", scrollTouchStart, nonPassive);
    return function() {
      lockStack = lockStack.filter(function(inst) {
        return inst !== Style2;
      });
      document.removeEventListener("wheel", shouldPrevent, nonPassive);
      document.removeEventListener("touchmove", shouldPrevent, nonPassive);
      document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
    };
  }, []);
  var removeScrollBar = props.removeScrollBar, inert = props.inert;
  return React51.createElement(React51.Fragment, null, inert ? React51.createElement(Style2, { styles: generateStyle(id2) }) : null, removeScrollBar ? React51.createElement(RemoveScrollBar, { gapMode: "margin" }) : null);
}

// node_modules/react-remove-scroll/dist/es2015/sidecar.js
var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var ReactRemoveScroll = React52.forwardRef(function(props, ref) {
  return React52.createElement(RemoveScroll, __assign3({}, props, { ref, sideCar: sidecar_default }));
});
ReactRemoveScroll.classNames = RemoveScroll.classNames;
var Combination_default2 = ReactRemoveScroll;

// node_modules/aria-hidden/dist/es2015/index.js
var getDefaultParent = function(originalTarget) {
  if (typeof document === "undefined") {
    return null;
  }
  var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
  return sampleTarget.ownerDocument.body;
};
var counterMap = /* @__PURE__ */ new WeakMap();
var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
var markerMap = {};
var lockCount = 0;
var hideOthers = function(originalTarget, parentNode, markerName) {
  if (parentNode === void 0) {
    parentNode = getDefaultParent(originalTarget);
  }
  if (markerName === void 0) {
    markerName = "data-aria-hidden";
  }
  var targets = Array.isArray(originalTarget) ? originalTarget : [originalTarget];
  if (!markerMap[markerName]) {
    markerMap[markerName] = /* @__PURE__ */ new WeakMap();
  }
  var markerCounter = markerMap[markerName];
  var hiddenNodes = [];
  var elementsToKeep = /* @__PURE__ */ new Set();
  var keep = function(el) {
    if (!el || elementsToKeep.has(el)) {
      return;
    }
    elementsToKeep.add(el);
    keep(el.parentNode);
  };
  targets.forEach(keep);
  var deep = function(parent) {
    if (!parent || targets.indexOf(parent) >= 0) {
      return;
    }
    Array.prototype.forEach.call(parent.children, function(node2) {
      if (elementsToKeep.has(node2)) {
        deep(node2);
      } else {
        var attr = node2.getAttribute("aria-hidden");
        var alreadyHidden = attr !== null && attr !== "false";
        var counterValue = (counterMap.get(node2) || 0) + 1;
        var markerValue = (markerCounter.get(node2) || 0) + 1;
        counterMap.set(node2, counterValue);
        markerCounter.set(node2, markerValue);
        hiddenNodes.push(node2);
        if (counterValue === 1 && alreadyHidden) {
          uncontrolledNodes.set(node2, true);
        }
        if (markerValue === 1) {
          node2.setAttribute(markerName, "true");
        }
        if (!alreadyHidden) {
          node2.setAttribute("aria-hidden", "true");
        }
      }
    });
  };
  deep(parentNode);
  elementsToKeep.clear();
  lockCount++;
  return function() {
    hiddenNodes.forEach(function(node2) {
      var counterValue = counterMap.get(node2) - 1;
      var markerValue = markerCounter.get(node2) - 1;
      counterMap.set(node2, counterValue);
      markerCounter.set(node2, markerValue);
      if (!counterValue) {
        if (!uncontrolledNodes.has(node2)) {
          node2.removeAttribute("aria-hidden");
        }
        uncontrolledNodes.delete(node2);
      }
      if (!markerValue) {
        node2.removeAttribute(markerName);
      }
    });
    lockCount--;
    if (!lockCount) {
      counterMap = /* @__PURE__ */ new WeakMap();
      counterMap = /* @__PURE__ */ new WeakMap();
      uncontrolledNodes = /* @__PURE__ */ new WeakMap();
      markerMap = {};
    }
  };
};

// node_modules/@chakra-ui/modal/dist/chakra-ui-modal.esm.js
function _objectWithoutPropertiesLoose22(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends26() {
  _extends26 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends26.apply(this, arguments);
}
var _excluded$35 = ["preset"];
var transitions = {
  slideInBottom: _extends26({}, slideFadeConfig, {
    custom: {
      offsetY: 16,
      reverse: true
    }
  }),
  slideInRight: _extends26({}, slideFadeConfig, {
    custom: {
      offsetX: 16,
      reverse: true
    }
  }),
  scale: _extends26({}, scaleFadeConfig, {
    custom: {
      initialScale: 0.95,
      reverse: true
    }
  }),
  none: {}
};
var Motion = chakra(motion.section);
var ModalTransition = React53.forwardRef(function(props, ref) {
  var preset = props.preset, rest = _objectWithoutPropertiesLoose22(props, _excluded$35);
  var motionProps = transitions[preset];
  return React53.createElement(Motion, _extends26({
    ref
  }, motionProps, rest));
});
if (__DEV__) {
  ModalTransition.displayName = "ModalTransition";
}
var ModalManager = function() {
  function ModalManager2() {
    this.modals = void 0;
    this.modals = [];
  }
  var _proto = ModalManager2.prototype;
  _proto.add = function add3(modal) {
    this.modals.push(modal);
  };
  _proto.remove = function remove2(modal) {
    this.modals = this.modals.filter(function(_modal) {
      return _modal !== modal;
    });
  };
  _proto.isTopModal = function isTopModal(modal) {
    var topmostModal = this.modals[this.modals.length - 1];
    return topmostModal === modal;
  };
  return ModalManager2;
}();
var manager = new ModalManager();
function useModalManager(ref, isOpen) {
  (0, import_react67.useEffect)(function() {
    if (isOpen) {
      manager.add(ref);
    }
    return function() {
      manager.remove(ref);
    };
  }, [isOpen, ref]);
}
function useModal(props) {
  var isOpen = props.isOpen, onClose = props.onClose, id2 = props.id, _props$closeOnOverlay = props.closeOnOverlayClick, closeOnOverlayClick = _props$closeOnOverlay === void 0 ? true : _props$closeOnOverlay, _props$closeOnEsc = props.closeOnEsc, closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc, _props$useInert = props.useInert, useInert = _props$useInert === void 0 ? true : _props$useInert, onOverlayClickProp = props.onOverlayClick, onEsc = props.onEsc;
  var dialogRef = (0, import_react67.useRef)(null);
  var overlayRef = (0, import_react67.useRef)(null);
  var _useIds = useIds(id2, "chakra-modal", "chakra-modal--header", "chakra-modal--body"), dialogId = _useIds[0], headerId = _useIds[1], bodyId = _useIds[2];
  useAriaHidden(dialogRef, isOpen && useInert);
  useModalManager(dialogRef, isOpen);
  var mouseDownTarget = (0, import_react67.useRef)(null);
  var onMouseDown = (0, import_react67.useCallback)(function(event) {
    mouseDownTarget.current = event.target;
  }, []);
  var onKeyDown = (0, import_react67.useCallback)(function(event) {
    if (event.key === "Escape") {
      event.stopPropagation();
      if (closeOnEsc) {
        onClose == null ? void 0 : onClose();
      }
      onEsc == null ? void 0 : onEsc();
    }
  }, [closeOnEsc, onClose, onEsc]);
  var _useState = (0, import_react67.useState)(false), headerMounted = _useState[0], setHeaderMounted = _useState[1];
  var _useState2 = (0, import_react67.useState)(false), bodyMounted = _useState2[0], setBodyMounted = _useState2[1];
  var getDialogProps = (0, import_react67.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends26({
      role: "dialog"
    }, props2, {
      ref: mergeRefs(ref, dialogRef),
      id: dialogId,
      tabIndex: -1,
      "aria-modal": true,
      "aria-labelledby": headerMounted ? headerId : void 0,
      "aria-describedby": bodyMounted ? bodyId : void 0,
      onClick: callAllHandlers(props2.onClick, function(event) {
        return event.stopPropagation();
      })
    });
  }, [bodyId, bodyMounted, dialogId, headerId, headerMounted]);
  var onOverlayClick = (0, import_react67.useCallback)(function(event) {
    event.stopPropagation();
    if (mouseDownTarget.current !== event.target)
      return;
    if (!manager.isTopModal(dialogRef))
      return;
    if (closeOnOverlayClick) {
      onClose == null ? void 0 : onClose();
    }
    onOverlayClickProp == null ? void 0 : onOverlayClickProp();
  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);
  var getDialogContainerProps = (0, import_react67.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends26({}, props2, {
      ref: mergeRefs(ref, overlayRef),
      onClick: callAllHandlers(props2.onClick, onOverlayClick),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown)
    });
  }, [onKeyDown, onMouseDown, onOverlayClick]);
  return {
    isOpen,
    onClose,
    headerId,
    bodyId,
    setBodyMounted,
    setHeaderMounted,
    dialogRef,
    overlayRef,
    getDialogProps,
    getDialogContainerProps
  };
}
function useAriaHidden(ref, shouldHide) {
  var currentElement = ref.current;
  (0, import_react67.useEffect)(function() {
    if (!ref.current || !shouldHide)
      return void 0;
    return hideOthers(ref.current);
  }, [shouldHide, ref, currentElement]);
}
var _excluded$27 = ["className", "children", "containerProps"];
var _excluded2$15 = ["className", "transition"];
var _excluded38 = ["className"];
var _excluded45 = ["className"];
var _excluded54 = ["className"];
var _excluded63 = ["onClick", "className"];
var _createStylesContext11 = createStylesContext("Modal");
var StylesProvider12 = _createStylesContext11[0];
var useStyles12 = _createStylesContext11[1];
var useModalStyles = useStyles12;
var _createContext$13 = createContext({
  strict: true,
  name: "ModalContext",
  errorMessage: "useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`"
});
var ModalContextProvider = _createContext$13[0];
var useModalContext = _createContext$13[1];
var Modal2 = function Modal3(props) {
  var portalProps = props.portalProps, children = props.children, autoFocus = props.autoFocus, trapFocus = props.trapFocus, initialFocusRef = props.initialFocusRef, finalFocusRef = props.finalFocusRef, returnFocusOnClose = props.returnFocusOnClose, blockScrollOnMount = props.blockScrollOnMount, allowPinchZoom = props.allowPinchZoom, preserveScrollBarGap = props.preserveScrollBarGap, motionPreset = props.motionPreset, lockFocusAcrossFrames = props.lockFocusAcrossFrames, onCloseComplete = props.onCloseComplete;
  var styles2 = useMultiStyleConfig("Modal", props);
  var modal = useModal(props);
  var context = _extends26({}, modal, {
    autoFocus,
    trapFocus,
    initialFocusRef,
    finalFocusRef,
    returnFocusOnClose,
    blockScrollOnMount,
    allowPinchZoom,
    preserveScrollBarGap,
    motionPreset,
    lockFocusAcrossFrames
  });
  return React53.createElement(ModalContextProvider, {
    value: context
  }, React53.createElement(StylesProvider12, {
    value: styles2
  }, React53.createElement(AnimatePresence, {
    onExitComplete: onCloseComplete
  }, context.isOpen && React53.createElement(Portal, portalProps, children))));
};
Modal2.defaultProps = {
  lockFocusAcrossFrames: true,
  returnFocusOnClose: true,
  scrollBehavior: "outside",
  trapFocus: true,
  autoFocus: true,
  blockScrollOnMount: true,
  allowPinchZoom: false,
  motionPreset: "scale"
};
if (__DEV__) {
  Modal2.displayName = "Modal";
}
var MotionDiv = chakra(motion.div);
var ModalContent = forwardRef(function(props, ref) {
  var className = props.className, children = props.children, rootProps = props.containerProps, rest = _objectWithoutPropertiesLoose22(props, _excluded$27);
  var _useModalContext = useModalContext(), getDialogProps = _useModalContext.getDialogProps, getDialogContainerProps = _useModalContext.getDialogContainerProps;
  var dialogProps = getDialogProps(rest, ref);
  var containerProps = getDialogContainerProps(rootProps);
  var _className = cx("chakra-modal__content", className);
  var styles2 = useStyles12();
  var dialogStyles = _extends26({
    display: "flex",
    flexDirection: "column",
    position: "relative",
    width: "100%",
    outline: 0
  }, styles2.dialog);
  var dialogContainerStyles = _extends26({
    display: "flex",
    width: "100vw",
    height: "100vh",
    "@supports(height: -webkit-fill-available)": {
      height: "-webkit-fill-available"
    },
    position: "fixed",
    left: 0,
    top: 0
  }, styles2.dialogContainer);
  var _useModalContext2 = useModalContext(), motionPreset = _useModalContext2.motionPreset;
  return React53.createElement(ModalFocusScope, null, React53.createElement(chakra.div, _extends26({}, containerProps, {
    className: "chakra-modal__content-container",
    tabIndex: -1,
    __css: dialogContainerStyles
  }), React53.createElement(ModalTransition, _extends26({
    preset: motionPreset,
    className: _className
  }, dialogProps, {
    __css: dialogStyles
  }), children)));
});
if (__DEV__) {
  ModalContent.displayName = "ModalContent";
}
function ModalFocusScope(props) {
  var _useModalContext3 = useModalContext(), autoFocus = _useModalContext3.autoFocus, trapFocus = _useModalContext3.trapFocus, dialogRef = _useModalContext3.dialogRef, initialFocusRef = _useModalContext3.initialFocusRef, blockScrollOnMount = _useModalContext3.blockScrollOnMount, allowPinchZoom = _useModalContext3.allowPinchZoom, finalFocusRef = _useModalContext3.finalFocusRef, returnFocusOnClose = _useModalContext3.returnFocusOnClose, preserveScrollBarGap = _useModalContext3.preserveScrollBarGap, lockFocusAcrossFrames = _useModalContext3.lockFocusAcrossFrames;
  var _usePresence = usePresence(), isPresent2 = _usePresence[0], safeToRemove = _usePresence[1];
  React53.useEffect(function() {
    if (!isPresent2 && safeToRemove) {
      setTimeout(safeToRemove);
    }
  }, [isPresent2, safeToRemove]);
  return React53.createElement(FocusLock2, {
    autoFocus,
    isDisabled: !trapFocus,
    initialFocusRef,
    finalFocusRef,
    restoreFocus: returnFocusOnClose,
    contentRef: dialogRef,
    lockFocusAcrossFrames
  }, React53.createElement(Combination_default2, {
    removeScrollBar: !preserveScrollBarGap,
    allowPinchZoom,
    enabled: blockScrollOnMount,
    forwardProps: true
  }, props.children));
}
var ModalOverlay = forwardRef(function(props, ref) {
  var className = props.className;
  props.transition;
  var rest = _objectWithoutPropertiesLoose22(props, _excluded2$15);
  var _className = cx("chakra-modal__overlay", className);
  var styles2 = useStyles12();
  var overlayStyle = _extends26({
    pos: "fixed",
    left: "0",
    top: "0",
    w: "100vw",
    h: "100vh"
  }, styles2.overlay);
  var _useModalContext4 = useModalContext(), motionPreset = _useModalContext4.motionPreset;
  var motionProps = motionPreset === "none" ? {} : fadeConfig;
  return React53.createElement(MotionDiv, _extends26({}, motionProps, {
    __css: overlayStyle,
    ref,
    className: _className
  }, rest));
});
if (__DEV__) {
  ModalOverlay.displayName = "ModalOverlay";
}
var ModalHeader = forwardRef(function(props, ref) {
  var className = props.className, rest = _objectWithoutPropertiesLoose22(props, _excluded38);
  var _useModalContext5 = useModalContext(), headerId = _useModalContext5.headerId, setHeaderMounted = _useModalContext5.setHeaderMounted;
  React53.useEffect(function() {
    setHeaderMounted(true);
    return function() {
      return setHeaderMounted(false);
    };
  }, [setHeaderMounted]);
  var _className = cx("chakra-modal__header", className);
  var styles2 = useStyles12();
  var headerStyles = _extends26({
    flex: 0
  }, styles2.header);
  return React53.createElement(chakra.header, _extends26({
    ref,
    className: _className,
    id: headerId
  }, rest, {
    __css: headerStyles
  }));
});
if (__DEV__) {
  ModalHeader.displayName = "ModalHeader";
}
var ModalBody = forwardRef(function(props, ref) {
  var className = props.className, rest = _objectWithoutPropertiesLoose22(props, _excluded45);
  var _useModalContext6 = useModalContext(), bodyId = _useModalContext6.bodyId, setBodyMounted = _useModalContext6.setBodyMounted;
  React53.useEffect(function() {
    setBodyMounted(true);
    return function() {
      return setBodyMounted(false);
    };
  }, [setBodyMounted]);
  var _className = cx("chakra-modal__body", className);
  var styles2 = useStyles12();
  return React53.createElement(chakra.div, _extends26({
    ref,
    className: _className,
    id: bodyId
  }, rest, {
    __css: styles2.body
  }));
});
if (__DEV__) {
  ModalBody.displayName = "ModalBody";
}
var ModalFooter = forwardRef(function(props, ref) {
  var className = props.className, rest = _objectWithoutPropertiesLoose22(props, _excluded54);
  var _className = cx("chakra-modal__footer", className);
  var styles2 = useStyles12();
  var footerStyles = _extends26({
    display: "flex",
    alignItems: "center",
    justifyContent: "flex-end"
  }, styles2.footer);
  return React53.createElement(chakra.footer, _extends26({
    ref
  }, rest, {
    __css: footerStyles,
    className: _className
  }));
});
if (__DEV__) {
  ModalFooter.displayName = "ModalFooter";
}
var ModalCloseButton = forwardRef(function(props, ref) {
  var onClick = props.onClick, className = props.className, rest = _objectWithoutPropertiesLoose22(props, _excluded63);
  var _useModalContext7 = useModalContext(), onClose = _useModalContext7.onClose;
  var _className = cx("chakra-modal__close-btn", className);
  var styles2 = useStyles12();
  return React53.createElement(CloseButton2, _extends26({
    ref,
    __css: styles2.closeButton,
    className: _className,
    onClick: callAllHandlers(onClick, function(event) {
      event.stopPropagation();
      onClose();
    })
  }, rest));
});
if (__DEV__) {
  ModalCloseButton.displayName = "ModalCloseButton";
}
var _excluded$111 = ["leastDestructiveRef"];
function AlertDialog(props) {
  var leastDestructiveRef = props.leastDestructiveRef, rest = _objectWithoutPropertiesLoose22(props, _excluded$111);
  return React53.createElement(Modal2, _extends26({}, rest, {
    initialFocusRef: leastDestructiveRef
  }));
}
var AlertDialogContent = forwardRef(function(props, ref) {
  return React53.createElement(ModalContent, _extends26({
    ref,
    role: "alertdialog"
  }, props));
});
var _excluded21 = ["isOpen", "onClose", "placement", "children"];
var _excluded211 = ["className", "children"];
var _createContext10 = createContext();
var DrawerContextProvider = _createContext10[0];
var useDrawerContext = _createContext10[1];
var placementMap = {
  start: {
    ltr: "left",
    rtl: "right"
  },
  end: {
    ltr: "right",
    rtl: "left"
  }
};
function getDrawerPlacement(placement, dir) {
  var _placementMap$placeme, _placementMap$placeme2;
  if (!placement)
    return;
  return (_placementMap$placeme = (_placementMap$placeme2 = placementMap[placement]) == null ? void 0 : _placementMap$placeme2[dir]) != null ? _placementMap$placeme : placement;
}
function Drawer2(props) {
  var _theme$components;
  var isOpen = props.isOpen, onClose = props.onClose, _props$placement = props.placement, placementProp = _props$placement === void 0 ? "right" : _props$placement, children = props.children, rest = _objectWithoutPropertiesLoose22(props, _excluded21);
  var theme2 = useTheme();
  var drawerStyleConfig = (_theme$components = theme2.components) == null ? void 0 : _theme$components.Drawer;
  var placement = getDrawerPlacement(placementProp, theme2.direction);
  return React53.createElement(DrawerContextProvider, {
    value: {
      placement
    }
  }, React53.createElement(Modal2, _extends26({
    isOpen,
    onClose,
    styleConfig: drawerStyleConfig
  }, rest), children));
}
var StyledSlide = chakra(Slide);
var DrawerContent = forwardRef(function(props, ref) {
  var className = props.className, children = props.children, rest = _objectWithoutPropertiesLoose22(props, _excluded211);
  var _useModalContext = useModalContext(), getDialogProps = _useModalContext.getDialogProps, getDialogContainerProps = _useModalContext.getDialogContainerProps, isOpen = _useModalContext.isOpen;
  var dialogProps = getDialogProps(rest, ref);
  var containerProps = getDialogContainerProps();
  var _className = cx("chakra-modal__content", className);
  var styles2 = useModalStyles();
  var dialogStyles = _extends26({
    display: "flex",
    flexDirection: "column",
    position: "relative",
    width: "100%",
    outline: 0
  }, styles2.dialog);
  var dialogContainerStyles = _extends26({
    display: "flex",
    width: "100vw",
    height: "100vh",
    position: "fixed",
    left: 0,
    top: 0
  }, styles2.dialogContainer);
  var _useDrawerContext = useDrawerContext(), placement = _useDrawerContext.placement;
  return React53.createElement(chakra.div, _extends26({}, containerProps, {
    className: "chakra-modal__content-container",
    __css: dialogContainerStyles
  }), React53.createElement(ModalFocusScope, null, React53.createElement(StyledSlide, _extends26({
    direction: placement,
    "in": isOpen,
    className: _className
  }, dialogProps, {
    __css: dialogStyles
  }), children)));
});
if (__DEV__) {
  DrawerContent.displayName = "DrawerContent";
}

// node_modules/@chakra-ui/number-input/dist/chakra-ui-number-input.esm.js
var React54 = __toESM(require_react());
var import_react68 = __toESM(require_react());
function _extends27() {
  _extends27 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends27.apply(this, arguments);
}
function _objectWithoutPropertiesLoose23(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var TriangleDownIcon = function TriangleDownIcon2(props) {
  return React54.createElement(Icon, _extends27({
    viewBox: "0 0 24 24"
  }, props), React54.createElement("path", {
    fill: "currentColor",
    d: "M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
  }));
};
var TriangleUpIcon = function TriangleUpIcon2(props) {
  return React54.createElement(Icon, _extends27({
    viewBox: "0 0 24 24"
  }, props), React54.createElement("path", {
    fill: "currentColor",
    d: "M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z"
  }));
};
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it)
    return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it)
      o = it;
    var i = 0;
    return function() {
      if (i >= o.length)
        return {
          done: true
        };
      return {
        done: false,
        value: o[i++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function useAttributeObserver(ref, attributes, fn6, enabled) {
  React54.useEffect(function() {
    if (!ref.current || !enabled)
      return;
    var win2 = getOwnerWindow(ref.current);
    var attrs = Array.isArray(attributes) ? attributes : [attributes];
    var obs = new win2.MutationObserver(function(changes) {
      for (var _iterator = _createForOfIteratorHelperLoose(changes), _step; !(_step = _iterator()).done; ) {
        var change = _step.value;
        if (change.type === "attributes" && change.attributeName && attrs.includes(change.attributeName)) {
          fn6(change);
        }
      }
    });
    obs.observe(ref.current, {
      attributes: true,
      attributeFilter: attrs
    });
    return function() {
      return obs.disconnect();
    };
  });
}
var CONTINUOUS_CHANGE_INTERVAL = 50;
var CONTINUOUS_CHANGE_DELAY = 300;
function useSpinner(increment, decrement) {
  var _useState = (0, import_react68.useState)(false), isSpinning = _useState[0], setIsSpinning = _useState[1];
  var _useState2 = (0, import_react68.useState)(null), action = _useState2[0], setAction = _useState2[1];
  var _useState3 = (0, import_react68.useState)(true), runOnce = _useState3[0], setRunOnce = _useState3[1];
  var timeoutRef = (0, import_react68.useRef)(null);
  var removeTimeout = function removeTimeout2() {
    return clearTimeout(timeoutRef.current);
  };
  useInterval(function() {
    if (action === "increment") {
      increment();
    }
    if (action === "decrement") {
      decrement();
    }
  }, isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null);
  var up = (0, import_react68.useCallback)(function() {
    if (runOnce) {
      increment();
    }
    timeoutRef.current = setTimeout(function() {
      setRunOnce(false);
      setIsSpinning(true);
      setAction("increment");
    }, CONTINUOUS_CHANGE_DELAY);
  }, [increment, runOnce]);
  var down = (0, import_react68.useCallback)(function() {
    if (runOnce) {
      decrement();
    }
    timeoutRef.current = setTimeout(function() {
      setRunOnce(false);
      setIsSpinning(true);
      setAction("decrement");
    }, CONTINUOUS_CHANGE_DELAY);
  }, [decrement, runOnce]);
  var stop2 = (0, import_react68.useCallback)(function() {
    setRunOnce(true);
    setIsSpinning(false);
    removeTimeout();
  }, []);
  useUnmountEffect(removeTimeout);
  return {
    up,
    down,
    stop: stop2,
    isSpinning
  };
}
var _excluded$112 = ["focusInputOnChange", "clampValueOnBlur", "keepWithinRange", "min", "max", "step", "isReadOnly", "isDisabled", "isRequired", "isInvalid", "pattern", "inputMode", "allowMouseWheel", "id", "onChange", "precision", "name", "aria-describedby", "aria-label", "aria-labelledby", "onFocus", "onBlur", "onInvalid", "getAriaValueText", "isValidCharacter", "format", "parse"];
var FLOATING_POINT_REGEX = /^[Ee0-9+\-.]$/;
function isFloatingPointNumericCharacter(character) {
  return FLOATING_POINT_REGEX.test(character);
}
function isValidNumericKeyboardEvent(event, isValid) {
  if (event.key == null)
    return true;
  var isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
  var isSingleCharacterKey = event.key.length === 1;
  if (!isSingleCharacterKey || isModifierKey)
    return true;
  return isValid(event.key);
}
function useNumberInput(props) {
  if (props === void 0) {
    props = {};
  }
  var _props = props, _props$focusInputOnCh = _props.focusInputOnChange, focusInputOnChange = _props$focusInputOnCh === void 0 ? true : _props$focusInputOnCh, _props$clampValueOnBl = _props.clampValueOnBlur, clampValueOnBlur = _props$clampValueOnBl === void 0 ? true : _props$clampValueOnBl, _props$keepWithinRang = _props.keepWithinRange, keepWithinRange = _props$keepWithinRang === void 0 ? true : _props$keepWithinRang, _props$min = _props.min, min2 = _props$min === void 0 ? minSafeInteger : _props$min, _props$max = _props.max, max2 = _props$max === void 0 ? maxSafeInteger : _props$max, _props$step = _props.step, stepProp = _props$step === void 0 ? 1 : _props$step, isReadOnly = _props.isReadOnly, isDisabled = _props.isDisabled, isRequired = _props.isRequired, isInvalid = _props.isInvalid, _props$pattern = _props.pattern, pattern = _props$pattern === void 0 ? "[0-9]*(.[0-9]+)?" : _props$pattern, _props$inputMode = _props.inputMode, inputMode = _props$inputMode === void 0 ? "decimal" : _props$inputMode, allowMouseWheel = _props.allowMouseWheel, id2 = _props.id;
  _props.onChange;
  _props.precision;
  var name = _props.name, ariaDescBy = _props["aria-describedby"], ariaLabel = _props["aria-label"], ariaLabelledBy = _props["aria-labelledby"], onFocusProp = _props.onFocus, onBlurProp = _props.onBlur, onInvalidProp = _props.onInvalid, getAriaValueTextProp = _props.getAriaValueText, isValidCharacterProp = _props.isValidCharacter, formatValue = _props.format, parseValue = _props.parse, htmlProps = _objectWithoutPropertiesLoose23(_props, _excluded$112);
  var onFocus3 = useCallbackRef(onFocusProp);
  var onBlur3 = useCallbackRef(onBlurProp);
  var onInvalid = useCallbackRef(onInvalidProp);
  var isValidCharacter = useCallbackRef(isValidCharacterProp != null ? isValidCharacterProp : isFloatingPointNumericCharacter);
  var getAriaValueText = useCallbackRef(getAriaValueTextProp);
  var counter3 = useCounter(props);
  var updateFn = counter3.update, incrementFn = counter3.increment, decrementFn = counter3.decrement;
  var _useBoolean = useBoolean(), isFocused = _useBoolean[0], setFocused = _useBoolean[1];
  var isInteractive = !(isReadOnly || isDisabled);
  var inputRef = React54.useRef(null);
  var inputSelectionRef = React54.useRef(null);
  var incrementButtonRef = React54.useRef(null);
  var decrementButtonRef = React54.useRef(null);
  var sanitize2 = React54.useCallback(function(value) {
    return value.split("").filter(isValidCharacter).join("");
  }, [isValidCharacter]);
  var parse4 = React54.useCallback(function(value) {
    var _parseValue;
    return (_parseValue = parseValue == null ? void 0 : parseValue(value)) != null ? _parseValue : value;
  }, [parseValue]);
  var format2 = React54.useCallback(function(value) {
    var _formatValue;
    return ((_formatValue = formatValue == null ? void 0 : formatValue(value)) != null ? _formatValue : value).toString();
  }, [formatValue]);
  useUpdateEffect(function() {
    if (counter3.valueAsNumber > max2) {
      onInvalid == null ? void 0 : onInvalid("rangeOverflow", format2(counter3.value), counter3.valueAsNumber);
    } else if (counter3.valueAsNumber < min2) {
      onInvalid == null ? void 0 : onInvalid("rangeOverflow", format2(counter3.value), counter3.valueAsNumber);
    }
  }, [counter3.valueAsNumber, counter3.value, format2, onInvalid]);
  useSafeLayoutEffect(function() {
    if (!inputRef.current)
      return;
    var notInSync = inputRef.current.value != counter3.value;
    if (notInSync) {
      var parsedInput = parse4(inputRef.current.value);
      counter3.setValue(sanitize2(parsedInput));
    }
  }, [parse4, sanitize2]);
  var increment = React54.useCallback(function(step) {
    if (step === void 0) {
      step = stepProp;
    }
    if (isInteractive) {
      incrementFn(step);
    }
  }, [incrementFn, isInteractive, stepProp]);
  var decrement = React54.useCallback(function(step) {
    if (step === void 0) {
      step = stepProp;
    }
    if (isInteractive) {
      decrementFn(step);
    }
  }, [decrementFn, isInteractive, stepProp]);
  var spinner = useSpinner(increment, decrement);
  useAttributeObserver(incrementButtonRef, "disabled", spinner.stop, spinner.isSpinning);
  useAttributeObserver(decrementButtonRef, "disabled", spinner.stop, spinner.isSpinning);
  var onChange = React54.useCallback(function(event) {
    var evt = event.nativeEvent;
    if (evt.isComposing)
      return;
    var parsedInput = parse4(event.currentTarget.value);
    updateFn(sanitize2(parsedInput));
    inputSelectionRef.current = {
      start: event.currentTarget.selectionStart,
      end: event.currentTarget.selectionEnd
    };
  }, [updateFn, sanitize2, parse4]);
  var _onFocus = React54.useCallback(function(event) {
    var _inputSelectionRef$cu, _event$currentTarget$, _inputSelectionRef$cu2;
    onFocus3 == null ? void 0 : onFocus3(event);
    if (!inputSelectionRef.current)
      return;
    event.target.selectionStart = (_inputSelectionRef$cu = inputSelectionRef.current.start) != null ? _inputSelectionRef$cu : (_event$currentTarget$ = event.currentTarget.value) == null ? void 0 : _event$currentTarget$.length;
    event.currentTarget.selectionEnd = (_inputSelectionRef$cu2 = inputSelectionRef.current.end) != null ? _inputSelectionRef$cu2 : event.currentTarget.selectionStart;
  }, [onFocus3]);
  var onKeyDown = React54.useCallback(function(event) {
    if (event.nativeEvent.isComposing)
      return;
    if (!isValidNumericKeyboardEvent(event, isValidCharacter)) {
      event.preventDefault();
    }
    var stepFactor = getStepFactor(event) * stepProp;
    var eventKey = normalizeEventKey(event);
    var keyMap = {
      ArrowUp: function ArrowUp() {
        return increment(stepFactor);
      },
      ArrowDown: function ArrowDown() {
        return decrement(stepFactor);
      },
      Home: function Home() {
        return updateFn(min2);
      },
      End: function End() {
        return updateFn(max2);
      }
    };
    var action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      action(event);
    }
  }, [isValidCharacter, stepProp, increment, decrement, updateFn, min2, max2]);
  var getStepFactor = function getStepFactor2(event) {
    var ratio = 1;
    if (event.metaKey || event.ctrlKey) {
      ratio = 0.1;
    }
    if (event.shiftKey) {
      ratio = 10;
    }
    return ratio;
  };
  var ariaValueText = React54.useMemo(function() {
    var text = getAriaValueText == null ? void 0 : getAriaValueText(counter3.value);
    if (!isNull(text))
      return text;
    var defaultText = counter3.value.toString();
    return !defaultText ? void 0 : defaultText;
  }, [counter3.value, getAriaValueText]);
  var validateAndClamp = React54.useCallback(function() {
    var next = counter3.value;
    if (next === "")
      return;
    if (counter3.valueAsNumber < min2) {
      next = min2;
    }
    if (counter3.valueAsNumber > max2) {
      next = max2;
    }
    counter3.cast(next);
  }, [counter3, max2, min2]);
  var onInputBlur = React54.useCallback(function() {
    setFocused.off();
    if (clampValueOnBlur) {
      validateAndClamp();
    }
  }, [clampValueOnBlur, setFocused, validateAndClamp]);
  var focusInput = React54.useCallback(function() {
    if (focusInputOnChange) {
      focus(inputRef.current, {
        nextTick: true
      });
    }
  }, [focusInputOnChange]);
  var spinUp = React54.useCallback(function(event) {
    event.preventDefault();
    spinner.up();
    focusInput();
  }, [focusInput, spinner]);
  var spinDown = React54.useCallback(function(event) {
    event.preventDefault();
    spinner.down();
    focusInput();
  }, [focusInput, spinner]);
  useEventListener("wheel", function(event) {
    var doc2 = getOwnerDocument(inputRef.current);
    var isInputFocused = doc2.activeElement === inputRef.current;
    if (!allowMouseWheel || !isInputFocused)
      return;
    event.preventDefault();
    var stepFactor = getStepFactor(event) * stepProp;
    var direction2 = Math.sign(event.deltaY);
    if (direction2 === -1) {
      increment(stepFactor);
    } else if (direction2 === 1) {
      decrement(stepFactor);
    }
  }, inputRef.current, {
    passive: false
  });
  var getIncrementButtonProps = React54.useCallback(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    var disabled = isDisabled || keepWithinRange && counter3.isAtMax;
    return _extends27({}, props2, {
      ref: mergeRefs(ref, incrementButtonRef),
      role: "button",
      tabIndex: -1,
      onPointerDown: callAllHandlers(props2.onPointerDown, function(event) {
        if (!disabled)
          spinUp(event);
      }),
      onPointerLeave: callAllHandlers(props2.onPointerLeave, spinner.stop),
      onPointerUp: callAllHandlers(props2.onPointerUp, spinner.stop),
      disabled,
      "aria-disabled": ariaAttr(disabled)
    });
  }, [counter3.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);
  var getDecrementButtonProps = React54.useCallback(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    var disabled = isDisabled || keepWithinRange && counter3.isAtMin;
    return _extends27({}, props2, {
      ref: mergeRefs(ref, decrementButtonRef),
      role: "button",
      tabIndex: -1,
      onPointerDown: callAllHandlers(props2.onPointerDown, function(event) {
        if (!disabled)
          spinDown(event);
      }),
      onPointerLeave: callAllHandlers(props2.onPointerLeave, spinner.stop),
      onPointerUp: callAllHandlers(props2.onPointerUp, spinner.stop),
      disabled,
      "aria-disabled": ariaAttr(disabled)
    });
  }, [counter3.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);
  var getInputProps = React54.useCallback(function(props2, ref) {
    var _props$readOnly, _props$readOnly2, _props$required, _props$required2;
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends27({
      name,
      inputMode,
      type: "text",
      pattern,
      "aria-labelledby": ariaLabelledBy,
      "aria-label": ariaLabel,
      "aria-describedby": ariaDescBy,
      id: id2,
      disabled: isDisabled
    }, props2, {
      readOnly: (_props$readOnly = props2.readOnly) != null ? _props$readOnly : isReadOnly,
      "aria-readonly": (_props$readOnly2 = props2.readOnly) != null ? _props$readOnly2 : isReadOnly,
      "aria-required": (_props$required = props2.required) != null ? _props$required : isRequired,
      required: (_props$required2 = props2.required) != null ? _props$required2 : isRequired,
      ref: mergeRefs(inputRef, ref),
      value: format2(counter3.value),
      role: "spinbutton",
      "aria-valuemin": min2,
      "aria-valuemax": max2,
      "aria-valuenow": Number.isNaN(counter3.valueAsNumber) ? void 0 : counter3.valueAsNumber,
      "aria-invalid": ariaAttr(isInvalid != null ? isInvalid : counter3.isOutOfRange),
      "aria-valuetext": ariaValueText,
      autoComplete: "off",
      autoCorrect: "off",
      onChange: callAllHandlers(props2.onChange, onChange),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onFocus: callAllHandlers(props2.onFocus, _onFocus, setFocused.on),
      onBlur: callAllHandlers(props2.onBlur, onBlur3, onInputBlur)
    });
  }, [name, inputMode, pattern, ariaLabelledBy, ariaLabel, format2, ariaDescBy, id2, isDisabled, isRequired, isReadOnly, isInvalid, counter3.value, counter3.valueAsNumber, counter3.isOutOfRange, min2, max2, ariaValueText, onChange, onKeyDown, _onFocus, setFocused.on, onBlur3, onInputBlur]);
  return {
    value: format2(counter3.value),
    valueAsNumber: counter3.valueAsNumber,
    isFocused,
    isDisabled,
    isReadOnly,
    getIncrementButtonProps,
    getDecrementButtonProps,
    getInputProps,
    htmlProps
  };
}
var _excluded30 = ["htmlProps"];
var _createStylesContext12 = createStylesContext("NumberInput");
var StylesProvider13 = _createStylesContext12[0];
var useStyles13 = _createStylesContext12[1];
var useNumberInputStyles = useStyles13;
var _createContext11 = createContext({
  name: "NumberInputContext",
  errorMessage: "useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />"
});
var NumberInputProvider = _createContext11[0];
var useNumberInputContext = _createContext11[1];
var NumberInput2 = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("NumberInput", props);
  var ownProps = omitThemingProps(props);
  var controlProps = useFormControlProps(ownProps);
  var _useNumberInput = useNumberInput(controlProps), htmlProps = _useNumberInput.htmlProps, context = _objectWithoutPropertiesLoose23(_useNumberInput, _excluded30);
  var ctx = React54.useMemo(function() {
    return context;
  }, [context]);
  return React54.createElement(NumberInputProvider, {
    value: ctx
  }, React54.createElement(StylesProvider13, {
    value: styles2
  }, React54.createElement(chakra.div, _extends27({}, htmlProps, {
    ref,
    className: cx("chakra-numberinput", props.className),
    __css: _extends27({
      position: "relative",
      zIndex: 0
    }, styles2.root)
  }))));
});
if (__DEV__) {
  NumberInput2.displayName = "NumberInput";
}
var NumberInputStepper = forwardRef(function(props, ref) {
  var styles2 = useStyles13();
  return React54.createElement(chakra.div, _extends27({
    "aria-hidden": true,
    ref
  }, props, {
    __css: _extends27({
      display: "flex",
      flexDirection: "column",
      position: "absolute",
      top: "0",
      insetEnd: "0px",
      margin: "1px",
      height: "calc(100% - 2px)",
      zIndex: 1
    }, styles2.stepperGroup)
  }));
});
if (__DEV__) {
  NumberInputStepper.displayName = "NumberInputStepper";
}
var NumberInputField = forwardRef(function(props, ref) {
  var _useNumberInputContex = useNumberInputContext(), getInputProps = _useNumberInputContex.getInputProps;
  var input = getInputProps(props, ref);
  var styles2 = useStyles13();
  return React54.createElement(chakra.input, _extends27({}, input, {
    className: cx("chakra-numberinput__field", props.className),
    __css: _extends27({
      width: "100%"
    }, styles2.field)
  }));
});
if (__DEV__) {
  NumberInputField.displayName = "NumberInputField";
}
var StyledStepper = chakra("div", {
  baseStyle: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flex: 1,
    transitionProperty: "common",
    transitionDuration: "normal",
    userSelect: "none",
    cursor: "pointer",
    lineHeight: "normal"
  }
});
var NumberDecrementStepper = forwardRef(function(props, ref) {
  var _props$children;
  var styles2 = useStyles13();
  var _useNumberInputContex2 = useNumberInputContext(), getDecrementButtonProps = _useNumberInputContex2.getDecrementButtonProps;
  var decrement = getDecrementButtonProps(props, ref);
  return React54.createElement(StyledStepper, _extends27({}, decrement, {
    __css: styles2.stepper
  }), (_props$children = props.children) != null ? _props$children : React54.createElement(TriangleDownIcon, null));
});
if (__DEV__) {
  NumberDecrementStepper.displayName = "NumberDecrementStepper";
}
var NumberIncrementStepper = forwardRef(function(props, ref) {
  var _props$children2;
  var _useNumberInputContex3 = useNumberInputContext(), getIncrementButtonProps = _useNumberInputContex3.getIncrementButtonProps;
  var increment = getIncrementButtonProps(props, ref);
  var styles2 = useStyles13();
  return React54.createElement(StyledStepper, _extends27({}, increment, {
    __css: styles2.stepper
  }), (_props$children2 = props.children) != null ? _props$children2 : React54.createElement(TriangleUpIcon, null));
});
if (__DEV__) {
  NumberIncrementStepper.displayName = "NumberIncrementStepper";
}

// node_modules/@chakra-ui/pin-input/dist/chakra-ui-pin-input.esm.js
var React55 = __toESM(require_react());
function _extends28() {
  _extends28 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends28.apply(this, arguments);
}
function _objectWithoutPropertiesLoose24(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$113 = ["index"];
var _createDescendantCont3 = createDescendantContext();
var PinInputDescendantsProvider = _createDescendantCont3[0];
var usePinInputDescendantsContext = _createDescendantCont3[1];
var usePinInputDescendants = _createDescendantCont3[2];
var usePinInputDescendant = _createDescendantCont3[3];
var _createContext12 = createContext({
  name: "PinInputContext",
  errorMessage: "usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`"
});
var PinInputProvider = _createContext12[0];
var usePinInputContext = _createContext12[1];
var toArray2 = function toArray3(value) {
  return value == null ? void 0 : value.split("");
};
function validate(value, type) {
  var NUMERIC_REGEX = /^[0-9]+$/;
  var ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;
  var regex = type === "alphanumeric" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;
  return regex.test(value);
}
function usePinInput(props) {
  if (props === void 0) {
    props = {};
  }
  var _props = props, autoFocus = _props.autoFocus, value = _props.value, defaultValue = _props.defaultValue, _onChange = _props.onChange, onComplete = _props.onComplete, _props$placeholder = _props.placeholder, placeholder = _props$placeholder === void 0 ? "\u25CB" : _props$placeholder, _props$manageFocus = _props.manageFocus, manageFocus = _props$manageFocus === void 0 ? true : _props$manageFocus, _props$otp = _props.otp, otp = _props$otp === void 0 ? false : _props$otp, idProp = _props.id, isDisabled = _props.isDisabled, isInvalid = _props.isInvalid, _props$type = _props.type, type = _props$type === void 0 ? "number" : _props$type, mask = _props.mask;
  var uuid = useId();
  var id2 = idProp != null ? idProp : "pin-input-" + uuid;
  var descendants = usePinInputDescendants();
  var _React$useState = React55.useState(true), moveFocus = _React$useState[0], setMoveFocus = _React$useState[1];
  var _React$useState2 = React55.useState(-1), focusedIndex = _React$useState2[0], setFocusedIndex = _React$useState2[1];
  var _useControllableState = useControllableState({
    defaultValue: toArray2(defaultValue) || [],
    value: toArray2(value),
    onChange: function onChange(values2) {
      return _onChange == null ? void 0 : _onChange(values2.join(""));
    }
  }), values = _useControllableState[0], setValues2 = _useControllableState[1];
  React55.useEffect(function() {
    if (autoFocus) {
      var first = descendants.first();
      if (first)
        focus(first.node, {
          nextTick: true
        });
    }
  }, [descendants]);
  var focusNext = React55.useCallback(function(index2) {
    if (!moveFocus || !manageFocus)
      return;
    var next = descendants.next(index2, false);
    if (next)
      focus(next.node, {
        nextTick: true
      });
  }, [descendants, moveFocus, manageFocus]);
  var setValue = React55.useCallback(function(value2, index2) {
    var nextValues = [].concat(values);
    nextValues[index2] = value2;
    setValues2(nextValues);
    var isComplete = value2 !== "" && nextValues.length === descendants.count() && nextValues.every(function(inputValue) {
      return inputValue != null && inputValue !== "";
    });
    if (isComplete) {
      onComplete == null ? void 0 : onComplete(nextValues.join(""));
    } else {
      focusNext(index2);
    }
  }, [values, setValues2, focusNext, onComplete, descendants]);
  var clear = React55.useCallback(function() {
    var values2 = Array(descendants.count()).fill("");
    setValues2(values2);
    var first = descendants.first();
    if (first)
      focus(first.node);
  }, [descendants, setValues2]);
  var getNextValue = React55.useCallback(function(value2, eventValue) {
    var nextValue = eventValue;
    if ((value2 == null ? void 0 : value2.length) > 0) {
      if (value2[0] === eventValue.charAt(0)) {
        nextValue = eventValue.charAt(1);
      } else if (value2[0] === eventValue.charAt(1)) {
        nextValue = eventValue.charAt(0);
      }
    }
    return nextValue;
  }, []);
  var getInputProps = React55.useCallback(function(props2) {
    var index2 = props2.index, rest = _objectWithoutPropertiesLoose24(props2, _excluded$113);
    var onChange = function onChange2(event) {
      var eventValue = event.target.value;
      var currentValue = values[index2];
      var nextValue = getNextValue(currentValue, eventValue);
      if (nextValue === "") {
        setValue("", index2);
        return;
      }
      if (eventValue.length > 2) {
        if (validate(eventValue, type)) {
          var _nextValue = eventValue.split("").filter(function(_, index3) {
            return index3 < descendants.count();
          });
          setValues2(_nextValue);
          if (_nextValue.length === descendants.count()) {
            onComplete == null ? void 0 : onComplete(_nextValue.join(""));
          }
        }
      } else {
        if (validate(nextValue, type)) {
          setValue(nextValue, index2);
        }
        setMoveFocus(true);
      }
    };
    var onKeyDown = function onKeyDown2(event) {
      if (event.key === "Backspace" && manageFocus) {
        if (event.target.value === "") {
          var prevInput = descendants.prev(index2, false);
          if (prevInput) {
            setValue("", index2 - 1);
            focus(prevInput.node);
            setMoveFocus(true);
          }
        } else {
          setMoveFocus(false);
        }
      }
    };
    var onFocus3 = function onFocus4() {
      setFocusedIndex(index2);
    };
    var onBlur3 = function onBlur4() {
      setFocusedIndex(-1);
    };
    var hasFocus = focusedIndex === index2;
    var inputType = type === "number" ? "tel" : "text";
    return _extends28({
      "aria-label": "Please enter your pin code",
      inputMode: type === "number" ? "numeric" : "text",
      type: mask ? "password" : inputType
    }, rest, {
      id: id2 + "-" + index2,
      disabled: isDisabled,
      "aria-invalid": ariaAttr(isInvalid),
      onChange: callAllHandlers(rest.onChange, onChange),
      onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),
      onFocus: callAllHandlers(rest.onFocus, onFocus3),
      onBlur: callAllHandlers(rest.onBlur, onBlur3),
      value: values[index2] || "",
      autoComplete: otp ? "one-time-code" : "off",
      placeholder: hasFocus ? "" : placeholder
    });
  }, [descendants, focusedIndex, getNextValue, id2, isDisabled, mask, isInvalid, manageFocus, onComplete, otp, placeholder, setValue, setValues2, type, values]);
  return {
    getInputProps,
    id: id2,
    descendants,
    values,
    setValue,
    setValues: setValues2,
    clear
  };
}
function usePinInputField(props, ref) {
  if (props === void 0) {
    props = {};
  }
  if (ref === void 0) {
    ref = null;
  }
  var _usePinInputContext = usePinInputContext(), getInputProps = _usePinInputContext.getInputProps;
  var _usePinInputDescendan = usePinInputDescendant(), index2 = _usePinInputDescendan.index, register = _usePinInputDescendan.register;
  return getInputProps(_extends28({}, props, {
    ref: mergeRefs(register, ref),
    index: index2
  }));
}
var _excluded31 = ["children"];
var _excluded212 = ["descendants"];
var PinInput2 = function PinInput3(props) {
  var styles2 = useStyleConfig("PinInput", props);
  var _omitThemingProps = omitThemingProps(props), children = _omitThemingProps.children, rest = _objectWithoutPropertiesLoose24(_omitThemingProps, _excluded31);
  var _usePinInput = usePinInput(rest), descendants = _usePinInput.descendants, context = _objectWithoutPropertiesLoose24(_usePinInput, _excluded212);
  var clones = getValidChildren(children).map(function(child) {
    return React55.cloneElement(child, {
      __css: styles2
    });
  });
  return React55.createElement(PinInputDescendantsProvider, {
    value: descendants
  }, React55.createElement(PinInputProvider, {
    value: context
  }, clones));
};
if (__DEV__) {
  PinInput2.displayName = "PinInput";
}
var PinInputField = forwardRef(function(props, ref) {
  var inputProps = usePinInputField(props, ref);
  return React55.createElement(chakra.input, _extends28({}, inputProps, {
    className: cx("chakra-pin-input", props.className)
  }));
});
if (__DEV__) {
  PinInputField.displayName = "PinInputField";
}

// node_modules/@chakra-ui/popover/dist/chakra-ui-popover.esm.js
var React56 = __toESM(require_react());
var import_react69 = __toESM(require_react());
function _extends29() {
  _extends29 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends29.apply(this, arguments);
}
function _objectWithoutPropertiesLoose25(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _createContext13 = createContext({
  name: "PopoverContext",
  errorMessage: "usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`"
});
var PopoverProvider = _createContext13[0];
var usePopoverContext = _createContext13[1];
var mergeVariants = function mergeVariants2(variants3) {
  if (!variants3)
    return;
  return (0, import_lodash.default)(variants3, {
    enter: {
      visibility: "visible"
    },
    exit: {
      transitionEnd: {
        visibility: "hidden"
      }
    }
  });
};
var scaleFade = {
  exit: {
    opacity: 0,
    scale: 0.95,
    transition: {
      duration: 0.1,
      ease: [0.4, 0, 1, 1]
    }
  },
  enter: {
    scale: 1,
    opacity: 1,
    transition: {
      duration: 0.15,
      ease: [0, 0, 0.2, 1]
    }
  }
};
var Section = motion(chakra.section);
var PopoverTransition = import_react69.default.forwardRef(function(props, ref) {
  var _usePopoverContext = usePopoverContext(), isOpen = _usePopoverContext.isOpen;
  return import_react69.default.createElement(Section, _extends29({
    ref,
    variants: mergeVariants(props.variants)
  }, props, {
    initial: false,
    animate: isOpen ? "enter" : "exit"
  }));
});
PopoverTransition.defaultProps = {
  variants: scaleFade
};
if (__DEV__) {
  PopoverTransition.displayName = "PopoverTransition";
}
var _excluded$114 = ["closeOnBlur", "closeOnEsc", "initialFocusRef", "id", "returnFocusOnClose", "autoFocus", "arrowSize", "arrowShadowColor", "trigger", "openDelay", "closeDelay", "isLazy", "lazyBehavior", "computePositionOnMount"];
var TRIGGER = {
  click: "click",
  hover: "hover"
};
function usePopover(props) {
  if (props === void 0) {
    props = {};
  }
  var _props = props, _props$closeOnBlur = _props.closeOnBlur, closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur, _props$closeOnEsc = _props.closeOnEsc, closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc, initialFocusRef = _props.initialFocusRef, id2 = _props.id, _props$returnFocusOnC = _props.returnFocusOnClose, returnFocusOnClose = _props$returnFocusOnC === void 0 ? true : _props$returnFocusOnC, _props$autoFocus = _props.autoFocus, autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus, arrowSize = _props.arrowSize, arrowShadowColor = _props.arrowShadowColor, _props$trigger = _props.trigger, trigger2 = _props$trigger === void 0 ? TRIGGER.click : _props$trigger, _props$openDelay = _props.openDelay, openDelay = _props$openDelay === void 0 ? 200 : _props$openDelay, _props$closeDelay = _props.closeDelay, closeDelay = _props$closeDelay === void 0 ? 200 : _props$closeDelay, isLazy = _props.isLazy, _props$lazyBehavior = _props.lazyBehavior, lazyBehavior = _props$lazyBehavior === void 0 ? "unmount" : _props$lazyBehavior, computePositionOnMount = _props.computePositionOnMount, popperProps = _objectWithoutPropertiesLoose25(_props, _excluded$114);
  var _useDisclosure = useDisclosure(props), isOpen = _useDisclosure.isOpen, onClose = _useDisclosure.onClose, onOpen = _useDisclosure.onOpen, onToggle = _useDisclosure.onToggle;
  var anchorRef = (0, import_react69.useRef)(null);
  var triggerRef = (0, import_react69.useRef)(null);
  var popoverRef = (0, import_react69.useRef)(null);
  var isHoveringRef = (0, import_react69.useRef)(false);
  var hasBeenOpened = (0, import_react69.useRef)(false);
  if (isOpen) {
    hasBeenOpened.current = true;
  }
  var _useState = (0, import_react69.useState)(false), hasHeader = _useState[0], setHasHeader = _useState[1];
  var _useState2 = (0, import_react69.useState)(false), hasBody = _useState2[0], setHasBody = _useState2[1];
  var _useIds = useIds(id2, "popover-trigger", "popover-content", "popover-header", "popover-body"), triggerId = _useIds[0], popoverId = _useIds[1], headerId = _useIds[2], bodyId = _useIds[3];
  var _usePopper = usePopper(_extends29({}, popperProps, {
    enabled: isOpen || !!computePositionOnMount
  })), referenceRef = _usePopper.referenceRef, getArrowProps = _usePopper.getArrowProps, getPopperProps = _usePopper.getPopperProps, getArrowInnerProps = _usePopper.getArrowInnerProps, forceUpdate = _usePopper.forceUpdate;
  var animated = useAnimationState({
    isOpen,
    ref: popoverRef
  });
  useFocusOnPointerDown({
    enabled: isOpen,
    ref: triggerRef
  });
  useFocusOnHide(popoverRef, {
    focusRef: triggerRef,
    visible: isOpen,
    shouldFocus: returnFocusOnClose && trigger2 === TRIGGER.click
  });
  useFocusOnShow(popoverRef, {
    focusRef: initialFocusRef,
    visible: isOpen,
    shouldFocus: autoFocus && trigger2 === TRIGGER.click
  });
  var shouldRenderChildren = determineLazyBehavior({
    hasBeenSelected: hasBeenOpened.current,
    isLazy,
    lazyBehavior,
    isSelected: animated.present
  });
  var getPopoverProps = (0, import_react69.useCallback)(function(props2, _ref2) {
    var _extends210;
    if (props2 === void 0) {
      props2 = {};
    }
    if (_ref2 === void 0) {
      _ref2 = null;
    }
    var popoverProps = _extends29({}, props2, {
      style: _extends29({}, props2.style, (_extends210 = {
        transformOrigin: cssVars.transformOrigin.varRef
      }, _extends210[cssVars.arrowSize["var"]] = arrowSize ? px(arrowSize) : void 0, _extends210[cssVars.arrowShadowColor["var"]] = arrowShadowColor, _extends210)),
      ref: mergeRefs(popoverRef, _ref2),
      children: shouldRenderChildren ? props2.children : null,
      id: popoverId,
      tabIndex: -1,
      role: "dialog",
      onKeyDown: callAllHandlers(props2.onKeyDown, function(event) {
        if (closeOnEsc && event.key === "Escape") {
          onClose();
        }
      }),
      onBlur: callAllHandlers(props2.onBlur, function(event) {
        var relatedTarget = getRelatedTarget(event);
        var targetIsPopover = contains(popoverRef.current, relatedTarget);
        var targetIsTrigger = contains(triggerRef.current, relatedTarget);
        var isValidBlur = !targetIsPopover && !targetIsTrigger;
        if (isOpen && closeOnBlur && isValidBlur) {
          onClose();
        }
      }),
      "aria-labelledby": hasHeader ? headerId : void 0,
      "aria-describedby": hasBody ? bodyId : void 0
    });
    if (trigger2 === TRIGGER.hover) {
      popoverProps.role = "tooltip";
      popoverProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, function() {
        isHoveringRef.current = true;
      });
      popoverProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, function(event) {
        if (event.nativeEvent.relatedTarget === null) {
          return;
        }
        isHoveringRef.current = false;
        setTimeout(onClose, closeDelay);
      });
    }
    return popoverProps;
  }, [shouldRenderChildren, popoverId, hasHeader, headerId, hasBody, bodyId, trigger2, closeOnEsc, onClose, isOpen, closeOnBlur, closeDelay, arrowShadowColor, arrowSize]);
  var getPopoverPositionerProps = (0, import_react69.useCallback)(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return getPopperProps(_extends29({}, props2, {
      style: _extends29({
        visibility: isOpen ? "visible" : "hidden"
      }, props2.style)
    }), forwardedRef);
  }, [isOpen, getPopperProps]);
  var getAnchorProps = (0, import_react69.useCallback)(function(props2, _ref2) {
    if (_ref2 === void 0) {
      _ref2 = null;
    }
    var anchorProps = _extends29({}, props2, {
      ref: mergeRefs(_ref2, anchorRef, referenceRef)
    });
    return anchorProps;
  }, [anchorRef, referenceRef]);
  var openTimeout = (0, import_react69.useRef)();
  var closeTimeout = (0, import_react69.useRef)();
  var maybeReferenceRef = (0, import_react69.useCallback)(function(node2) {
    if (anchorRef.current == null) {
      referenceRef(node2);
    }
  }, [referenceRef]);
  var getTriggerProps = (0, import_react69.useCallback)(function(props2, _ref2) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (_ref2 === void 0) {
      _ref2 = null;
    }
    var triggerProps = _extends29({}, props2, {
      ref: mergeRefs(triggerRef, _ref2, maybeReferenceRef),
      id: triggerId,
      "aria-haspopup": "dialog",
      "aria-expanded": isOpen,
      "aria-controls": popoverId
    });
    if (trigger2 === TRIGGER.click) {
      triggerProps.onClick = callAllHandlers(props2.onClick, onToggle);
    }
    if (trigger2 === TRIGGER.hover) {
      triggerProps.onFocus = callAllHandlers(props2.onFocus, function() {
        if (openTimeout.current === void 0) {
          onOpen();
        }
      });
      triggerProps.onBlur = callAllHandlers(props2.onBlur, function(event) {
        var relatedTarget = getRelatedTarget(event);
        var isValidBlur = !contains(popoverRef.current, relatedTarget);
        if (isOpen && closeOnBlur && isValidBlur) {
          onClose();
        }
      });
      triggerProps.onKeyDown = callAllHandlers(props2.onKeyDown, function(event) {
        if (event.key === "Escape") {
          onClose();
        }
      });
      triggerProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, function() {
        isHoveringRef.current = true;
        openTimeout.current = window.setTimeout(onOpen, openDelay);
      });
      triggerProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, function() {
        isHoveringRef.current = false;
        if (openTimeout.current) {
          clearTimeout(openTimeout.current);
          openTimeout.current = void 0;
        }
        closeTimeout.current = window.setTimeout(function() {
          if (isHoveringRef.current === false) {
            onClose();
          }
        }, closeDelay);
      });
    }
    return triggerProps;
  }, [triggerId, isOpen, popoverId, trigger2, maybeReferenceRef, onToggle, onOpen, closeOnBlur, onClose, openDelay, closeDelay]);
  (0, import_react69.useEffect)(function() {
    return function() {
      if (openTimeout.current) {
        clearTimeout(openTimeout.current);
      }
      if (closeTimeout.current) {
        clearTimeout(closeTimeout.current);
      }
    };
  }, []);
  var getHeaderProps = (0, import_react69.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends29({}, props2, {
      id: headerId,
      ref: mergeRefs(ref, function(node2) {
        setHasHeader(!!node2);
      })
    });
  }, [headerId]);
  var getBodyProps = (0, import_react69.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends29({}, props2, {
      id: bodyId,
      ref: mergeRefs(ref, function(node2) {
        setHasBody(!!node2);
      })
    });
  }, [bodyId]);
  return {
    forceUpdate,
    isOpen,
    onAnimationComplete: animated.onComplete,
    onClose,
    getAnchorProps,
    getArrowProps,
    getArrowInnerProps,
    getPopoverPositionerProps,
    getPopoverProps,
    getTriggerProps,
    getHeaderProps,
    getBodyProps
  };
}
var _excluded39 = ["children"];
var _excluded213 = ["rootProps"];
var _createStylesContext13 = createStylesContext("Popover");
var StylesProvider14 = _createStylesContext13[0];
var useStyles14 = _createStylesContext13[1];
var usePopoverStyles = useStyles14;
var Popover2 = function Popover3(props) {
  var styles2 = useMultiStyleConfig("Popover", props);
  var _omitThemingProps = omitThemingProps(props), children = _omitThemingProps.children, rest = _objectWithoutPropertiesLoose25(_omitThemingProps, _excluded39);
  var theme2 = useTheme();
  var context = usePopover(_extends29({}, rest, {
    direction: theme2.direction
  }));
  return React56.createElement(PopoverProvider, {
    value: context
  }, React56.createElement(StylesProvider14, {
    value: styles2
  }, runIfFn(children, {
    isOpen: context.isOpen,
    onClose: context.onClose,
    forceUpdate: context.forceUpdate
  })));
};
if (__DEV__) {
  Popover2.displayName = "Popover";
}
var PopoverAnchor = function PopoverAnchor2(props) {
  var child = React56.Children.only(props.children);
  var _usePopoverContext = usePopoverContext(), getAnchorProps = _usePopoverContext.getAnchorProps;
  return React56.cloneElement(child, getAnchorProps(child.props, child.ref));
};
if (__DEV__) {
  PopoverAnchor.displayName = "PopoverAnchor";
}
var PopoverTrigger = function PopoverTrigger2(props) {
  var child = React56.Children.only(props.children);
  var _usePopoverContext2 = usePopoverContext(), getTriggerProps = _usePopoverContext2.getTriggerProps;
  return React56.cloneElement(child, getTriggerProps(child.props, child.ref));
};
if (__DEV__) {
  PopoverTrigger.displayName = "PopoverTrigger";
}
var PopoverContent = forwardRef(function(props, ref) {
  var rootProps = props.rootProps, contentProps = _objectWithoutPropertiesLoose25(props, _excluded213);
  var _usePopoverContext3 = usePopoverContext(), getPopoverProps = _usePopoverContext3.getPopoverProps, getPopoverPositionerProps = _usePopoverContext3.getPopoverPositionerProps, onAnimationComplete = _usePopoverContext3.onAnimationComplete;
  var styles2 = useStyles14();
  var contentStyles = _extends29({
    position: "relative",
    display: "flex",
    flexDirection: "column"
  }, styles2.content);
  return React56.createElement(chakra.div, _extends29({}, getPopoverPositionerProps(rootProps), {
    __css: styles2.popper,
    className: "chakra-popover__popper"
  }), React56.createElement(PopoverTransition, _extends29({}, getPopoverProps(contentProps, ref), {
    onAnimationComplete: callAll(onAnimationComplete, contentProps.onAnimationComplete),
    className: cx("chakra-popover__content", props.className),
    __css: contentStyles
  })));
});
if (__DEV__) {
  PopoverContent.displayName = "PopoverContent";
}
var PopoverHeader = forwardRef(function(props, ref) {
  var _usePopoverContext4 = usePopoverContext(), getHeaderProps = _usePopoverContext4.getHeaderProps;
  var styles2 = useStyles14();
  return React56.createElement(chakra.header, _extends29({}, getHeaderProps(props, ref), {
    className: cx("chakra-popover__header", props.className),
    __css: styles2.header
  }));
});
if (__DEV__) {
  PopoverHeader.displayName = "PopoverHeader";
}
var PopoverBody = forwardRef(function(props, ref) {
  var _usePopoverContext5 = usePopoverContext(), getBodyProps = _usePopoverContext5.getBodyProps;
  var styles2 = useStyles14();
  return React56.createElement(chakra.div, _extends29({}, getBodyProps(props, ref), {
    className: cx("chakra-popover__body", props.className),
    __css: styles2.body
  }));
});
if (__DEV__) {
  PopoverBody.displayName = "PopoverBody";
}
var PopoverFooter = function PopoverFooter2(props) {
  var styles2 = useStyles14();
  return React56.createElement(chakra.footer, _extends29({}, props, {
    className: cx("chakra-popover__footer", props.className),
    __css: styles2.footer
  }));
};
if (__DEV__) {
  PopoverFooter.displayName = "PopoverFooter";
}
var PopoverCloseButton = forwardRef(function(props, ref) {
  var _usePopoverContext6 = usePopoverContext(), onClose = _usePopoverContext6.onClose;
  var styles2 = useStyles14();
  return React56.createElement(CloseButton2, _extends29({
    size: "sm",
    onClick: onClose,
    className: cx("chakra-popover__close-btn", props.className),
    __css: styles2.closeButton,
    ref
  }, props));
});
if (__DEV__) {
  PopoverCloseButton.displayName = "PopoverCloseButton";
}
var PopoverArrow = function PopoverArrow2(props) {
  var _ref2;
  var bg = props.bg, bgColor = props.bgColor, backgroundColor = props.backgroundColor;
  var _usePopoverContext7 = usePopoverContext(), getArrowProps = _usePopoverContext7.getArrowProps, getArrowInnerProps = _usePopoverContext7.getArrowInnerProps;
  var styles2 = useStyles14();
  var arrowBg = (_ref2 = bg != null ? bg : bgColor) != null ? _ref2 : backgroundColor;
  return React56.createElement(chakra.div, _extends29({}, getArrowProps(), {
    className: "chakra-popover__arrow-positioner"
  }), React56.createElement(chakra.div, _extends29({
    className: cx("chakra-popover__arrow", props.className)
  }, getArrowInnerProps(props), {
    __css: _extends29({}, styles2.arrow, {
      "--popper-arrow-bg": arrowBg ? "colors." + arrowBg + ", " + arrowBg : void 0
    })
  })));
};
if (__DEV__) {
  PopoverArrow.displayName = "PopoverArrow";
}

// node_modules/@chakra-ui/progress/dist/chakra-ui-progress.esm.js
var React57 = __toESM(require_react());
function _objectWithoutPropertiesLoose26(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends30() {
  _extends30 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends30.apply(this, arguments);
}
var spin2 = keyframes({
  "0%": {
    strokeDasharray: "1, 400",
    strokeDashoffset: "0"
  },
  "50%": {
    strokeDasharray: "400, 400",
    strokeDashoffset: "-100"
  },
  "100%": {
    strokeDasharray: "400, 400",
    strokeDashoffset: "-260"
  }
});
var rotate = keyframes({
  "0%": {
    transform: "rotate(0deg)"
  },
  "100%": {
    transform: "rotate(360deg)"
  }
});
var progress3 = keyframes({
  "0%": {
    left: "-40%"
  },
  "100%": {
    left: "100%"
  }
});
var stripe = keyframes({
  from: {
    backgroundPosition: "1rem 0"
  },
  to: {
    backgroundPosition: "0 0"
  }
});
function getProgressProps(options) {
  var _options$value = options.value, value = _options$value === void 0 ? 0 : _options$value, min2 = options.min, max2 = options.max, valueText = options.valueText, getValueText = options.getValueText, isIndeterminate = options.isIndeterminate;
  var percent2 = valueToPercent(value, min2, max2);
  var getAriaValueText = function getAriaValueText2() {
    if (value == null)
      return void 0;
    return isFunction(getValueText) ? getValueText(value, percent2) : valueText;
  };
  return {
    bind: {
      "data-indeterminate": isIndeterminate ? "" : void 0,
      "aria-valuemax": max2,
      "aria-valuemin": min2,
      "aria-valuenow": isIndeterminate ? void 0 : value,
      "aria-valuetext": getAriaValueText(),
      role: "progressbar"
    },
    percent: percent2,
    value
  };
}
var _excluded$115 = ["size", "isIndeterminate"];
var _excluded2$16 = ["size", "max", "min", "valueText", "getValueText", "value", "capIsRound", "children", "thickness", "color", "trackColor", "isIndeterminate"];
var Circle2 = function Circle3(props) {
  return React57.createElement(chakra.circle, _extends30({
    cx: 50,
    cy: 50,
    r: 42,
    fill: "transparent"
  }, props));
};
if (__DEV__) {
  Circle2.displayName = "Circle";
}
var Shape = function Shape2(props) {
  var size2 = props.size, isIndeterminate = props.isIndeterminate, rest = _objectWithoutPropertiesLoose26(props, _excluded$115);
  return React57.createElement(chakra.svg, _extends30({
    viewBox: "0 0 100 100",
    __css: {
      width: size2,
      height: size2,
      animation: isIndeterminate ? rotate + " 2s linear infinite" : void 0
    }
  }, rest));
};
if (__DEV__) {
  Shape.displayName = "Shape";
}
var CircularProgress = function CircularProgress2(props) {
  var _progress$percent;
  var _props$size = props.size, size2 = _props$size === void 0 ? "48px" : _props$size, _props$max = props.max, max2 = _props$max === void 0 ? 100 : _props$max, _props$min = props.min, min2 = _props$min === void 0 ? 0 : _props$min, valueText = props.valueText, getValueText = props.getValueText, value = props.value, capIsRound = props.capIsRound, children = props.children, _props$thickness = props.thickness, thickness = _props$thickness === void 0 ? "10px" : _props$thickness, _props$color = props.color, color3 = _props$color === void 0 ? "#0078d4" : _props$color, _props$trackColor = props.trackColor, trackColor = _props$trackColor === void 0 ? "#edebe9" : _props$trackColor, isIndeterminate = props.isIndeterminate, rest = _objectWithoutPropertiesLoose26(props, _excluded2$16);
  var progress4 = getProgressProps({
    min: min2,
    max: max2,
    value,
    valueText,
    getValueText,
    isIndeterminate
  });
  var determinant = isIndeterminate ? void 0 : ((_progress$percent = progress4.percent) != null ? _progress$percent : 0) * 2.64;
  var strokeDasharray = isUndefined(determinant) ? void 0 : determinant + " " + (264 - determinant);
  var indicatorProps = isIndeterminate ? {
    css: {
      animation: spin2 + " 1.5s linear infinite"
    }
  } : {
    strokeDashoffset: 66,
    strokeDasharray,
    transitionProperty: "stroke-dasharray, stroke",
    transitionDuration: "0.6s",
    transitionTimingFunction: "ease"
  };
  var rootStyles = {
    display: "inline-block",
    position: "relative",
    verticalAlign: "middle",
    fontSize: size2
  };
  return React57.createElement(chakra.div, _extends30({
    className: "chakra-progress"
  }, progress4.bind, rest, {
    __css: rootStyles
  }), React57.createElement(Shape, {
    size: size2,
    isIndeterminate
  }, React57.createElement(Circle2, {
    stroke: trackColor,
    strokeWidth: thickness,
    className: "chakra-progress__track"
  }), React57.createElement(Circle2, _extends30({
    stroke: color3,
    strokeWidth: thickness,
    className: "chakra-progress__indicator",
    strokeLinecap: capIsRound ? "round" : void 0,
    opacity: progress4.value === 0 && !isIndeterminate ? 0 : void 0
  }, indicatorProps))), children);
};
if (__DEV__) {
  CircularProgress.displayName = "CircularProgress";
}
var CircularProgressLabel = chakra("div", {
  baseStyle: {
    fontSize: "0.24em",
    top: "50%",
    left: "50%",
    width: "100%",
    textAlign: "center",
    position: "absolute",
    transform: "translate(-50%, -50%)"
  }
});
if (__DEV__) {
  CircularProgressLabel.displayName = "CircularProgressLabel";
}
var _excluded40 = ["min", "max", "value", "isIndeterminate"];
var _excluded214 = ["value", "min", "max", "hasStripe", "isAnimated", "children", "borderRadius", "isIndeterminate", "aria-label", "aria-labelledby"];
var _createStylesContext14 = createStylesContext("Progress");
var StylesProvider15 = _createStylesContext14[0];
var useStyles15 = _createStylesContext14[1];
var useProgressStyles = useStyles15;
var ProgressLabel = function ProgressLabel2(props) {
  var styles2 = useStyles15();
  var labelStyles = _extends30({
    top: "50%",
    left: "50%",
    width: "100%",
    textAlign: "center",
    position: "absolute",
    transform: "translate(-50%, -50%)"
  }, styles2.label);
  return React57.createElement(chakra.div, _extends30({}, props, {
    __css: labelStyles
  }));
};
if (__DEV__) {
  ProgressLabel.displayName = "ProgressLabel";
}
var ProgressFilledTrack = function ProgressFilledTrack2(props) {
  var min2 = props.min, max2 = props.max, value = props.value, isIndeterminate = props.isIndeterminate, rest = _objectWithoutPropertiesLoose26(props, _excluded40);
  var progress4 = getProgressProps({
    value,
    min: min2,
    max: max2,
    isIndeterminate
  });
  var styles2 = useStyles15();
  var trackStyles = _extends30({
    height: "100%"
  }, styles2.filledTrack);
  return React57.createElement(chakra.div, _extends30({
    style: _extends30({
      width: progress4.percent + "%"
    }, rest.style)
  }, progress4.bind, rest, {
    __css: trackStyles
  }));
};
var Progress2 = function Progress3(props) {
  var _styles$track;
  var _omitThemingProps = omitThemingProps(props), value = _omitThemingProps.value, _omitThemingProps$min = _omitThemingProps.min, min2 = _omitThemingProps$min === void 0 ? 0 : _omitThemingProps$min, _omitThemingProps$max = _omitThemingProps.max, max2 = _omitThemingProps$max === void 0 ? 100 : _omitThemingProps$max, hasStripe = _omitThemingProps.hasStripe, isAnimated = _omitThemingProps.isAnimated, children = _omitThemingProps.children, propBorderRadius = _omitThemingProps.borderRadius, isIndeterminate = _omitThemingProps.isIndeterminate, ariaLabel = _omitThemingProps["aria-label"], ariaLabelledBy = _omitThemingProps["aria-labelledby"], rest = _objectWithoutPropertiesLoose26(_omitThemingProps, _excluded214);
  var styles2 = useMultiStyleConfig("Progress", props);
  var borderRadius = propBorderRadius != null ? propBorderRadius : (_styles$track = styles2.track) == null ? void 0 : _styles$track.borderRadius;
  var stripeAnimation = {
    animation: stripe + " 1s linear infinite"
  };
  var shouldAddStripe = !isIndeterminate && hasStripe;
  var shouldAnimateStripe = shouldAddStripe && isAnimated;
  var css2 = _extends30({}, shouldAnimateStripe && stripeAnimation, isIndeterminate && {
    position: "absolute",
    willChange: "left",
    minWidth: "50%",
    animation: progress3 + " 1s ease infinite normal none running"
  });
  var trackStyles = _extends30({
    overflow: "hidden",
    position: "relative"
  }, styles2.track);
  return React57.createElement(chakra.div, _extends30({
    borderRadius,
    __css: trackStyles
  }, rest), React57.createElement(StylesProvider15, {
    value: styles2
  }, React57.createElement(ProgressFilledTrack, {
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    min: min2,
    max: max2,
    value,
    isIndeterminate,
    css: css2,
    borderRadius
  }), children));
};
if (__DEV__) {
  Progress2.displayName = "Progress";
}

// node_modules/@chakra-ui/radio/dist/chakra-ui-radio.esm.js
var React58 = __toESM(require_react());
var import_react70 = __toESM(require_react());
function _objectWithoutPropertiesLoose27(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends31() {
  _extends31 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends31.apply(this, arguments);
}
var _excluded$36 = ["onChange", "value", "defaultValue", "name", "isDisabled", "isFocusable", "isNative"];
function useRadioGroup(props) {
  if (props === void 0) {
    props = {};
  }
  var _props = props, onChangeProp = _props.onChange, valueProp = _props.value, defaultValue = _props.defaultValue, nameProp = _props.name, isDisabled = _props.isDisabled, isFocusable = _props.isFocusable, isNative = _props.isNative, htmlProps = _objectWithoutPropertiesLoose27(_props, _excluded$36);
  var _React$useState = React58.useState(defaultValue || ""), valueState = _React$useState[0], setValue = _React$useState[1];
  var _useControllableProp = useControllableProp(valueProp, valueState), isControlled = _useControllableProp[0], value = _useControllableProp[1];
  var ref = React58.useRef(null);
  var focus2 = React58.useCallback(function() {
    var rootNode = ref.current;
    if (!rootNode)
      return;
    var query = "input:not(:disabled):checked";
    var firstEnabledAndCheckedInput = rootNode.querySelector(query);
    if (firstEnabledAndCheckedInput) {
      firstEnabledAndCheckedInput.focus();
      return;
    }
    query = "input:not(:disabled)";
    var firstEnabledInput = rootNode.querySelector(query);
    firstEnabledInput == null ? void 0 : firstEnabledInput.focus();
  }, []);
  var fallbackName = useId(void 0, "radio");
  var name = nameProp || fallbackName;
  var onChange = React58.useCallback(function(eventOrValue) {
    var nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;
    if (!isControlled) {
      setValue(nextValue);
    }
    onChangeProp == null ? void 0 : onChangeProp(String(nextValue));
  }, [onChangeProp, isControlled]);
  var getRootProps = React58.useCallback(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends31({}, props2, {
      ref: mergeRefs(forwardedRef, ref),
      role: "radiogroup"
    });
  }, []);
  var getRadioProps = React58.useCallback(function(props2, ref2) {
    var _extends210;
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref2 === void 0) {
      ref2 = null;
    }
    var checkedKey = isNative ? "checked" : "isChecked";
    return _extends31({}, props2, (_extends210 = {
      ref: ref2,
      name
    }, _extends210[checkedKey] = value != null ? props2.value === value : void 0, _extends210.onChange = onChange, _extends210["data-radiogroup"] = true, _extends210));
  }, [isNative, name, onChange, value]);
  return {
    getRootProps,
    getRadioProps,
    name,
    ref,
    focus: focus2,
    setValue,
    value,
    onChange,
    isDisabled,
    isFocusable,
    htmlProps
  };
}
var _excluded$28 = ["colorScheme", "size", "variant", "children", "className", "isDisabled", "isFocusable"];
var _createContext14 = createContext({
  name: "RadioGroupContext",
  strict: false
});
var RadioGroupProvider = _createContext14[0];
var useRadioGroupContext = _createContext14[1];
var RadioGroup = forwardRef(function(props, ref) {
  var colorScheme = props.colorScheme, size2 = props.size, variant = props.variant, children = props.children, className = props.className, isDisabled = props.isDisabled, isFocusable = props.isFocusable, rest = _objectWithoutPropertiesLoose27(props, _excluded$28);
  var _useRadioGroup = useRadioGroup(rest), value = _useRadioGroup.value, onChange = _useRadioGroup.onChange, getRootProps = _useRadioGroup.getRootProps, name = _useRadioGroup.name, htmlProps = _useRadioGroup.htmlProps;
  var group = React58.useMemo(function() {
    return {
      name,
      size: size2,
      onChange,
      colorScheme,
      value,
      variant,
      isDisabled,
      isFocusable
    };
  }, [name, size2, onChange, colorScheme, value, variant, isDisabled, isFocusable]);
  var groupProps = getRootProps(htmlProps, ref);
  var _className = cx("chakra-radio-group", className);
  return React58.createElement(RadioGroupProvider, {
    value: group
  }, React58.createElement(chakra.div, _extends31({}, groupProps, {
    className: _className
  }), children));
});
if (__DEV__) {
  RadioGroup.displayName = "RadioGroup";
}
var _excluded$116 = ["defaultChecked", "isChecked", "isFocusable", "isDisabled", "isReadOnly", "isRequired", "onChange", "isInvalid", "name", "value", "id", "data-radiogroup", "aria-describedby"];
function useRadio(props) {
  if (props === void 0) {
    props = {};
  }
  var _props = props, defaultChecked = _props.defaultChecked, isCheckedProp = _props.isChecked, isFocusable = _props.isFocusable, isDisabledProp = _props.isDisabled, isReadOnlyProp = _props.isReadOnly, isRequiredProp = _props.isRequired, onChange = _props.onChange, isInvalidProp = _props.isInvalid, name = _props.name, value = _props.value, idProp = _props.id, dataRadioGroup = _props["data-radiogroup"], ariaDescribedBy = _props["aria-describedby"], htmlProps = _objectWithoutPropertiesLoose27(_props, _excluded$116);
  var uuid = useId(void 0, "radio");
  var formControl = useFormControlContext();
  var group = useRadioGroupContext();
  var isWithinRadioGroup = !!group || !!dataRadioGroup;
  var isWithinFormControl = !!formControl;
  var id2 = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;
  id2 = idProp != null ? idProp : id2;
  var isDisabled = isDisabledProp != null ? isDisabledProp : formControl == null ? void 0 : formControl.isDisabled;
  var isReadOnly = isReadOnlyProp != null ? isReadOnlyProp : formControl == null ? void 0 : formControl.isReadOnly;
  var isRequired = isRequiredProp != null ? isRequiredProp : formControl == null ? void 0 : formControl.isRequired;
  var isInvalid = isInvalidProp != null ? isInvalidProp : formControl == null ? void 0 : formControl.isInvalid;
  var _useState = (0, import_react70.useState)(false), isFocusVisible2 = _useState[0], setIsFocusVisible = _useState[1];
  var _useBoolean = useBoolean(), isFocused = _useBoolean[0], setFocused = _useBoolean[1];
  var _useBoolean2 = useBoolean(), isHovered = _useBoolean2[0], setHovering = _useBoolean2[1];
  var _useBoolean3 = useBoolean(), isActive = _useBoolean3[0], setActive = _useBoolean3[1];
  var _useState2 = (0, import_react70.useState)(Boolean(defaultChecked)), isCheckedState = _useState2[0], setChecked = _useState2[1];
  var _useControllableProp = useControllableProp(isCheckedProp, isCheckedState), isControlled = _useControllableProp[0], isChecked = _useControllableProp[1];
  (0, import_react70.useEffect)(function() {
    return trackFocusVisible(setIsFocusVisible);
  }, []);
  var handleChange = (0, import_react70.useCallback)(function(event) {
    if (isReadOnly || isDisabled) {
      event.preventDefault();
      return;
    }
    if (!isControlled) {
      setChecked(event.target.checked);
    }
    onChange == null ? void 0 : onChange(event);
  }, [isControlled, isDisabled, isReadOnly, onChange]);
  var onKeyDown = (0, import_react70.useCallback)(function(event) {
    if (event.key === " ") {
      setActive.on();
    }
  }, [setActive]);
  var onKeyUp = (0, import_react70.useCallback)(function(event) {
    if (event.key === " ") {
      setActive.off();
    }
  }, [setActive]);
  var getRadioProps = (0, import_react70.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends31({}, props2, {
      ref,
      "data-active": dataAttr(isActive),
      "data-hover": dataAttr(isHovered),
      "data-disabled": dataAttr(isDisabled),
      "data-invalid": dataAttr(isInvalid),
      "data-checked": dataAttr(isChecked),
      "data-focus": dataAttr(isFocused),
      "data-focus-visible": dataAttr(isFocused && isFocusVisible2),
      "data-readonly": dataAttr(isReadOnly),
      "aria-hidden": true,
      onMouseDown: callAllHandlers(props2.onMouseDown, setActive.on),
      onMouseUp: callAllHandlers(props2.onMouseUp, setActive.off),
      onMouseEnter: callAllHandlers(props2.onMouseEnter, setHovering.on),
      onMouseLeave: callAllHandlers(props2.onMouseLeave, setHovering.off)
    });
  }, [isActive, isHovered, isDisabled, isInvalid, isChecked, isFocused, isReadOnly, setActive.on, setActive.off, setHovering.on, setHovering.off, isFocusVisible2]);
  var _ref2 = formControl != null ? formControl : {}, onFocus3 = _ref2.onFocus, onBlur3 = _ref2.onBlur;
  var getInputProps = (0, import_react70.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    var trulyDisabled = isDisabled && !isFocusable;
    return _extends31({}, props2, {
      id: id2,
      ref,
      type: "radio",
      name,
      value,
      onChange: callAllHandlers(props2.onChange, handleChange),
      onBlur: callAllHandlers(onBlur3, props2.onBlur, setFocused.off),
      onFocus: callAllHandlers(onFocus3, props2.onFocus, setFocused.on),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),
      checked: isChecked,
      disabled: trulyDisabled,
      readOnly: isReadOnly,
      required: isRequired,
      "aria-invalid": ariaAttr(isInvalid),
      "aria-disabled": ariaAttr(trulyDisabled),
      "aria-required": ariaAttr(isRequired),
      "data-readonly": dataAttr(isReadOnly),
      "aria-describedby": ariaDescribedBy,
      style: visuallyHiddenStyle
    });
  }, [isDisabled, isFocusable, id2, name, value, handleChange, onBlur3, setFocused, onFocus3, onKeyDown, onKeyUp, isChecked, isReadOnly, isRequired, isInvalid, ariaDescribedBy]);
  var getLabelProps = function getLabelProps2(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends31({}, props2, {
      ref,
      onMouseDown: callAllHandlers(props2.onMouseDown, stop),
      onTouchStart: callAllHandlers(props2.onTouchStart, stop),
      "data-disabled": dataAttr(isDisabled),
      "data-checked": dataAttr(isChecked),
      "data-invalid": dataAttr(isInvalid)
    });
  };
  var getRootProps = function getRootProps2(props2, ref) {
    if (ref === void 0) {
      ref = null;
    }
    return _extends31({}, props2, {
      ref,
      "data-disabled": dataAttr(isDisabled),
      "data-checked": dataAttr(isChecked),
      "data-invalid": dataAttr(isInvalid)
    });
  };
  var state = {
    isInvalid,
    isFocused,
    isChecked,
    isActive,
    isHovered,
    isDisabled,
    isReadOnly,
    isRequired
  };
  return {
    state,
    getCheckboxProps: getRadioProps,
    getInputProps,
    getLabelProps,
    getRootProps,
    htmlProps
  };
}
function stop(event) {
  event.preventDefault();
  event.stopPropagation();
}
var _excluded41 = ["spacing", "children", "isDisabled", "isFocusable", "inputProps"];
var Radio2 = forwardRef(function(props, ref) {
  var _props$name;
  var group = useRadioGroupContext();
  var onChangeProp = props.onChange, valueProp = props.value;
  var styles2 = useMultiStyleConfig("Radio", _extends31({}, group, props));
  var ownProps = omitThemingProps(props);
  var _ownProps$spacing = ownProps.spacing, spacing2 = _ownProps$spacing === void 0 ? "0.5rem" : _ownProps$spacing, children = ownProps.children, _ownProps$isDisabled = ownProps.isDisabled, isDisabled = _ownProps$isDisabled === void 0 ? group == null ? void 0 : group.isDisabled : _ownProps$isDisabled, _ownProps$isFocusable = ownProps.isFocusable, isFocusable = _ownProps$isFocusable === void 0 ? group == null ? void 0 : group.isFocusable : _ownProps$isFocusable, htmlInputProps = ownProps.inputProps, rest = _objectWithoutPropertiesLoose27(ownProps, _excluded41);
  var isChecked = props.isChecked;
  if ((group == null ? void 0 : group.value) != null && valueProp != null) {
    isChecked = group.value === valueProp;
  }
  var onChange = onChangeProp;
  if (group != null && group.onChange && valueProp != null) {
    onChange = callAll(group.onChange, onChangeProp);
  }
  var name = (_props$name = props == null ? void 0 : props.name) != null ? _props$name : group == null ? void 0 : group.name;
  var _useRadio = useRadio(_extends31({}, rest, {
    isChecked,
    isFocusable,
    isDisabled,
    onChange,
    name
  })), getInputProps = _useRadio.getInputProps, getCheckboxProps = _useRadio.getCheckboxProps, getLabelProps = _useRadio.getLabelProps, getRootProps = _useRadio.getRootProps, htmlProps = _useRadio.htmlProps;
  var _split = split(htmlProps, layoutPropNames), layoutProps = _split[0], otherProps = _split[1];
  var checkboxProps = getCheckboxProps(otherProps);
  var inputProps = getInputProps(htmlInputProps, ref);
  var labelProps = getLabelProps();
  var rootProps = Object.assign({}, layoutProps, getRootProps());
  var rootStyles = _extends31({
    display: "inline-flex",
    alignItems: "center",
    verticalAlign: "top",
    cursor: "pointer",
    position: "relative"
  }, styles2.container);
  var checkboxStyles = _extends31({
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0
  }, styles2.control);
  var labelStyles = _extends31({
    userSelect: "none",
    marginStart: spacing2
  }, styles2.label);
  return React58.createElement(chakra.label, _extends31({
    className: "chakra-radio"
  }, rootProps, {
    __css: rootStyles
  }), React58.createElement("input", _extends31({
    className: "chakra-radio__input"
  }, inputProps)), React58.createElement(chakra.span, _extends31({
    className: "chakra-radio__control"
  }, checkboxProps, {
    __css: checkboxStyles
  })), children && React58.createElement(chakra.span, _extends31({
    className: "chakra-radio__label"
  }, labelProps, {
    __css: labelStyles
  }), children));
});
if (__DEV__) {
  Radio2.displayName = "Radio";
}

// node_modules/@chakra-ui/select/dist/chakra-ui-select.esm.js
var React59 = __toESM(require_react());
function _extends32() {
  _extends32 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends32.apply(this, arguments);
}
function _objectWithoutPropertiesLoose28(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded46 = ["children", "placeholder", "className"];
var _excluded215 = ["rootProps", "placeholder", "icon", "color", "height", "h", "minH", "minHeight", "iconColor", "iconSize"];
var _excluded310 = ["children"];
var SelectField = forwardRef(function(props, ref) {
  var children = props.children, placeholder = props.placeholder, className = props.className, rest = _objectWithoutPropertiesLoose28(props, _excluded46);
  return React59.createElement(chakra.select, _extends32({}, rest, {
    ref,
    className: cx("chakra-select", className)
  }), placeholder && React59.createElement("option", {
    value: ""
  }, placeholder), children);
});
if (__DEV__) {
  SelectField.displayName = "SelectField";
}
var Select2 = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("Select", props);
  var _omitThemingProps = omitThemingProps(props), rootProps = _omitThemingProps.rootProps, placeholder = _omitThemingProps.placeholder, icon = _omitThemingProps.icon, color3 = _omitThemingProps.color, height = _omitThemingProps.height, h = _omitThemingProps.h, minH = _omitThemingProps.minH, minHeight = _omitThemingProps.minHeight, iconColor = _omitThemingProps.iconColor, iconSize = _omitThemingProps.iconSize, rest = _objectWithoutPropertiesLoose28(_omitThemingProps, _excluded215);
  var _split = split(rest, layoutPropNames), layoutProps = _split[0], otherProps = _split[1];
  var ownProps = useFormControl(otherProps);
  var rootStyles = {
    width: "100%",
    height: "fit-content",
    position: "relative",
    color: color3
  };
  var fieldStyles = (0, import_lodash.default)({
    paddingEnd: "2rem"
  }, styles2.field, {
    _focus: {
      zIndex: "unset"
    }
  });
  return React59.createElement(chakra.div, _extends32({
    className: "chakra-select__wrapper",
    __css: rootStyles
  }, layoutProps, rootProps), React59.createElement(SelectField, _extends32({
    ref,
    height: h != null ? h : height,
    minH: minH != null ? minH : minHeight,
    placeholder
  }, ownProps, {
    __css: fieldStyles
  }), props.children), React59.createElement(SelectIcon, _extends32({
    "data-disabled": dataAttr(ownProps.disabled)
  }, (iconColor || color3) && {
    color: iconColor || color3
  }, {
    __css: styles2.icon
  }, iconSize && {
    fontSize: iconSize
  }), icon));
});
if (__DEV__) {
  Select2.displayName = "Select";
}
var DefaultIcon3 = function DefaultIcon4(props) {
  return React59.createElement("svg", _extends32({
    viewBox: "0 0 24 24"
  }, props), React59.createElement("path", {
    fill: "currentColor",
    d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
  }));
};
var IconWrapper = chakra("div", {
  baseStyle: {
    position: "absolute",
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    pointerEvents: "none",
    top: "50%",
    transform: "translateY(-50%)"
  }
});
var SelectIcon = function SelectIcon2(props) {
  var _props$children = props.children, children = _props$children === void 0 ? React59.createElement(DefaultIcon3, null) : _props$children, rest = _objectWithoutPropertiesLoose28(props, _excluded310);
  var clone = React59.cloneElement(children, {
    role: "presentation",
    className: "chakra-select__icon",
    focusable: false,
    "aria-hidden": true,
    style: {
      width: "1em",
      height: "1em",
      color: "currentColor"
    }
  });
  return React59.createElement(IconWrapper, _extends32({}, rest, {
    className: "chakra-select__icon-wrapper"
  }), React59.isValidElement(children) ? clone : null);
};
if (__DEV__) {
  SelectIcon.displayName = "SelectIcon";
}

// node_modules/@chakra-ui/skeleton/dist/chakra-ui-skeleton.esm.js
var React60 = __toESM(require_react());
function _extends33() {
  _extends33 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends33.apply(this, arguments);
}
function _objectWithoutPropertiesLoose29(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded47 = ["startColor", "endColor", "isLoaded", "fadeDuration", "speed", "className"];
var _excluded216 = ["noOfLines", "spacing", "skeletonHeight", "className", "startColor", "endColor", "isLoaded", "fadeDuration", "speed", "children"];
var _excluded311 = ["size"];
var StyledSkeleton = chakra("div", {
  baseStyle: {
    boxShadow: "none",
    backgroundClip: "padding-box",
    cursor: "default",
    color: "transparent",
    pointerEvents: "none",
    userSelect: "none",
    "&::before, &::after, *": {
      visibility: "hidden"
    }
  }
});
var fade3 = keyframes({
  from: {
    opacity: 0
  },
  to: {
    opacity: 1
  }
});
var useIsFirstRender = function useIsFirstRender2() {
  var isFirstRender = React60.useRef(true);
  React60.useEffect(function() {
    isFirstRender.current = false;
  }, []);
  return isFirstRender.current;
};
var Skeleton2 = forwardRef(function(props, ref) {
  var styles2 = useStyleConfig("Skeleton", props);
  var isFirstRender = useIsFirstRender();
  var _omitThemingProps = omitThemingProps(props);
  _omitThemingProps.startColor;
  _omitThemingProps.endColor;
  var isLoaded = _omitThemingProps.isLoaded, fadeDuration = _omitThemingProps.fadeDuration;
  _omitThemingProps.speed;
  var className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose29(_omitThemingProps, _excluded47);
  var wasPreviouslyLoaded = usePrevious(isLoaded);
  var _className = cx("chakra-skeleton", className);
  if (isLoaded) {
    var animation = isFirstRender || wasPreviouslyLoaded ? "none" : fade3 + " " + fadeDuration + "s";
    return React60.createElement(chakra.div, _extends33({
      ref,
      className: _className,
      __css: {
        animation
      }
    }, rest));
  }
  return React60.createElement(StyledSkeleton, _extends33({
    ref,
    className: _className
  }, rest, {
    __css: styles2
  }));
});
Skeleton2.defaultProps = {
  fadeDuration: 0.4,
  speed: 0.8
};
if (__DEV__) {
  Skeleton2.displayName = "Skeleton";
}
function range(count) {
  return Array(count).fill(1).map(function(_, index2) {
    return index2 + 1;
  });
}
var defaultNoOfLines = 3;
var SkeletonText = function SkeletonText2(props) {
  var _props$noOfLines = props.noOfLines, noOfLines = _props$noOfLines === void 0 ? defaultNoOfLines : _props$noOfLines, _props$spacing = props.spacing, spacing2 = _props$spacing === void 0 ? "0.5rem" : _props$spacing, _props$skeletonHeight = props.skeletonHeight, skeletonHeight = _props$skeletonHeight === void 0 ? "0.5rem" : _props$skeletonHeight, className = props.className, startColor = props.startColor, endColor = props.endColor, isLoaded = props.isLoaded, fadeDuration = props.fadeDuration, speed = props.speed, children = props.children, rest = _objectWithoutPropertiesLoose29(props, _excluded216);
  var noOfLinesValue = useBreakpointValue(typeof noOfLines === "number" ? [noOfLines] : noOfLines) || defaultNoOfLines;
  var numbers = range(noOfLinesValue);
  var getWidth = function getWidth2(index2) {
    if (noOfLinesValue > 1) {
      return index2 === numbers.length ? "80%" : "100%";
    }
    return "100%";
  };
  var _className = cx("chakra-skeleton__group", className);
  return React60.createElement(chakra.div, _extends33({
    className: _className
  }, rest), numbers.map(function(number2, index2) {
    if (isLoaded && index2 > 0) {
      return null;
    }
    var sizeProps = isLoaded ? null : {
      mb: number2 === numbers.length ? "0" : spacing2,
      width: getWidth(number2),
      height: skeletonHeight
    };
    return React60.createElement(Skeleton2, _extends33({
      key: numbers.length.toString() + number2,
      startColor,
      endColor,
      isLoaded,
      fadeDuration,
      speed
    }, sizeProps), index2 === 0 ? children : void 0);
  }));
};
if (__DEV__) {
  SkeletonText.displayName = "SkeletonText";
}
var SkeletonCircle = function SkeletonCircle2(_ref2) {
  var _ref$size = _ref2.size, size2 = _ref$size === void 0 ? "2rem" : _ref$size, rest = _objectWithoutPropertiesLoose29(_ref2, _excluded311);
  return React60.createElement(Skeleton2, _extends33({
    borderRadius: "full",
    boxSize: size2
  }, rest));
};
if (__DEV__) {
  SkeletonCircle.displayName = "SkeletonCircle";
}

// node_modules/@chakra-ui/slider/dist/chakra-ui-slider.esm.js
var React61 = __toESM(require_react());
var import_react71 = __toESM(require_react());
function _extends34() {
  _extends34 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends34.apply(this, arguments);
}
function _objectWithoutPropertiesLoose30(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function getIds(id2) {
  return {
    root: "slider-root-" + id2,
    getThumb: function getThumb(i) {
      return "slider-thumb-" + id2 + "-" + i;
    },
    getInput: function getInput(i) {
      return "slider-input-" + id2 + "-" + i;
    },
    track: "slider-track-" + id2,
    innerTrack: "slider-filled-track-" + id2,
    getMarker: function getMarker(i) {
      return "slider-marker-" + id2 + "-" + i;
    },
    output: "slider-output-" + id2
  };
}
function orient$1(options) {
  var orientation = options.orientation, vertical = options.vertical, horizontal = options.horizontal;
  return orientation === "vertical" ? vertical : horizontal;
}
var zeroRect = {
  width: 0,
  height: 0
};
function getStyles2(options) {
  var orientation = options.orientation, thumbPercents = options.thumbPercents, thumbRects = options.thumbRects, isReversed = options.isReversed;
  var getThumbStyle = function getThumbStyle2(i) {
    return _extends34({
      position: "absolute",
      userSelect: "none",
      WebkitUserSelect: "none",
      MozUserSelect: "none",
      msUserSelect: "none",
      touchAction: "none"
    }, orient$1({
      orientation,
      vertical: {
        bottom: "calc(" + thumbPercents[i] + "% - " + thumbRects[i].height / 2 + "px)"
      },
      horizontal: {
        left: "calc(" + thumbPercents[i] + "% - " + thumbRects[i].width / 2 + "px)"
      }
    }));
  };
  var size2 = orientation === "vertical" ? thumbRects.reduce(function(a2, b2) {
    return a2.height > b2.height ? a2 : b2;
  }, zeroRect) : thumbRects.reduce(function(a2, b2) {
    return a2.width > b2.width ? a2 : b2;
  }, zeroRect);
  var rootStyle = _extends34({
    position: "relative",
    touchAction: "none",
    WebkitTapHighlightColor: "rgba(0,0,0,0)",
    userSelect: "none",
    outline: 0
  }, orient$1({
    orientation,
    vertical: {
      paddingLeft: size2.width / 2,
      paddingRight: size2.width / 2
    },
    horizontal: {
      paddingTop: size2.height / 2,
      paddingBottom: size2.height / 2
    }
  }));
  var trackStyle = _extends34({
    position: "absolute"
  }, orient$1({
    orientation,
    vertical: {
      left: "50%",
      transform: "translateX(-50%)",
      height: "100%"
    },
    horizontal: {
      top: "50%",
      transform: "translateY(-50%)",
      width: "100%"
    }
  }));
  var isSingleThumb = thumbPercents.length === 1;
  var fallback = [0, isReversed ? 100 - thumbPercents[0] : thumbPercents[0]];
  var range2 = isSingleThumb ? fallback : thumbPercents;
  var start2 = range2[0];
  if (!isSingleThumb && isReversed) {
    start2 = 100 - start2;
  }
  var percent2 = Math.abs(range2[range2.length - 1] - range2[0]);
  var innerTrackStyle = _extends34({}, trackStyle, orient$1({
    orientation,
    vertical: isReversed ? {
      height: percent2 + "%",
      top: start2 + "%"
    } : {
      height: percent2 + "%",
      bottom: start2 + "%"
    },
    horizontal: isReversed ? {
      width: percent2 + "%",
      right: start2 + "%"
    } : {
      width: percent2 + "%",
      left: start2 + "%"
    }
  }));
  return {
    trackStyle,
    innerTrackStyle,
    rootStyle,
    getThumbStyle
  };
}
function getIsReversed(options) {
  var isReversed = options.isReversed, direction2 = options.direction, orientation = options.orientation;
  if (direction2 === "ltr" || orientation === "vertical") {
    return isReversed;
  }
  return !isReversed;
}
var _excluded$37 = ["min", "max", "onChange", "value", "defaultValue", "isReversed", "direction", "orientation", "id", "isDisabled", "isReadOnly", "onChangeStart", "onChangeEnd", "step", "getAriaValueText", "aria-valuetext", "aria-label", "aria-labelledby", "name", "focusThumbOnChange", "minStepsBetweenThumbs"];
var _excluded217 = ["index"];
var _excluded312 = ["value"];
var _excluded48 = ["index"];
function useRangeSlider(props) {
  var _props$min = props.min, min2 = _props$min === void 0 ? 0 : _props$min, _props$max = props.max, max2 = _props$max === void 0 ? 100 : _props$max, onChange = props.onChange, valueProp = props.value, defaultValue = props.defaultValue, isReversedProp = props.isReversed, _props$direction = props.direction, direction2 = _props$direction === void 0 ? "ltr" : _props$direction, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, idProp = props.id, isDisabled = props.isDisabled, isReadOnly = props.isReadOnly, onChangeStartProp = props.onChangeStart, onChangeEndProp = props.onChangeEnd, _props$step = props.step, step = _props$step === void 0 ? 1 : _props$step, getAriaValueTextProp = props.getAriaValueText, ariaValueText = props["aria-valuetext"], ariaLabel = props["aria-label"], ariaLabelledBy = props["aria-labelledby"], name = props.name, _props$focusThumbOnCh = props.focusThumbOnChange, focusThumbOnChange = _props$focusThumbOnCh === void 0 ? true : _props$focusThumbOnCh, _props$minStepsBetwee = props.minStepsBetweenThumbs, minStepsBetweenThumbs = _props$minStepsBetwee === void 0 ? 0 : _props$minStepsBetwee, htmlProps = _objectWithoutPropertiesLoose30(props, _excluded$37);
  var onChangeStart = useCallbackRef(onChangeStartProp);
  var onChangeEnd = useCallbackRef(onChangeEndProp);
  var getAriaValueText = useCallbackRef(getAriaValueTextProp);
  var isReversed = getIsReversed({
    isReversed: isReversedProp,
    direction: direction2,
    orientation
  });
  var _useControllableState = useControllableState({
    value: valueProp,
    defaultValue: defaultValue != null ? defaultValue : [25, 75],
    onChange
  }), valueState = _useControllableState[0], setValue = _useControllableState[1];
  if (!Array.isArray(valueState)) {
    throw new TypeError("[range-slider] You passed an invalid value for `value` or `defaultValue`, expected `Array` but got `" + typeof valueState + "`");
  }
  var _useBoolean = useBoolean(), isDragging = _useBoolean[0], setDragging = _useBoolean[1];
  var _useBoolean2 = useBoolean(), isFocused = _useBoolean2[0], setFocused = _useBoolean2[1];
  var _useState = (0, import_react71.useState)(-1), activeIndex = _useState[0], setActiveIndex = _useState[1];
  var eventSourceRef = (0, import_react71.useRef)(null);
  var isInteractive = !(isDisabled || isReadOnly);
  var initialValue = (0, import_react71.useRef)(valueState);
  var value = valueState.map(function(val) {
    return clampValue(val, min2, max2);
  });
  var valueRef = useLatestRef(value);
  var spacing2 = minStepsBetweenThumbs * step;
  var valueBounds = getValueBounds(value, min2, max2, spacing2);
  var reversedValue = value.map(function(val) {
    return max2 - val + min2;
  });
  var thumbValues = isReversed ? reversedValue : value;
  var thumbPercents = thumbValues.map(function(val) {
    return valueToPercent(val, min2, max2);
  });
  var isVertical = orientation === "vertical";
  var _useState2 = (0, import_react71.useState)(Array.from({
    length: value.length
  }).map(function() {
    return {
      width: 0,
      height: 0
    };
  })), thumbRects = _useState2[0], setThumbRects = _useState2[1];
  (0, import_react71.useEffect)(function() {
    var _rootRef$current;
    if (!rootRef.current)
      return;
    var thumbs = Array.from((_rootRef$current = rootRef.current) == null ? void 0 : _rootRef$current.querySelectorAll("[role=slider]"));
    var rects = thumbs.map(function(el) {
      return {
        width: el.offsetWidth,
        height: el.offsetHeight
      };
    });
    if (rects.length)
      setThumbRects(rects);
  }, []);
  var trackRef = (0, import_react71.useRef)(null);
  var rootRef = (0, import_react71.useRef)(null);
  var uuid = useId(idProp);
  var ids = getIds(uuid);
  var getValueFromPointer = (0, import_react71.useCallback)(function(event) {
    var _event$touches$, _event$touches;
    if (!trackRef.current)
      return;
    eventSourceRef.current = "pointer";
    var rect = trackRef.current.getBoundingClientRect();
    var _ref2 = (_event$touches$ = (_event$touches = event.touches) == null ? void 0 : _event$touches[0]) != null ? _event$touches$ : event, clientX = _ref2.clientX, clientY = _ref2.clientY;
    var diff = isVertical ? rect.bottom - clientY : clientX - rect.left;
    var length2 = isVertical ? rect.height : rect.width;
    var percent2 = diff / length2;
    if (isReversed)
      percent2 = 1 - percent2;
    return percentToValue(percent2, min2, max2);
  }, [isVertical, isReversed, max2, min2]);
  var tenSteps = (max2 - min2) / 10;
  var oneStep = step || (max2 - min2) / 100;
  var actions = (0, import_react71.useMemo)(function() {
    return {
      setValueAtIndex: function setValueAtIndex(index2, val) {
        if (!isInteractive)
          return;
        var bounds2 = valueBounds[index2];
        val = parseFloat(roundValueToStep(val, bounds2.min, oneStep));
        val = clampValue(val, bounds2.min, bounds2.max);
        var next = [].concat(value);
        next[index2] = val;
        setValue(next);
      },
      setActiveIndex,
      stepUp: function stepUp(index2, step2) {
        if (step2 === void 0) {
          step2 = oneStep;
        }
        var valueAtIndex = value[index2];
        var next = isReversed ? valueAtIndex - step2 : valueAtIndex + step2;
        actions.setValueAtIndex(index2, next);
      },
      stepDown: function stepDown(index2, step2) {
        if (step2 === void 0) {
          step2 = oneStep;
        }
        var valueAtIndex = value[index2];
        var next = isReversed ? valueAtIndex + step2 : valueAtIndex - step2;
        actions.setValueAtIndex(index2, next);
      },
      reset: function reset() {
        return setValue(initialValue.current);
      }
    };
  }, [oneStep, value, isReversed, setValue, isInteractive, valueBounds]);
  var onKeyDown = (0, import_react71.useCallback)(function(event) {
    var eventKey = normalizeEventKey(event);
    var keyMap = {
      ArrowRight: function ArrowRight() {
        return actions.stepUp(activeIndex);
      },
      ArrowUp: function ArrowUp() {
        return actions.stepUp(activeIndex);
      },
      ArrowLeft: function ArrowLeft() {
        return actions.stepDown(activeIndex);
      },
      ArrowDown: function ArrowDown() {
        return actions.stepDown(activeIndex);
      },
      PageUp: function PageUp() {
        return actions.stepUp(activeIndex, tenSteps);
      },
      PageDown: function PageDown() {
        return actions.stepDown(activeIndex, tenSteps);
      },
      Home: function Home() {
        var value2 = valueBounds[activeIndex].min;
        actions.setValueAtIndex(activeIndex, value2);
      },
      End: function End() {
        var value2 = valueBounds[activeIndex].max;
        actions.setValueAtIndex(activeIndex, value2);
      }
    };
    var action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      event.stopPropagation();
      action(event);
      eventSourceRef.current = "keyboard";
    }
  }, [actions, activeIndex, tenSteps, valueBounds]);
  var _useMemo = (0, import_react71.useMemo)(function() {
    return getStyles2({
      isReversed,
      orientation,
      thumbRects,
      thumbPercents
    });
  }, [isReversed, orientation, thumbPercents, thumbRects]), getThumbStyle = _useMemo.getThumbStyle, rootStyle = _useMemo.rootStyle, trackStyle = _useMemo.trackStyle, innerTrackStyle = _useMemo.innerTrackStyle;
  var focusThumb = (0, import_react71.useCallback)(function(index2) {
    var idx = index2 != null ? index2 : activeIndex;
    if (idx !== -1 && focusThumbOnChange) {
      var _rootRef$current2;
      var id2 = ids.getThumb(idx);
      var thumb = (_rootRef$current2 = rootRef.current) == null ? void 0 : _rootRef$current2.ownerDocument.getElementById(id2);
      if (thumb) {
        setTimeout(function() {
          return focus(thumb);
        });
      }
    }
  }, [focusThumbOnChange, activeIndex, ids]);
  useUpdateEffect(function() {
    if (eventSourceRef.current === "keyboard") {
      onChangeEnd == null ? void 0 : onChangeEnd(valueRef.current);
    }
  }, [value, onChangeEnd]);
  var _onPanSessionStart = function onPanSessionStart(event) {
    var pointValue = getValueFromPointer(event) || 0;
    var distances = value.map(function(val) {
      return Math.abs(val - pointValue);
    });
    var closest = Math.min.apply(Math, distances);
    var index2 = distances.indexOf(closest);
    var thumbsAtPosition = distances.filter(function(distance2) {
      return distance2 === closest;
    });
    var isThumbStacked = thumbsAtPosition.length > 1;
    if (isThumbStacked && pointValue > value[index2]) {
      index2 = index2 + thumbsAtPosition.length - 1;
    }
    setActiveIndex(index2);
    actions.setValueAtIndex(index2, pointValue);
    focusThumb(index2);
  };
  var _onPan = function onPan(event) {
    if (activeIndex == -1)
      return;
    var pointValue = getValueFromPointer(event) || 0;
    setActiveIndex(activeIndex);
    actions.setValueAtIndex(activeIndex, pointValue);
    focusThumb(activeIndex);
  };
  usePanGesture(rootRef, {
    onPanSessionStart: function onPanSessionStart(event) {
      if (!isInteractive)
        return;
      setDragging.on();
      _onPanSessionStart(event);
      onChangeStart == null ? void 0 : onChangeStart(valueRef.current);
    },
    onPanSessionEnd: function onPanSessionEnd() {
      if (!isInteractive)
        return;
      setDragging.off();
      onChangeEnd == null ? void 0 : onChangeEnd(valueRef.current);
    },
    onPan: function onPan(event) {
      if (!isInteractive)
        return;
      _onPan(event);
    }
  });
  var getRootProps = (0, import_react71.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends34({}, props2, htmlProps, {
      id: ids.root,
      ref: mergeRefs(ref, rootRef),
      tabIndex: -1,
      "aria-disabled": ariaAttr(isDisabled),
      "data-focused": dataAttr(isFocused),
      style: _extends34({}, props2.style, rootStyle)
    });
  }, [htmlProps, isDisabled, isFocused, rootStyle, ids]);
  var getTrackProps = (0, import_react71.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends34({}, props2, {
      ref: mergeRefs(ref, trackRef),
      id: ids.track,
      "data-disabled": dataAttr(isDisabled),
      style: _extends34({}, props2.style, trackStyle)
    });
  }, [isDisabled, trackStyle, ids]);
  var getInnerTrackProps = (0, import_react71.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends34({}, props2, {
      ref,
      id: ids.innerTrack,
      style: _extends34({}, props2.style, innerTrackStyle)
    });
  }, [innerTrackStyle, ids]);
  var getThumbProps = (0, import_react71.useCallback)(function(props2, ref) {
    var _getAriaValueText;
    if (ref === void 0) {
      ref = null;
    }
    var index2 = props2.index, rest = _objectWithoutPropertiesLoose30(props2, _excluded217);
    var _value = value[index2];
    if (_value == null) {
      throw new TypeError("[range-slider > thumb] Cannot find value at index `" + index2 + "`. The `value` or `defaultValue` length is : " + value.length);
    }
    var bounds2 = valueBounds[index2];
    return _extends34({}, rest, {
      ref,
      role: "slider",
      tabIndex: isInteractive ? 0 : void 0,
      id: ids.getThumb(index2),
      "data-active": dataAttr(isDragging && activeIndex === index2),
      "aria-valuetext": (_getAriaValueText = getAriaValueText == null ? void 0 : getAriaValueText(_value)) != null ? _getAriaValueText : ariaValueText == null ? void 0 : ariaValueText[index2],
      "aria-valuemin": bounds2.min,
      "aria-valuemax": bounds2.max,
      "aria-valuenow": _value,
      "aria-orientation": orientation,
      "aria-disabled": ariaAttr(isDisabled),
      "aria-readonly": ariaAttr(isReadOnly),
      "aria-label": ariaLabel == null ? void 0 : ariaLabel[index2],
      "aria-labelledby": ariaLabel != null && ariaLabel[index2] ? void 0 : ariaLabelledBy == null ? void 0 : ariaLabelledBy[index2],
      style: _extends34({}, props2.style, getThumbStyle(index2)),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onFocus: callAllHandlers(props2.onFocus, function() {
        setFocused.on();
        setActiveIndex(index2);
      }),
      onBlur: callAllHandlers(props2.onBlur, function() {
        setFocused.off();
        setActiveIndex(-1);
      })
    });
  }, [ids, value, valueBounds, isInteractive, isDragging, activeIndex, getAriaValueText, ariaValueText, orientation, isDisabled, isReadOnly, ariaLabel, ariaLabelledBy, getThumbStyle, onKeyDown, setFocused]);
  var getOutputProps = (0, import_react71.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends34({}, props2, {
      ref,
      id: ids.output,
      htmlFor: value.map(function(v, i) {
        return ids.getThumb(i);
      }).join(" "),
      "aria-live": "off"
    });
  }, [ids, value]);
  var getMarkerProps = (0, import_react71.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    var _props = props2, v = _props.value, rest = _objectWithoutPropertiesLoose30(_props, _excluded312);
    var isInRange = !(v < min2 || v > max2);
    var isHighlighted = v >= value[0] && v <= value[value.length - 1];
    var percent2 = valueToPercent(v, min2, max2);
    percent2 = isReversed ? 100 - percent2 : percent2;
    var markerStyle = _extends34({
      position: "absolute",
      pointerEvents: "none"
    }, orient$1({
      orientation,
      vertical: {
        bottom: percent2 + "%"
      },
      horizontal: {
        left: percent2 + "%"
      }
    }));
    return _extends34({}, rest, {
      ref,
      id: ids.getMarker(props2.value),
      role: "presentation",
      "aria-hidden": true,
      "data-disabled": dataAttr(isDisabled),
      "data-invalid": dataAttr(!isInRange),
      "data-highlighted": dataAttr(isHighlighted),
      style: _extends34({}, props2.style, markerStyle)
    });
  }, [isDisabled, isReversed, max2, min2, orientation, value, ids]);
  var getInputProps = (0, import_react71.useCallback)(function(props2, ref) {
    if (ref === void 0) {
      ref = null;
    }
    var index2 = props2.index, rest = _objectWithoutPropertiesLoose30(props2, _excluded48);
    return _extends34({}, rest, {
      ref,
      id: ids.getInput(index2),
      type: "hidden",
      value: value[index2],
      name: Array.isArray(name) ? name[index2] : name + "-" + index2
    });
  }, [name, value, ids]);
  return {
    state: {
      value,
      isFocused,
      isDragging,
      getThumbPercent: function getThumbPercent(i) {
        return thumbPercents[i];
      },
      getThumbMinValue: function getThumbMinValue(i) {
        return valueBounds[i].min;
      },
      getThumbMaxValue: function getThumbMaxValue(i) {
        return valueBounds[i].max;
      }
    },
    actions,
    getRootProps,
    getTrackProps,
    getInnerTrackProps,
    getThumbProps,
    getMarkerProps,
    getInputProps,
    getOutputProps
  };
}
var getValueBounds = function getValueBounds2(arr, min2, max2, spacing2) {
  return arr.map(function(v, i) {
    var _min = i === 0 ? min2 : arr[i - 1] + spacing2;
    var _max = i === arr.length - 1 ? max2 : arr[i + 1] - spacing2;
    return {
      min: _min,
      max: _max
    };
  });
};
var _excluded$29 = ["getRootProps"];
var _createContext$14 = createContext({
  name: "SliderContext",
  errorMessage: "useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <RangeSlider />"
});
var RangeSliderProvider = _createContext$14[0];
var useRangeSliderContext = _createContext$14[1];
var _createStylesContext$12 = createStylesContext("RangeSlider");
var StylesProvider$12 = _createStylesContext$12[0];
var useStyles$12 = _createStylesContext$12[1];
var useRangeSliderStyles = useStyles$12;
var RangeSlider = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("Slider", props);
  var ownProps = omitThemingProps(props);
  var _useTheme = useTheme(), direction2 = _useTheme.direction;
  ownProps.direction = direction2;
  var _useRangeSlider = useRangeSlider(ownProps), getRootProps = _useRangeSlider.getRootProps, context = _objectWithoutPropertiesLoose30(_useRangeSlider, _excluded$29);
  var ctx = React61.useMemo(function() {
    return _extends34({}, context, {
      name: props.name
    });
  }, [context, props.name]);
  return React61.createElement(RangeSliderProvider, {
    value: ctx
  }, React61.createElement(StylesProvider$12, {
    value: styles2
  }, React61.createElement(chakra.div, _extends34({}, getRootProps({}, ref), {
    className: "chakra-slider",
    __css: styles2.container
  }), props.children)));
});
RangeSlider.defaultProps = {
  orientation: "horizontal"
};
if (__DEV__) {
  RangeSlider.displayName = "RangeSlider";
}
var RangeSliderThumb = forwardRef(function(props, ref) {
  var _useRangeSliderContex = useRangeSliderContext(), getThumbProps = _useRangeSliderContex.getThumbProps, getInputProps = _useRangeSliderContex.getInputProps, name = _useRangeSliderContex.name;
  var styles2 = useStyles$12();
  var thumbProps = getThumbProps(props, ref);
  return React61.createElement(chakra.div, _extends34({}, thumbProps, {
    className: cx("chakra-slider__thumb", props.className),
    __css: styles2.thumb
  }), thumbProps.children, name && React61.createElement("input", getInputProps({
    index: props.index
  })));
});
if (__DEV__) {
  RangeSliderThumb.displayName = "RangeSliderThumb";
}
var RangeSliderTrack = forwardRef(function(props, ref) {
  var _useRangeSliderContex2 = useRangeSliderContext(), getTrackProps = _useRangeSliderContex2.getTrackProps;
  var styles2 = useStyles$12();
  var trackProps = getTrackProps(props, ref);
  return React61.createElement(chakra.div, _extends34({}, trackProps, {
    className: cx("chakra-slider__track", props.className),
    __css: styles2.track,
    "data-testid": "chakra-range-slider-track"
  }));
});
if (__DEV__) {
  RangeSliderTrack.displayName = "RangeSliderTrack";
}
var RangeSliderFilledTrack = forwardRef(function(props, ref) {
  var _useRangeSliderContex3 = useRangeSliderContext(), getInnerTrackProps = _useRangeSliderContex3.getInnerTrackProps;
  var styles2 = useStyles$12();
  var trackProps = getInnerTrackProps(props, ref);
  return React61.createElement(chakra.div, _extends34({}, trackProps, {
    className: "chakra-slider__filled-track",
    __css: styles2.filledTrack
  }));
});
if (__DEV__) {
  RangeSliderFilledTrack.displayName = "RangeSliderFilledTrack";
}
var RangeSliderMark = forwardRef(function(props, ref) {
  var _useRangeSliderContex4 = useRangeSliderContext(), getMarkerProps = _useRangeSliderContex4.getMarkerProps;
  var markProps = getMarkerProps(props, ref);
  return React61.createElement(chakra.div, _extends34({}, markProps, {
    className: cx("chakra-slider__marker", props.className)
  }));
});
if (__DEV__) {
  RangeSliderMark.displayName = "RangeSliderMark";
}
var _excluded$117 = ["min", "max", "onChange", "value", "defaultValue", "isReversed", "direction", "orientation", "id", "isDisabled", "isReadOnly", "onChangeStart", "onChangeEnd", "step", "getAriaValueText", "aria-valuetext", "aria-label", "aria-labelledby", "name", "focusThumbOnChange"];
function useSlider(props) {
  var _getAriaValueText;
  var _props$min = props.min, min2 = _props$min === void 0 ? 0 : _props$min, _props$max = props.max, max2 = _props$max === void 0 ? 100 : _props$max, onChange = props.onChange, valueProp = props.value, defaultValue = props.defaultValue, isReversedProp = props.isReversed, _props$direction = props.direction, direction2 = _props$direction === void 0 ? "ltr" : _props$direction, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, idProp = props.id, isDisabled = props.isDisabled, isReadOnly = props.isReadOnly, onChangeStartProp = props.onChangeStart, onChangeEndProp = props.onChangeEnd, _props$step = props.step, step = _props$step === void 0 ? 1 : _props$step, getAriaValueTextProp = props.getAriaValueText, ariaValueText = props["aria-valuetext"], ariaLabel = props["aria-label"], ariaLabelledBy = props["aria-labelledby"], name = props.name, _props$focusThumbOnCh = props.focusThumbOnChange, focusThumbOnChange = _props$focusThumbOnCh === void 0 ? true : _props$focusThumbOnCh, htmlProps = _objectWithoutPropertiesLoose30(props, _excluded$117);
  var onChangeStart = useCallbackRef(onChangeStartProp);
  var onChangeEnd = useCallbackRef(onChangeEndProp);
  var getAriaValueText = useCallbackRef(getAriaValueTextProp);
  var isReversed = getIsReversed({
    isReversed: isReversedProp,
    direction: direction2,
    orientation
  });
  var _useControllableState = useControllableState({
    value: valueProp,
    defaultValue: defaultValue != null ? defaultValue : getDefaultValue(min2, max2),
    onChange
  }), computedValue = _useControllableState[0], setValue = _useControllableState[1];
  var _useBoolean = useBoolean(), isDragging = _useBoolean[0], setDragging = _useBoolean[1];
  var _useBoolean2 = useBoolean(), isFocused = _useBoolean2[0], setFocused = _useBoolean2[1];
  var eventSourceRef = (0, import_react71.useRef)(null);
  var isInteractive = !(isDisabled || isReadOnly);
  var value = clampValue(computedValue, min2, max2);
  var valueRef = useLatestRef(value);
  var prevRef = (0, import_react71.useRef)(valueRef.current);
  var reversedValue = max2 - value + min2;
  var trackValue = isReversed ? reversedValue : value;
  var thumbPercent = valueToPercent(trackValue, min2, max2);
  var isVertical = orientation === "vertical";
  var trackRef = (0, import_react71.useRef)(null);
  var thumbRef = (0, import_react71.useRef)(null);
  var rootRef = (0, import_react71.useRef)(null);
  var _useIds = useIds(idProp, "slider-thumb", "slider-track"), thumbId = _useIds[0], trackId = _useIds[1];
  var getValueFromPointer = (0, import_react71.useCallback)(function(event) {
    var _event$touches$, _event$touches;
    if (!trackRef.current)
      return;
    eventSourceRef.current = "pointer";
    var trackRect = getBox(trackRef.current).borderBox;
    var _ref2 = (_event$touches$ = (_event$touches = event.touches) == null ? void 0 : _event$touches[0]) != null ? _event$touches$ : event, clientX = _ref2.clientX, clientY = _ref2.clientY;
    var diff = isVertical ? trackRect.bottom - clientY : clientX - trackRect.left;
    var length2 = isVertical ? trackRect.height : trackRect.width;
    var percent2 = diff / length2;
    if (isReversed) {
      percent2 = 1 - percent2;
    }
    var nextValue = percentToValue(percent2, min2, max2);
    if (step) {
      nextValue = parseFloat(roundValueToStep(nextValue, min2, step));
    }
    nextValue = clampValue(nextValue, min2, max2);
    return nextValue;
  }, [isVertical, isReversed, max2, min2, step]);
  var tenSteps = (max2 - min2) / 10;
  var oneStep = step || (max2 - min2) / 100;
  var constrain = (0, import_react71.useCallback)(function(value2) {
    if (!isInteractive)
      return;
    value2 = parseFloat(roundValueToStep(value2, min2, oneStep));
    value2 = clampValue(value2, min2, max2);
    setValue(value2);
  }, [oneStep, max2, min2, setValue, isInteractive]);
  var actions = (0, import_react71.useMemo)(function() {
    return {
      stepUp: function stepUp(step2) {
        if (step2 === void 0) {
          step2 = oneStep;
        }
        var next = isReversed ? value - step2 : value + step2;
        constrain(next);
      },
      stepDown: function stepDown(step2) {
        if (step2 === void 0) {
          step2 = oneStep;
        }
        var next = isReversed ? value + step2 : value - step2;
        constrain(next);
      },
      reset: function reset() {
        return constrain(defaultValue || 0);
      },
      stepTo: function stepTo(value2) {
        return constrain(value2);
      }
    };
  }, [constrain, isReversed, value, oneStep, defaultValue]);
  var onKeyDown = (0, import_react71.useCallback)(function(event) {
    var eventKey = normalizeEventKey(event);
    var keyMap = {
      ArrowRight: function ArrowRight() {
        return actions.stepUp();
      },
      ArrowUp: function ArrowUp() {
        return actions.stepUp();
      },
      ArrowLeft: function ArrowLeft() {
        return actions.stepDown();
      },
      ArrowDown: function ArrowDown() {
        return actions.stepDown();
      },
      PageUp: function PageUp() {
        return actions.stepUp(tenSteps);
      },
      PageDown: function PageDown() {
        return actions.stepDown(tenSteps);
      },
      Home: function Home() {
        return constrain(min2);
      },
      End: function End() {
        return constrain(max2);
      }
    };
    var action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      event.stopPropagation();
      action(event);
      eventSourceRef.current = "keyboard";
    }
  }, [actions, constrain, max2, min2, tenSteps]);
  var valueText = (_getAriaValueText = getAriaValueText == null ? void 0 : getAriaValueText(value)) != null ? _getAriaValueText : ariaValueText;
  var thumbBoxModel = useDimensions(thumbRef);
  var _useMemo = (0, import_react71.useMemo)(function() {
    var _thumbBoxModel$border;
    var thumbRect = (_thumbBoxModel$border = thumbBoxModel == null ? void 0 : thumbBoxModel.borderBox) != null ? _thumbBoxModel$border : {
      width: 0,
      height: 0
    };
    return getStyles2({
      isReversed,
      orientation,
      thumbRects: [thumbRect],
      thumbPercents: [thumbPercent]
    });
  }, [isReversed, orientation, thumbBoxModel == null ? void 0 : thumbBoxModel.borderBox, thumbPercent]), getThumbStyle = _useMemo.getThumbStyle, rootStyle = _useMemo.rootStyle, trackStyle = _useMemo.trackStyle, innerTrackStyle = _useMemo.innerTrackStyle;
  var focusThumb = (0, import_react71.useCallback)(function() {
    if (thumbRef.current && focusThumbOnChange) {
      setTimeout(function() {
        return focus(thumbRef.current);
      });
    }
  }, [focusThumbOnChange]);
  useUpdateEffect(function() {
    focusThumb();
    if (eventSourceRef.current === "keyboard") {
      onChangeEnd == null ? void 0 : onChangeEnd(valueRef.current);
    }
  }, [value, onChangeEnd]);
  var setValueFromPointer = function setValueFromPointer2(event) {
    var nextValue = getValueFromPointer(event);
    if (nextValue != null && nextValue !== valueRef.current) {
      setValue(nextValue);
    }
  };
  usePanGesture(rootRef, {
    onPanSessionStart: function onPanSessionStart(event) {
      if (!isInteractive)
        return;
      setDragging.on();
      focusThumb();
      setValueFromPointer(event);
      onChangeStart == null ? void 0 : onChangeStart(valueRef.current);
    },
    onPanSessionEnd: function onPanSessionEnd() {
      if (!isInteractive)
        return;
      setDragging.off();
      onChangeEnd == null ? void 0 : onChangeEnd(valueRef.current);
      prevRef.current = valueRef.current;
    },
    onPan: function onPan(event) {
      if (!isInteractive)
        return;
      setValueFromPointer(event);
    }
  });
  var getRootProps = (0, import_react71.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends34({}, props2, htmlProps, {
      ref: mergeRefs(ref, rootRef),
      tabIndex: -1,
      "aria-disabled": ariaAttr(isDisabled),
      "data-focused": dataAttr(isFocused),
      style: _extends34({}, props2.style, rootStyle)
    });
  }, [htmlProps, isDisabled, isFocused, rootStyle]);
  var getTrackProps = (0, import_react71.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends34({}, props2, {
      ref: mergeRefs(ref, trackRef),
      id: trackId,
      "data-disabled": dataAttr(isDisabled),
      style: _extends34({}, props2.style, trackStyle)
    });
  }, [isDisabled, trackId, trackStyle]);
  var getInnerTrackProps = (0, import_react71.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends34({}, props2, {
      ref,
      style: _extends34({}, props2.style, innerTrackStyle)
    });
  }, [innerTrackStyle]);
  var getThumbProps = (0, import_react71.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends34({}, props2, {
      ref: mergeRefs(ref, thumbRef),
      role: "slider",
      tabIndex: isInteractive ? 0 : void 0,
      id: thumbId,
      "data-active": dataAttr(isDragging),
      "aria-valuetext": valueText,
      "aria-valuemin": min2,
      "aria-valuemax": max2,
      "aria-valuenow": value,
      "aria-orientation": orientation,
      "aria-disabled": ariaAttr(isDisabled),
      "aria-readonly": ariaAttr(isReadOnly),
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabel ? void 0 : ariaLabelledBy,
      style: _extends34({}, props2.style, getThumbStyle(0)),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onFocus: callAllHandlers(props2.onFocus, setFocused.on),
      onBlur: callAllHandlers(props2.onBlur, setFocused.off)
    });
  }, [isInteractive, thumbId, isDragging, valueText, min2, max2, value, orientation, isDisabled, isReadOnly, ariaLabel, ariaLabelledBy, getThumbStyle, onKeyDown, setFocused.on, setFocused.off]);
  var getMarkerProps = (0, import_react71.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    var isInRange = !(props2.value < min2 || props2.value > max2);
    var isHighlighted = value >= props2.value;
    var markerPercent = valueToPercent(props2.value, min2, max2);
    var markerStyle = _extends34({
      position: "absolute",
      pointerEvents: "none"
    }, orient2({
      orientation,
      vertical: {
        bottom: isReversed ? 100 - markerPercent + "%" : markerPercent + "%"
      },
      horizontal: {
        left: isReversed ? 100 - markerPercent + "%" : markerPercent + "%"
      }
    }));
    return _extends34({}, props2, {
      ref,
      role: "presentation",
      "aria-hidden": true,
      "data-disabled": dataAttr(isDisabled),
      "data-invalid": dataAttr(!isInRange),
      "data-highlighted": dataAttr(isHighlighted),
      style: _extends34({}, props2.style, markerStyle)
    });
  }, [isDisabled, isReversed, max2, min2, orientation, value]);
  var getInputProps = (0, import_react71.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends34({}, props2, {
      ref,
      type: "hidden",
      value,
      name
    });
  }, [name, value]);
  return {
    state: {
      value,
      isFocused,
      isDragging
    },
    actions,
    getRootProps,
    getTrackProps,
    getInnerTrackProps,
    getThumbProps,
    getMarkerProps,
    getInputProps
  };
}
function orient2(options) {
  var orientation = options.orientation, vertical = options.vertical, horizontal = options.horizontal;
  return orientation === "vertical" ? vertical : horizontal;
}
function getDefaultValue(min2, max2) {
  return max2 < min2 ? min2 : min2 + (max2 - min2) / 2;
}
var _excluded49 = ["getInputProps", "getRootProps"];
var _createContext15 = createContext({
  name: "SliderContext",
  errorMessage: "useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <Slider />"
});
var SliderProvider = _createContext15[0];
var useSliderContext = _createContext15[1];
var _createStylesContext15 = createStylesContext("Slider");
var StylesProvider16 = _createStylesContext15[0];
var useStyles16 = _createStylesContext15[1];
var useSliderStyles = useStyles16;
var Slider2 = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("Slider", props);
  var ownProps = omitThemingProps(props);
  var _useTheme = useTheme(), direction2 = _useTheme.direction;
  ownProps.direction = direction2;
  var _useSlider = useSlider(ownProps), getInputProps = _useSlider.getInputProps, getRootProps = _useSlider.getRootProps, context = _objectWithoutPropertiesLoose30(_useSlider, _excluded49);
  var rootProps = getRootProps();
  var inputProps = getInputProps({}, ref);
  return React61.createElement(SliderProvider, {
    value: context
  }, React61.createElement(StylesProvider16, {
    value: styles2
  }, React61.createElement(chakra.div, _extends34({}, rootProps, {
    className: cx("chakra-slider", props.className),
    __css: styles2.container
  }), props.children, React61.createElement("input", inputProps))));
});
Slider2.defaultProps = {
  orientation: "horizontal"
};
if (__DEV__) {
  Slider2.displayName = "Slider";
}
var SliderThumb = forwardRef(function(props, ref) {
  var _useSliderContext = useSliderContext(), getThumbProps = _useSliderContext.getThumbProps;
  var styles2 = useStyles16();
  var thumbProps = getThumbProps(props, ref);
  return React61.createElement(chakra.div, _extends34({}, thumbProps, {
    className: cx("chakra-slider__thumb", props.className),
    __css: styles2.thumb
  }));
});
if (__DEV__) {
  SliderThumb.displayName = "SliderThumb";
}
var SliderTrack = forwardRef(function(props, ref) {
  var _useSliderContext2 = useSliderContext(), getTrackProps = _useSliderContext2.getTrackProps;
  var styles2 = useStyles16();
  var trackProps = getTrackProps(props, ref);
  return React61.createElement(chakra.div, _extends34({}, trackProps, {
    className: cx("chakra-slider__track", props.className),
    __css: styles2.track
  }));
});
if (__DEV__) {
  SliderTrack.displayName = "SliderTrack";
}
var SliderFilledTrack = forwardRef(function(props, ref) {
  var _useSliderContext3 = useSliderContext(), getInnerTrackProps = _useSliderContext3.getInnerTrackProps;
  var styles2 = useStyles16();
  var trackProps = getInnerTrackProps(props, ref);
  return React61.createElement(chakra.div, _extends34({}, trackProps, {
    className: cx("chakra-slider__filled-track", props.className),
    __css: styles2.filledTrack
  }));
});
if (__DEV__) {
  SliderFilledTrack.displayName = "SliderFilledTrack";
}
var SliderMark = forwardRef(function(props, ref) {
  var _useSliderContext4 = useSliderContext(), getMarkerProps = _useSliderContext4.getMarkerProps;
  var markProps = getMarkerProps(props, ref);
  return React61.createElement(chakra.div, _extends34({}, markProps, {
    className: cx("chakra-slider__marker", props.className)
  }));
});
if (__DEV__) {
  SliderMark.displayName = "SliderMark";
}

// node_modules/@chakra-ui/stat/dist/chakra-ui-stat.esm.js
var React62 = __toESM(require_react());
function _objectWithoutPropertiesLoose31(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends35() {
  _extends35 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends35.apply(this, arguments);
}
var _excluded50 = ["type", "aria-label"];
var _excluded218 = ["className", "children"];
var _createStylesContext16 = createStylesContext("Stat");
var StylesProvider17 = _createStylesContext16[0];
var useStyles17 = _createStylesContext16[1];
var useStatStyles = useStyles17;
var StatLabel = forwardRef(function(props, ref) {
  var styles2 = useStyles17();
  return React62.createElement(chakra.dt, _extends35({
    ref
  }, props, {
    className: cx("chakra-stat__label", props.className),
    __css: styles2.label
  }));
});
if (__DEV__) {
  StatLabel.displayName = "StatLabel";
}
var StatHelpText = forwardRef(function(props, ref) {
  var styles2 = useStyles17();
  return React62.createElement(chakra.dd, _extends35({
    ref
  }, props, {
    className: cx("chakra-stat__help-text", props.className),
    __css: styles2.helpText
  }));
});
if (__DEV__) {
  StatHelpText.displayName = "StatHelpText";
}
var StatNumber = forwardRef(function(props, ref) {
  var styles2 = useStyles17();
  return React62.createElement(chakra.dd, _extends35({
    ref
  }, props, {
    className: cx("chakra-stat__number", props.className),
    __css: _extends35({}, styles2.number, {
      fontFeatureSettings: "pnum",
      fontVariantNumeric: "proportional-nums"
    })
  }));
});
if (__DEV__) {
  StatNumber.displayName = "StatNumber";
}
var StatDownArrow = function StatDownArrow2(props) {
  return React62.createElement(Icon, _extends35({
    color: "red.400"
  }, props), React62.createElement("path", {
    fill: "currentColor",
    d: "M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
  }));
};
if (__DEV__) {
  StatDownArrow.displayName = "StatDownArrow";
}
var StatUpArrow = function StatUpArrow2(props) {
  return React62.createElement(Icon, _extends35({
    color: "green.400"
  }, props), React62.createElement("path", {
    fill: "currentColor",
    d: "M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z"
  }));
};
if (__DEV__) {
  StatUpArrow.displayName = "StatUpArrow";
}
var StatArrow = function StatArrow2(props) {
  var type = props.type, ariaLabel = props["aria-label"], rest = _objectWithoutPropertiesLoose31(props, _excluded50);
  var styles2 = useStyles17();
  var IconComponent = type === "increase" ? StatUpArrow : StatDownArrow;
  var defaultAriaLabel = type === "increase" ? "increased by" : "decreased by";
  var label = ariaLabel || defaultAriaLabel;
  return React62.createElement(React62.Fragment, null, React62.createElement(VisuallyHidden, null, label), React62.createElement(IconComponent, _extends35({
    "aria-hidden": true
  }, rest, {
    __css: styles2.icon
  })));
};
if (__DEV__) {
  StatArrow.displayName = "StatArrow";
}
var Stat2 = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("Stat", props);
  var statStyles = _extends35({
    position: "relative",
    flex: "1 1 0%"
  }, styles2.container);
  var _omitThemingProps = omitThemingProps(props), className = _omitThemingProps.className, children = _omitThemingProps.children, rest = _objectWithoutPropertiesLoose31(_omitThemingProps, _excluded218);
  return React62.createElement(StylesProvider17, {
    value: styles2
  }, React62.createElement(chakra.div, _extends35({
    ref
  }, rest, {
    className: cx("chakra-stat", className),
    __css: statStyles
  }), React62.createElement("dl", null, children)));
});
if (__DEV__) {
  Stat2.displayName = "Stat";
}
var StatGroup = forwardRef(function(props, ref) {
  return React62.createElement(chakra.div, _extends35({}, props, {
    ref,
    role: "group",
    className: cx("chakra-stat__group", props.className),
    __css: {
      display: "flex",
      flexWrap: "wrap",
      justifyContent: "space-around",
      alignItems: "flex-start"
    }
  }));
});
if (__DEV__) {
  StatGroup.displayName = "StatGroup";
}

// node_modules/@chakra-ui/switch/dist/chakra-ui-switch.esm.js
var React63 = __toESM(require_react());
function _extends36() {
  _extends36 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends36.apply(this, arguments);
}
function _objectWithoutPropertiesLoose32(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded51 = ["spacing", "children"];
var Switch2 = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("Switch", props);
  var _omitThemingProps = omitThemingProps(props), _omitThemingProps$spa = _omitThemingProps.spacing, spacing2 = _omitThemingProps$spa === void 0 ? "0.5rem" : _omitThemingProps$spa, children = _omitThemingProps.children, ownProps = _objectWithoutPropertiesLoose32(_omitThemingProps, _excluded51);
  var _useCheckbox = useCheckbox(ownProps), state = _useCheckbox.state, getInputProps = _useCheckbox.getInputProps, getCheckboxProps = _useCheckbox.getCheckboxProps, getRootProps = _useCheckbox.getRootProps, getLabelProps = _useCheckbox.getLabelProps;
  var containerStyles = React63.useMemo(function() {
    return _extends36({
      display: "inline-block",
      position: "relative",
      verticalAlign: "middle",
      lineHeight: 0
    }, styles2.container);
  }, [styles2.container]);
  var trackStyles = React63.useMemo(function() {
    return _extends36({
      display: "inline-flex",
      flexShrink: 0,
      justifyContent: "flex-start",
      boxSizing: "content-box",
      cursor: "pointer"
    }, styles2.track);
  }, [styles2.track]);
  var labelStyles = React63.useMemo(function() {
    return _extends36({
      userSelect: "none",
      marginStart: spacing2
    }, styles2.label);
  }, [spacing2, styles2.label]);
  return React63.createElement(chakra.label, _extends36({}, getRootProps(), {
    className: cx("chakra-switch", props.className),
    __css: containerStyles
  }), React63.createElement("input", _extends36({
    className: "chakra-switch__input"
  }, getInputProps({}, ref))), React63.createElement(chakra.span, _extends36({}, getCheckboxProps(), {
    className: "chakra-switch__track",
    __css: trackStyles
  }), React63.createElement(chakra.span, {
    __css: styles2.thumb,
    className: "chakra-switch__thumb",
    "data-checked": dataAttr(state.isChecked),
    "data-hover": dataAttr(state.isHovered)
  })), children && React63.createElement(chakra.span, _extends36({
    className: "chakra-switch__label"
  }, getLabelProps(), {
    __css: labelStyles
  }), children));
});
if (__DEV__) {
  Switch2.displayName = "Switch";
}

// node_modules/@chakra-ui/tabs/dist/chakra-ui-tabs.esm.js
var React64 = __toESM(require_react());
function _extends37() {
  _extends37 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends37.apply(this, arguments);
}
function _objectWithoutPropertiesLoose33(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$118 = ["defaultIndex", "onChange", "index", "isManual", "isLazy", "lazyBehavior", "orientation", "direction"];
var _excluded2$17 = ["isDisabled", "isFocusable"];
var _excluded313 = ["isSelected", "id", "children"];
var _createDescendantCont4 = createDescendantContext();
var TabsDescendantsProvider = _createDescendantCont4[0];
var useTabsDescendantsContext = _createDescendantCont4[1];
var useTabsDescendants = _createDescendantCont4[2];
var useTabsDescendant = _createDescendantCont4[3];
function useTabs(props) {
  var defaultIndex = props.defaultIndex, onChange = props.onChange, index2 = props.index, isManual = props.isManual, isLazy = props.isLazy, _props$lazyBehavior = props.lazyBehavior, lazyBehavior = _props$lazyBehavior === void 0 ? "unmount" : _props$lazyBehavior, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, _props$direction = props.direction, direction2 = _props$direction === void 0 ? "ltr" : _props$direction, htmlProps = _objectWithoutPropertiesLoose33(props, _excluded$118);
  var _React$useState = React64.useState(defaultIndex != null ? defaultIndex : 0), focusedIndex = _React$useState[0], setFocusedIndex = _React$useState[1];
  var _useControllableState = useControllableState({
    defaultValue: defaultIndex != null ? defaultIndex : 0,
    value: index2,
    onChange
  }), selectedIndex = _useControllableState[0], setSelectedIndex = _useControllableState[1];
  React64.useEffect(function() {
    if (index2 != null) {
      setFocusedIndex(index2);
    }
  }, [index2]);
  var descendants = useTabsDescendants();
  var id2 = useId(props.id, "tabs");
  return {
    id: id2,
    selectedIndex,
    focusedIndex,
    setSelectedIndex,
    setFocusedIndex,
    isManual,
    isLazy,
    lazyBehavior,
    orientation,
    descendants,
    direction: direction2,
    htmlProps
  };
}
var _createContext16 = createContext({
  name: "TabsContext",
  errorMessage: "useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />"
});
var TabsProvider = _createContext16[0];
var useTabsContext = _createContext16[1];
function useTabList(props) {
  var _useTabsContext = useTabsContext(), focusedIndex = _useTabsContext.focusedIndex, orientation = _useTabsContext.orientation, direction2 = _useTabsContext.direction;
  var descendants = useTabsDescendantsContext();
  var onKeyDown = React64.useCallback(function(event) {
    var _keyMap;
    var nextTab = function nextTab2() {
      var next = descendants.nextEnabled(focusedIndex);
      if (next)
        focus(next.node);
    };
    var prevTab = function prevTab2() {
      var prev = descendants.prevEnabled(focusedIndex);
      if (prev)
        focus(prev.node);
    };
    var firstTab = function firstTab2() {
      var first = descendants.firstEnabled();
      if (first)
        focus(first.node);
    };
    var lastTab = function lastTab2() {
      var last = descendants.lastEnabled();
      if (last)
        focus(last.node);
    };
    var isHorizontal = orientation === "horizontal";
    var isVertical = orientation === "vertical";
    var eventKey = normalizeEventKey(event);
    var ArrowStart = direction2 === "ltr" ? "ArrowLeft" : "ArrowRight";
    var ArrowEnd = direction2 === "ltr" ? "ArrowRight" : "ArrowLeft";
    var keyMap = (_keyMap = {}, _keyMap[ArrowStart] = function() {
      return isHorizontal && prevTab();
    }, _keyMap[ArrowEnd] = function() {
      return isHorizontal && nextTab();
    }, _keyMap.ArrowDown = function ArrowDown() {
      return isVertical && nextTab();
    }, _keyMap.ArrowUp = function ArrowUp() {
      return isVertical && prevTab();
    }, _keyMap.Home = firstTab, _keyMap.End = lastTab, _keyMap);
    var action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      action(event);
    }
  }, [descendants, focusedIndex, orientation, direction2]);
  return _extends37({}, props, {
    role: "tablist",
    "aria-orientation": orientation,
    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)
  });
}
function useTab(props) {
  var isDisabled = props.isDisabled, isFocusable = props.isFocusable, htmlProps = _objectWithoutPropertiesLoose33(props, _excluded2$17);
  var _useTabsContext2 = useTabsContext(), setSelectedIndex = _useTabsContext2.setSelectedIndex, isManual = _useTabsContext2.isManual, id2 = _useTabsContext2.id, setFocusedIndex = _useTabsContext2.setFocusedIndex, selectedIndex = _useTabsContext2.selectedIndex;
  var _useTabsDescendant = useTabsDescendant({
    disabled: isDisabled && !isFocusable
  }), index2 = _useTabsDescendant.index, register = _useTabsDescendant.register;
  var isSelected = index2 === selectedIndex;
  var onClick = function onClick2() {
    setSelectedIndex(index2);
  };
  var onFocus3 = function onFocus4() {
    setFocusedIndex(index2);
    var isDisabledButFocusable = isDisabled && isFocusable;
    var shouldSelect = !isManual && !isDisabledButFocusable;
    if (shouldSelect) {
      setSelectedIndex(index2);
    }
  };
  var clickableProps = useClickable(_extends37({}, htmlProps, {
    ref: mergeRefs(register, props.ref),
    isDisabled,
    isFocusable,
    onClick: callAllHandlers(props.onClick, onClick)
  }));
  var type = "button";
  return _extends37({}, clickableProps, {
    id: makeTabId(id2, index2),
    role: "tab",
    tabIndex: isSelected ? 0 : -1,
    type,
    "aria-selected": isSelected,
    "aria-controls": makeTabPanelId(id2, index2),
    onFocus: isDisabled ? void 0 : callAllHandlers(props.onFocus, onFocus3)
  });
}
function useTabPanels(props) {
  var context = useTabsContext();
  var id2 = context.id, selectedIndex = context.selectedIndex;
  var validChildren = getValidChildren(props.children);
  var children = validChildren.map(function(child, index2) {
    return React64.cloneElement(child, {
      isSelected: index2 === selectedIndex,
      id: makeTabPanelId(id2, index2),
      "aria-labelledby": makeTabId(id2, index2)
    });
  });
  return _extends37({}, props, {
    children
  });
}
function useTabPanel(props) {
  var isSelected = props.isSelected, id2 = props.id, children = props.children, htmlProps = _objectWithoutPropertiesLoose33(props, _excluded313);
  var _useTabsContext3 = useTabsContext(), isLazy = _useTabsContext3.isLazy, lazyBehavior = _useTabsContext3.lazyBehavior;
  var hasBeenSelected = React64.useRef(false);
  if (isSelected) {
    hasBeenSelected.current = true;
  }
  var shouldRenderChildren = determineLazyBehavior({
    hasBeenSelected: hasBeenSelected.current,
    isSelected,
    isLazy,
    lazyBehavior
  });
  return _extends37({
    tabIndex: 0
  }, htmlProps, {
    children: shouldRenderChildren ? children : null,
    role: "tabpanel",
    hidden: !isSelected,
    id: id2
  });
}
function useTabIndicator() {
  var context = useTabsContext();
  var descendants = useTabsDescendantsContext();
  var selectedIndex = context.selectedIndex, orientation = context.orientation;
  var isHorizontal = orientation === "horizontal";
  var isVertical = orientation === "vertical";
  var _React$useState2 = React64.useState(function() {
    if (isHorizontal)
      return {
        left: 0,
        width: 0
      };
    if (isVertical)
      return {
        top: 0,
        height: 0
      };
    return void 0;
  }), rect = _React$useState2[0], setRect = _React$useState2[1];
  var _React$useState3 = React64.useState(false), hasMeasured = _React$useState3[0], setHasMeasured = _React$useState3[1];
  useSafeLayoutEffect(function() {
    if (isUndefined(selectedIndex))
      return void 0;
    var tab = descendants.item(selectedIndex);
    if (isUndefined(tab))
      return void 0;
    if (isHorizontal) {
      setRect({
        left: tab.node.offsetLeft,
        width: tab.node.offsetWidth
      });
    }
    if (isVertical) {
      setRect({
        top: tab.node.offsetTop,
        height: tab.node.offsetHeight
      });
    }
    var id2 = requestAnimationFrame(function() {
      setHasMeasured(true);
    });
    return function() {
      if (id2) {
        cancelAnimationFrame(id2);
      }
    };
  }, [selectedIndex, isHorizontal, isVertical, descendants]);
  return _extends37({
    position: "absolute",
    transitionProperty: "left, right, top, bottom, height, width",
    transitionDuration: hasMeasured ? "200ms" : "0ms",
    transitionTimingFunction: "cubic-bezier(0, 0, 0.2, 1)"
  }, rect);
}
function makeTabId(id2, index2) {
  return id2 + "--tab-" + index2;
}
function makeTabPanelId(id2, index2) {
  return id2 + "--tabpanel-" + index2;
}
var _excluded55 = ["children", "className"];
var _excluded219 = ["htmlProps", "descendants"];
var _createStylesContext17 = createStylesContext("Tabs");
var StylesProvider18 = _createStylesContext17[0];
var useStyles18 = _createStylesContext17[1];
var useTabsStyles = useStyles18;
var Tabs2 = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("Tabs", props);
  var _omitThemingProps = omitThemingProps(props), children = _omitThemingProps.children, className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose33(_omitThemingProps, _excluded55);
  var _useTabs = useTabs(rest), htmlProps = _useTabs.htmlProps, descendants = _useTabs.descendants, ctx = _objectWithoutPropertiesLoose33(_useTabs, _excluded219);
  var context = React64.useMemo(function() {
    return ctx;
  }, [ctx]);
  var rootProps = omit(htmlProps, ["isFitted"]);
  return React64.createElement(TabsDescendantsProvider, {
    value: descendants
  }, React64.createElement(TabsProvider, {
    value: context
  }, React64.createElement(StylesProvider18, {
    value: styles2
  }, React64.createElement(chakra.div, _extends37({
    className: cx("chakra-tabs", className),
    ref
  }, rootProps, {
    __css: styles2.root
  }), children))));
});
if (__DEV__) {
  Tabs2.displayName = "Tabs";
}
var Tab = forwardRef(function(props, ref) {
  var styles2 = useStyles18();
  var tabProps = useTab(_extends37({}, props, {
    ref
  }));
  var tabStyles = _extends37({
    outline: "0",
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }, styles2.tab);
  return React64.createElement(chakra.button, _extends37({}, tabProps, {
    className: cx("chakra-tabs__tab", props.className),
    __css: tabStyles
  }));
});
if (__DEV__) {
  Tab.displayName = "Tab";
}
var TabList = forwardRef(function(props, ref) {
  var tablistProps = useTabList(_extends37({}, props, {
    ref
  }));
  var styles2 = useStyles18();
  var tablistStyles = _extends37({
    display: "flex"
  }, styles2.tablist);
  return React64.createElement(chakra.div, _extends37({}, tablistProps, {
    className: cx("chakra-tabs__tablist", props.className),
    __css: tablistStyles
  }));
});
if (__DEV__) {
  TabList.displayName = "TabList";
}
var TabPanel = forwardRef(function(props, ref) {
  var panelProps = useTabPanel(_extends37({}, props, {
    ref
  }));
  var styles2 = useStyles18();
  return React64.createElement(chakra.div, _extends37({
    outline: "0"
  }, panelProps, {
    className: cx("chakra-tabs__tab-panel", props.className),
    __css: styles2.tabpanel
  }));
});
if (__DEV__) {
  TabPanel.displayName = "TabPanel";
}
var TabPanels = forwardRef(function(props, ref) {
  var panelsProps = useTabPanels(props);
  var styles2 = useStyles18();
  return React64.createElement(chakra.div, _extends37({}, panelsProps, {
    width: "100%",
    ref,
    className: cx("chakra-tabs__tab-panels", props.className),
    __css: styles2.tabpanels
  }));
});
if (__DEV__) {
  TabPanels.displayName = "TabPanels";
}
var TabIndicator = forwardRef(function(props, ref) {
  var indicatorStyle = useTabIndicator();
  var style2 = _extends37({}, props.style, indicatorStyle);
  var styles2 = useStyles18();
  return React64.createElement(chakra.div, _extends37({
    ref
  }, props, {
    className: cx("chakra-tabs__tab-indicator", props.className),
    style: style2,
    __css: styles2.indicator
  }));
});
if (__DEV__) {
  TabIndicator.displayName = "TabIndicator";
}

// node_modules/@chakra-ui/tag/dist/chakra-ui-tag.esm.js
var React65 = __toESM(require_react());
function _objectWithoutPropertiesLoose34(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends38() {
  _extends38 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends38.apply(this, arguments);
}
var _excluded56 = ["isDisabled", "children"];
var _createStylesContext18 = createStylesContext("Tag");
var StylesProvider19 = _createStylesContext18[0];
var useStyles19 = _createStylesContext18[1];
var useTagStyles = useStyles19;
var Tag2 = forwardRef(function(props, ref) {
  var styles2 = useMultiStyleConfig("Tag", props);
  var ownProps = omitThemingProps(props);
  var containerStyles = _extends38({
    display: "inline-flex",
    verticalAlign: "top",
    alignItems: "center",
    maxWidth: "100%"
  }, styles2.container);
  return React65.createElement(StylesProvider19, {
    value: styles2
  }, React65.createElement(chakra.span, _extends38({
    ref
  }, ownProps, {
    __css: containerStyles
  })));
});
if (__DEV__) {
  Tag2.displayName = "Tag";
}
var TagLabel = forwardRef(function(props, ref) {
  var styles2 = useStyles19();
  return React65.createElement(chakra.span, _extends38({
    ref,
    noOfLines: 1
  }, props, {
    __css: styles2.label
  }));
});
if (__DEV__) {
  TagLabel.displayName = "TagLabel";
}
var TagLeftIcon = forwardRef(function(props, ref) {
  return React65.createElement(Icon, _extends38({
    ref,
    verticalAlign: "top",
    marginEnd: "0.5rem"
  }, props));
});
if (__DEV__) {
  TagLeftIcon.displayName = "TagLeftIcon";
}
var TagRightIcon = forwardRef(function(props, ref) {
  return React65.createElement(Icon, _extends38({
    ref,
    verticalAlign: "top",
    marginStart: "0.5rem"
  }, props));
});
if (__DEV__) {
  TagRightIcon.displayName = "TagRightIcon";
}
var TagCloseIcon = function TagCloseIcon2(props) {
  return React65.createElement(Icon, _extends38({
    verticalAlign: "inherit",
    viewBox: "0 0 512 512"
  }, props), React65.createElement("path", {
    fill: "currentColor",
    d: "M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z"
  }));
};
if (__DEV__) {
  TagCloseIcon.displayName = "TagCloseIcon";
}
var TagCloseButton = function TagCloseButton2(props) {
  var isDisabled = props.isDisabled, children = props.children, rest = _objectWithoutPropertiesLoose34(props, _excluded56);
  var styles2 = useStyles19();
  var btnStyles = _extends38({
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    outline: "0"
  }, styles2.closeButton);
  return React65.createElement(chakra.button, _extends38({
    "aria-label": "close"
  }, rest, {
    type: "button",
    disabled: isDisabled,
    __css: btnStyles
  }), children || React65.createElement(TagCloseIcon, null));
};
if (__DEV__) {
  TagCloseButton.displayName = "TagCloseButton";
}

// node_modules/@chakra-ui/textarea/dist/chakra-ui-textarea.esm.js
var React66 = __toESM(require_react());
function _extends39() {
  _extends39 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends39.apply(this, arguments);
}
function _objectWithoutPropertiesLoose35(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded57 = ["className", "rows"];
var omitted = ["h", "minH", "height", "minHeight"];
var Textarea2 = forwardRef(function(props, ref) {
  var styles2 = useStyleConfig("Textarea", props);
  var _omitThemingProps = omitThemingProps(props), className = _omitThemingProps.className, rows = _omitThemingProps.rows, rest = _objectWithoutPropertiesLoose35(_omitThemingProps, _excluded57);
  var textareaProps = useFormControl(rest);
  var textareaStyles = rows ? omit(styles2, omitted) : styles2;
  return React66.createElement(chakra.textarea, _extends39({
    ref,
    rows
  }, textareaProps, {
    className: cx("chakra-textarea", className),
    __css: textareaStyles
  }));
});
if (__DEV__) {
  Textarea2.displayName = "Textarea";
}

// node_modules/@chakra-ui/tooltip/dist/chakra-ui-tooltip.esm.js
var React67 = __toESM(require_react());
function _extends40() {
  _extends40 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends40.apply(this, arguments);
}
function _objectWithoutPropertiesLoose36(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var scale2 = {
  exit: {
    scale: 0.85,
    opacity: 0,
    transition: {
      opacity: {
        duration: 0.15,
        easings: "easeInOut"
      },
      scale: {
        duration: 0.2,
        easings: "easeInOut"
      }
    }
  },
  enter: {
    scale: 1,
    opacity: 1,
    transition: {
      opacity: {
        easings: "easeOut",
        duration: 0.2
      },
      scale: {
        duration: 0.2,
        ease: [0.175, 0.885, 0.4, 1.1]
      }
    }
  }
};
var _excluded$119 = ["openDelay", "closeDelay", "closeOnClick", "closeOnMouseDown", "closeOnEsc", "onOpen", "onClose", "placement", "id", "isOpen", "defaultIsOpen", "arrowSize", "arrowShadowColor", "arrowPadding", "modifiers", "isDisabled", "gutter", "offset", "direction"];
function useTooltip(props) {
  if (props === void 0) {
    props = {};
  }
  var _props = props, _props$openDelay = _props.openDelay, openDelay = _props$openDelay === void 0 ? 0 : _props$openDelay, _props$closeDelay = _props.closeDelay, closeDelay = _props$closeDelay === void 0 ? 0 : _props$closeDelay, _props$closeOnClick = _props.closeOnClick, closeOnClick = _props$closeOnClick === void 0 ? true : _props$closeOnClick, closeOnMouseDown = _props.closeOnMouseDown, _props$closeOnEsc = _props.closeOnEsc, closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc, onOpenProp = _props.onOpen, onCloseProp = _props.onClose, placement = _props.placement, id2 = _props.id, isOpenProp = _props.isOpen, defaultIsOpen = _props.defaultIsOpen, _props$arrowSize = _props.arrowSize, arrowSize = _props$arrowSize === void 0 ? 10 : _props$arrowSize, arrowShadowColor = _props.arrowShadowColor, arrowPadding = _props.arrowPadding, modifiers = _props.modifiers, isDisabled = _props.isDisabled, gutter = _props.gutter, offset2 = _props.offset, direction2 = _props.direction, htmlProps = _objectWithoutPropertiesLoose36(_props, _excluded$119);
  var _useDisclosure = useDisclosure({
    isOpen: isOpenProp,
    defaultIsOpen,
    onOpen: onOpenProp,
    onClose: onCloseProp
  }), isOpen = _useDisclosure.isOpen, onOpen = _useDisclosure.onOpen, onClose = _useDisclosure.onClose;
  var _usePopper = usePopper({
    enabled: isOpen,
    placement,
    arrowPadding,
    modifiers,
    gutter,
    offset: offset2,
    direction: direction2
  }), referenceRef = _usePopper.referenceRef, getPopperProps = _usePopper.getPopperProps, getArrowInnerProps = _usePopper.getArrowInnerProps, getArrowProps = _usePopper.getArrowProps;
  var tooltipId = useId(id2, "tooltip");
  var ref = React67.useRef(null);
  var enterTimeout = React67.useRef();
  var exitTimeout = React67.useRef();
  var openWithDelay = React67.useCallback(function() {
    if (!isDisabled && !enterTimeout.current) {
      enterTimeout.current = window.setTimeout(onOpen, openDelay);
    }
  }, [isDisabled, onOpen, openDelay]);
  var closeWithDelay = React67.useCallback(function() {
    if (enterTimeout.current) {
      clearTimeout(enterTimeout.current);
      enterTimeout.current = void 0;
    }
    exitTimeout.current = window.setTimeout(onClose, closeDelay);
  }, [closeDelay, onClose]);
  var onClick = React67.useCallback(function() {
    if (isOpen && closeOnClick) {
      closeWithDelay();
    }
  }, [closeOnClick, closeWithDelay, isOpen]);
  var onMouseDown = React67.useCallback(function() {
    if (isOpen && closeOnMouseDown) {
      closeWithDelay();
    }
  }, [closeOnMouseDown, closeWithDelay, isOpen]);
  var onKeyDown = React67.useCallback(function(event) {
    if (isOpen && event.key === "Escape") {
      closeWithDelay();
    }
  }, [isOpen, closeWithDelay]);
  useEventListener("keydown", closeOnEsc ? onKeyDown : void 0);
  React67.useEffect(function() {
    return function() {
      clearTimeout(enterTimeout.current);
      clearTimeout(exitTimeout.current);
    };
  }, []);
  useEventListener("mouseleave", closeWithDelay, function() {
    return ref.current;
  });
  var getTriggerProps = React67.useCallback(function(props2, _ref2) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (_ref2 === void 0) {
      _ref2 = null;
    }
    var triggerProps = _extends40({}, props2, {
      ref: mergeRefs(ref, _ref2, referenceRef),
      onMouseEnter: callAllHandlers(props2.onMouseEnter, openWithDelay),
      onClick: callAllHandlers(props2.onClick, onClick),
      onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown),
      onFocus: callAllHandlers(props2.onFocus, openWithDelay),
      onBlur: callAllHandlers(props2.onBlur, closeWithDelay),
      "aria-describedby": isOpen ? tooltipId : void 0
    });
    return triggerProps;
  }, [openWithDelay, closeWithDelay, onMouseDown, isOpen, tooltipId, onClick, referenceRef]);
  var getTooltipPositionerProps = React67.useCallback(function(props2, forwardedRef) {
    var _extends210;
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return getPopperProps(_extends40({}, props2, {
      style: _extends40({}, props2.style, (_extends210 = {}, _extends210[cssVars.arrowSize["var"]] = arrowSize ? px(arrowSize) : void 0, _extends210[cssVars.arrowShadowColor["var"]] = arrowShadowColor, _extends210))
    }), forwardedRef);
  }, [getPopperProps, arrowSize, arrowShadowColor]);
  var getTooltipProps = React67.useCallback(function(props2, ref2) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref2 === void 0) {
      ref2 = null;
    }
    var tooltipProps = _extends40({
      ref: ref2
    }, htmlProps, props2, {
      id: tooltipId,
      role: "tooltip",
      style: _extends40({}, props2.style, {
        position: "relative",
        transformOrigin: cssVars.transformOrigin.varRef
      })
    });
    return tooltipProps;
  }, [htmlProps, tooltipId]);
  return {
    isOpen,
    show: openWithDelay,
    hide: closeWithDelay,
    getTriggerProps,
    getTooltipProps,
    getTooltipPositionerProps,
    getArrowProps,
    getArrowInnerProps
  };
}
var _excluded58 = ["children", "label", "shouldWrapChildren", "aria-label", "hasArrow", "bg", "portalProps", "background", "backgroundColor", "bgColor"];
var StyledTooltip = chakra(motion.div);
var Tooltip2 = forwardRef(function(props, ref) {
  var _ref2, _ref22;
  var styles2 = useStyleConfig("Tooltip", props);
  var ownProps = omitThemingProps(props);
  var theme2 = useTheme();
  var children = ownProps.children, label = ownProps.label, shouldWrapChildren = ownProps.shouldWrapChildren, ariaLabel = ownProps["aria-label"], hasArrow = ownProps.hasArrow, bg = ownProps.bg, portalProps = ownProps.portalProps, background2 = ownProps.background, backgroundColor = ownProps.backgroundColor, bgColor = ownProps.bgColor, rest = _objectWithoutPropertiesLoose36(ownProps, _excluded58);
  var userDefinedBg = (_ref2 = (_ref22 = background2 != null ? background2 : backgroundColor) != null ? _ref22 : bg) != null ? _ref2 : bgColor;
  if (userDefinedBg) {
    styles2.bg = userDefinedBg;
    styles2[cssVars.arrowBg["var"]] = getCSSVar(theme2, "colors", userDefinedBg);
  }
  var tooltip = useTooltip(_extends40({}, rest, {
    direction: theme2.direction
  }));
  var shouldWrap = isString(children) || shouldWrapChildren;
  var trigger2;
  if (shouldWrap) {
    trigger2 = React67.createElement(chakra.span, _extends40({
      tabIndex: 0
    }, tooltip.getTriggerProps()), children);
  } else {
    var child = React67.Children.only(children);
    trigger2 = React67.cloneElement(child, tooltip.getTriggerProps(child.props, child.ref));
  }
  var hasAriaLabel = !!ariaLabel;
  var _tooltipProps = tooltip.getTooltipProps({}, ref);
  var tooltipProps = hasAriaLabel ? omit(_tooltipProps, ["role", "id"]) : _tooltipProps;
  var hiddenProps = pick(_tooltipProps, ["role", "id"]);
  if (!label) {
    return React67.createElement(React67.Fragment, null, children);
  }
  return React67.createElement(React67.Fragment, null, trigger2, React67.createElement(AnimatePresence, null, tooltip.isOpen && React67.createElement(Portal, portalProps, React67.createElement(chakra.div, _extends40({}, tooltip.getTooltipPositionerProps(), {
    __css: {
      zIndex: styles2.zIndex,
      pointerEvents: "none"
    }
  }), React67.createElement(StyledTooltip, _extends40({
    variants: scale2
  }, tooltipProps, {
    initial: "exit",
    animate: "enter",
    exit: "exit",
    __css: styles2
  }), label, hasAriaLabel && React67.createElement(VisuallyHidden, hiddenProps, ariaLabel), hasArrow && React67.createElement(chakra.div, {
    "data-popper-arrow": true,
    className: "chakra-tooltip__arrow-wrapper"
  }, React67.createElement(chakra.div, {
    "data-popper-arrow-inner": true,
    className: "chakra-tooltip__arrow",
    __css: {
      bg: styles2.bg
    }
  })))))));
});
if (__DEV__) {
  Tooltip2.displayName = "Tooltip";
}

// node_modules/@chakra-ui/react/dist/chakra-ui-react.esm.js
function _objectWithoutPropertiesLoose37(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded59 = ["children", "toastOptions"];
var ChakraProvider3 = function ChakraProvider4(_ref2) {
  var children = _ref2.children, toastOptions = _ref2.toastOptions, restProps = _objectWithoutPropertiesLoose37(_ref2, _excluded59);
  return React68.createElement(ChakraProvider, restProps, children, React68.createElement(ToastProvider, toastOptions));
};
ChakraProvider3.defaultProps = {
  theme
};
function extendTheme() {
  for (var _len = arguments.length, extensions = new Array(_len), _key = 0; _key < _len; _key++) {
    extensions[_key] = arguments[_key];
  }
  var overrides = [].concat(extensions);
  var baseTheme = extensions[extensions.length - 1];
  if (isChakraTheme(baseTheme) && overrides.length > 1) {
    overrides = overrides.slice(0, overrides.length - 1);
  } else {
    baseTheme = theme;
  }
  return pipe.apply(void 0, overrides.map(function(extension) {
    return function(prevTheme) {
      return isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension);
    };
  }))(baseTheme);
}
function mergeThemeOverride() {
  for (var _len2 = arguments.length, overrides = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    overrides[_key2] = arguments[_key2];
  }
  return import_lodash.default.apply(void 0, [{}].concat(overrides, [mergeThemeCustomizer]));
}
function mergeThemeCustomizer(source, override, key, object2) {
  if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object2, key)) {
    return function() {
      var sourceValue = isFunction(source) ? source.apply(void 0, arguments) : source;
      var overrideValue = isFunction(override) ? override.apply(void 0, arguments) : override;
      return (0, import_lodash.default)({}, sourceValue, overrideValue, mergeThemeCustomizer);
    };
  }
  return void 0;
}
function withDefaultColorScheme(_ref2) {
  var colorScheme = _ref2.colorScheme, components2 = _ref2.components;
  return function(theme2) {
    var names3 = Object.keys(theme2.components || {});
    if (Array.isArray(components2)) {
      names3 = components2;
    } else if (isObject(components2)) {
      names3 = Object.keys(components2);
    }
    return mergeThemeOverride(theme2, {
      components: fromEntries(names3.map(function(componentName) {
        var withColorScheme = {
          defaultProps: {
            colorScheme
          }
        };
        return [componentName, withColorScheme];
      }))
    });
  };
}
function withDefaultSize(_ref2) {
  var size2 = _ref2.size, components2 = _ref2.components;
  return function(theme2) {
    var names3 = Object.keys(theme2.components || {});
    if (Array.isArray(components2)) {
      names3 = components2;
    } else if (isObject(components2)) {
      names3 = Object.keys(components2);
    }
    return mergeThemeOverride(theme2, {
      components: fromEntries(names3.map(function(componentName) {
        var withSize = {
          defaultProps: {
            size: size2
          }
        };
        return [componentName, withSize];
      }))
    });
  };
}
function withDefaultVariant(_ref2) {
  var variant = _ref2.variant, components2 = _ref2.components;
  return function(theme2) {
    var names3 = Object.keys(theme2.components || {});
    if (Array.isArray(components2)) {
      names3 = components2;
    } else if (isObject(components2)) {
      names3 = Object.keys(components2);
    }
    return mergeThemeOverride(theme2, {
      components: fromEntries(names3.map(function(componentName) {
        var withVariant = {
          defaultProps: {
            variant
          }
        };
        return [componentName, withVariant];
      }))
    });
  };
}
function withDefaultProps(_ref2) {
  var _ref$defaultProps = _ref2.defaultProps, colorScheme = _ref$defaultProps.colorScheme, variant = _ref$defaultProps.variant, size2 = _ref$defaultProps.size, components2 = _ref2.components;
  var identity2 = function identity3(t) {
    return t;
  };
  var fns = [colorScheme ? withDefaultColorScheme({
    colorScheme,
    components: components2
  }) : identity2, size2 ? withDefaultSize({
    size: size2,
    components: components2
  }) : identity2, variant ? withDefaultVariant({
    variant,
    components: components2
  }) : identity2];
  return function(theme2) {
    return mergeThemeOverride(pipe.apply(void 0, fns)(theme2));
  };
}
export {
  AbsoluteCenter,
  Accordion2 as Accordion,
  AccordionButton,
  AccordionDescendantsProvider,
  AccordionIcon,
  AccordionItem,
  AccordionPanel,
  AccordionProvider,
  Alert2 as Alert,
  AlertDescription,
  AlertDialog,
  ModalBody as AlertDialogBody,
  ModalCloseButton as AlertDialogCloseButton,
  AlertDialogContent,
  ModalFooter as AlertDialogFooter,
  ModalHeader as AlertDialogHeader,
  ModalOverlay as AlertDialogOverlay,
  AlertIcon,
  AlertTitle,
  AspectRatio,
  Avatar2 as Avatar,
  AvatarBadge,
  AvatarGroup,
  Badge2 as Badge,
  Box,
  Breadcrumb2 as Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbSeparator,
  Button2 as Button,
  ButtonGroup,
  ButtonSpinner,
  CSSReset,
  CSSVars,
  Center,
  ChakraProvider3 as ChakraProvider,
  Checkbox2 as Checkbox,
  CheckboxGroup,
  Circle,
  CircularProgress,
  CircularProgressLabel,
  CloseButton2 as CloseButton,
  Code2 as Code,
  Collapse,
  ColorModeContext,
  ColorModeProvider,
  ColorModeScript,
  Container4 as Container,
  ControlBox,
  DarkMode,
  DefaultIcon3 as DefaultIcon,
  Divider2 as Divider,
  Drawer2 as Drawer,
  ModalBody as DrawerBody,
  ModalCloseButton as DrawerCloseButton,
  DrawerContent,
  ModalFooter as DrawerFooter,
  ModalHeader as DrawerHeader,
  ModalOverlay as DrawerOverlay,
  TransitionEasings as EASINGS,
  Editable2 as Editable,
  EditableInput,
  EditablePreview,
  EditableTextarea,
  Fade,
  Flex,
  FormControl,
  FormErrorIcon,
  FormErrorMessage,
  FormHelperText,
  FormLabel2 as FormLabel,
  GlobalStyle,
  Grid,
  GridItem,
  HStack,
  Heading2 as Heading,
  Hide,
  Highlight,
  Icon,
  IconButton,
  Image$1 as Image,
  Img,
  Input2 as Input,
  InputAddon,
  InputGroup,
  InputLeftAddon,
  InputLeftElement,
  InputRightAddon,
  InputRightElement,
  Kbd2 as Kbd,
  LightMode,
  Link2 as Link,
  LinkBox,
  LinkOverlay,
  List2 as List,
  ListIcon,
  ListItem,
  Mark,
  Menu2 as Menu,
  MenuButton,
  MenuCommand,
  MenuDescendantsProvider,
  MenuDivider,
  MenuGroup,
  MenuIcon,
  MenuItem,
  MenuItemOption,
  MenuList,
  MenuOptionGroup,
  MenuProvider,
  Modal2 as Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalContextProvider,
  ModalFocusScope,
  ModalFooter,
  ModalHeader,
  ModalOverlay,
  NumberDecrementStepper,
  NumberIncrementStepper,
  NumberInput2 as NumberInput,
  NumberInputField,
  NumberInputStepper,
  OrderedList,
  PinInput2 as PinInput,
  PinInputDescendantsProvider,
  PinInputField,
  PinInputProvider,
  Popover2 as Popover,
  PopoverAnchor,
  PopoverArrow,
  PopoverBody,
  PopoverCloseButton,
  PopoverContent,
  PopoverFooter,
  PopoverHeader,
  PopoverTrigger,
  Portal,
  PortalManager,
  Progress2 as Progress,
  ProgressLabel,
  Radio2 as Radio,
  RadioGroup,
  RangeSlider,
  RangeSliderFilledTrack,
  RangeSliderMark,
  RangeSliderProvider,
  RangeSliderThumb,
  RangeSliderTrack,
  RequiredIndicator,
  STORAGE_KEY,
  ScaleFade,
  Select2 as Select,
  SelectField,
  Show,
  SimpleGrid,
  Skeleton2 as Skeleton,
  SkeletonCircle,
  SkeletonText,
  Slide,
  SlideFade,
  Slider2 as Slider,
  SliderFilledTrack,
  SliderMark,
  SliderProvider,
  SliderThumb,
  SliderTrack,
  Spacer,
  Spinner2 as Spinner,
  Square,
  Stack,
  StackDivider,
  StackItem,
  Stat2 as Stat,
  StatArrow,
  StatDownArrow,
  StatGroup,
  StatHelpText,
  StatLabel,
  StatNumber,
  StatUpArrow,
  StyledStepper,
  StylesProvider,
  Switch2 as Switch,
  Tab,
  TabIndicator,
  TabList,
  TabPanel,
  TabPanels,
  Table2 as Table,
  TableCaption,
  TableContainer,
  Tabs2 as Tabs,
  TabsDescendantsProvider,
  TabsProvider,
  Tag2 as Tag,
  TagCloseButton,
  TagLabel,
  TagLeftIcon,
  TagRightIcon,
  Tbody,
  Td,
  Text,
  Textarea2 as Textarea,
  Tfoot,
  Th,
  Thead,
  ThemeProvider,
  Toast,
  ToastProvider,
  Tooltip2 as Tooltip,
  Tr,
  UnorderedList,
  VStack,
  VisuallyHidden,
  VisuallyHiddenInput,
  Wrap,
  WrapItem,
  addPrefix,
  assignRef,
  background,
  baseStyle22 as baseStyle,
  border,
  calc,
  chakra,
  color,
  cookieStorageManager,
  cookieStorageManagerSSR,
  createCookieStorageManager,
  createIcon,
  createLocalStorageManager,
  createRenderToast,
  createStandaloneToast,
  createStylesContext,
  createToastFn,
  css,
  cssVar,
  defaultStandaloneParam,
  effect,
  extendTheme,
  fadeConfig,
  filter,
  flattenTokens,
  flexbox,
  forwardRef,
  getCss,
  getScriptSrc,
  getToastPlacement,
  getToken,
  grid,
  interactivity,
  isChakraTheme,
  isStyleProp,
  keyframes,
  layout,
  layoutPropNames,
  list,
  localStorageManager,
  mergeThemeOverride,
  omitThemingProps,
  others,
  cssVars as popperCSSVars,
  position,
  propNames,
  pseudoPropNames,
  pseudoSelectors,
  requiredChakraThemeKeys,
  resolveStyleConfig,
  ring,
  scaleFadeConfig,
  scroll,
  shouldForwardProp,
  shouldShowFallbackImage,
  slideFadeConfig,
  space,
  styled,
  systemProps,
  textDecoration,
  theme,
  toCSSObject,
  toCSSVar,
  toVarDefinition,
  toVarReference,
  tokenToCSSVar,
  transform,
  transition,
  typography,
  useAccordion,
  useAccordionContext,
  useAccordionDescendant,
  useAccordionDescendants,
  useAccordionDescendantsContext,
  useAccordionItem,
  useAccordionItemState,
  useAccordionStyles,
  useAlertStyles,
  useAnimationState,
  useAriaHidden,
  useAvatarStyles,
  useBoolean,
  useBreadcrumbStyles,
  useBreakpoint,
  useBreakpointValue,
  useButtonGroup,
  useCallbackRef,
  useChakra,
  useCheckbox,
  useCheckboxGroup,
  useCheckboxGroupContext,
  useClipboard,
  useColorMode,
  useColorModePreference,
  useColorModeValue,
  useConst,
  useControllableProp,
  useControllableState,
  useCounter,
  useDimensions,
  useDisclosure,
  useDrawerContext,
  useEditable,
  useEditableControls,
  useEditableState,
  useEditableStyles,
  useEventListener,
  useEventListenerMap,
  useFocusEffect,
  useFocusOnHide,
  useFocusOnPointerDown,
  useFocusOnShow,
  useForceUpdate,
  useFormControl,
  useFormControlContext,
  useFormControlProps,
  useFormControlStyles,
  useFormErrorStyles,
  useHighlight,
  useId,
  useIds,
  useImage,
  useInputGroupStyles,
  useInterval,
  useLatestRef,
  useListStyles,
  useMediaQuery,
  useMenu,
  useMenuButton,
  useMenuContext,
  useMenuDescendant,
  useMenuDescendants,
  useMenuDescendantsContext,
  useMenuItem,
  useMenuList,
  useMenuOption,
  useMenuOptionGroup,
  useMenuPositioner,
  useMenuState,
  useMenuStyles,
  useMergeRefs,
  useModal,
  useModalContext,
  useModalStyles,
  useMouseDownRef,
  useMultiStyleConfig,
  useNumberInput,
  useNumberInputStyles,
  useOptionalPart,
  useOutsideClick,
  usePanGesture,
  usePinInput,
  usePinInputContext,
  usePinInputDescendant,
  usePinInputDescendants,
  usePinInputDescendantsContext,
  usePinInputField,
  usePointerEvent,
  usePopover,
  usePopoverContext,
  usePopoverStyles,
  usePopper,
  usePortalManager,
  usePrefersReducedMotion,
  usePrevious,
  useProgressStyles,
  useQuery,
  useRadio,
  useRadioGroup,
  useRadioGroupContext,
  useRangeSlider,
  useRangeSliderContext,
  useRangeSliderStyles,
  useSafeLayoutEffect,
  useShortcut,
  useSlider,
  useSliderContext,
  useSliderStyles,
  useStatStyles,
  useStyleConfig,
  useStyles,
  useTab,
  useTabIndicator,
  useTabList,
  useTabPanel,
  useTabPanels,
  useTableStyles,
  useTabs,
  useTabsContext,
  useTabsDescendant,
  useTabsDescendants,
  useTabsDescendantsContext,
  useTabsStyles,
  useTagStyles,
  useTheme,
  useTimeout,
  useToast,
  useToken,
  useTooltip,
  useUnmountEffect,
  useUpdateEffect,
  useWhyDidYouUpdate,
  visuallyHiddenStyle,
  withDefaultColorScheme,
  withDefaultProps,
  withDefaultSize,
  withDefaultVariant
};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
//# sourceMappingURL=@chakra-ui_react.js.map
